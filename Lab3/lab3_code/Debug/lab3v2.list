
lab3v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002918  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002a24  08002a24  00012a24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a48  08002a48  00020028  2**0
                  CONTENTS
  4 .ARM          00000000  08002a48  08002a48  00020028  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a48  08002a48  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a48  08002a48  00012a48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a4c  08002a4c  00012a4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  08002a50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d4  20000028  08002a78  00020028  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000fc  08002a78  000200fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 12 .debug_info   000092b0  00000000  00000000  00020051  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a32  00000000  00000000  00029301  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a10  00000000  00000000  0002ad38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000928  00000000  00000000  0002b748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016a98  00000000  00000000  0002c070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b361  00000000  00000000  00042b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082449  00000000  00000000  0004de69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d02b2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002850  00000000  00000000  000d0308  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000028 	.word	0x20000028
 8000128:	00000000 	.word	0x00000000
 800012c:	08002a0c 	.word	0x08002a0c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000002c 	.word	0x2000002c
 8000148:	08002a0c 	.word	0x08002a0c

0800014c <button_reading>:
		button1_Pin,
		button2_Pin,
		button3_Pin
};

void button_reading(void) {
 800014c:	b590      	push	{r4, r7, lr}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
    for (char i = 0; i < NO_OF_BUTTONS; ++i) {
 8000152:	2300      	movs	r3, #0
 8000154:	71fb      	strb	r3, [r7, #7]
 8000156:	e046      	b.n	80001e6 <button_reading+0x9a>
        debounceButtonBuffer1[i] = debounceButtonBuffer2[i];
 8000158:	79fa      	ldrb	r2, [r7, #7]
 800015a:	79fb      	ldrb	r3, [r7, #7]
 800015c:	4926      	ldr	r1, [pc, #152]	; (80001f8 <button_reading+0xac>)
 800015e:	5c89      	ldrb	r1, [r1, r2]
 8000160:	4a26      	ldr	r2, [pc, #152]	; (80001fc <button_reading+0xb0>)
 8000162:	54d1      	strb	r1, [r2, r3]
        debounceButtonBuffer2[i] = HAL_GPIO_ReadPin(button1_GPIO_Port, pinsButtons[i]);
 8000164:	79fb      	ldrb	r3, [r7, #7]
 8000166:	4a26      	ldr	r2, [pc, #152]	; (8000200 <button_reading+0xb4>)
 8000168:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800016c:	79fc      	ldrb	r4, [r7, #7]
 800016e:	4619      	mov	r1, r3
 8000170:	4824      	ldr	r0, [pc, #144]	; (8000204 <button_reading+0xb8>)
 8000172:	f001 fc1f 	bl	80019b4 <HAL_GPIO_ReadPin>
 8000176:	4603      	mov	r3, r0
 8000178:	461a      	mov	r2, r3
 800017a:	4b1f      	ldr	r3, [pc, #124]	; (80001f8 <button_reading+0xac>)
 800017c:	551a      	strb	r2, [r3, r4]

        if (debounceButtonBuffer1[i] == debounceButtonBuffer2[i]) {
 800017e:	79fb      	ldrb	r3, [r7, #7]
 8000180:	4a1e      	ldr	r2, [pc, #120]	; (80001fc <button_reading+0xb0>)
 8000182:	5cd2      	ldrb	r2, [r2, r3]
 8000184:	79fb      	ldrb	r3, [r7, #7]
 8000186:	491c      	ldr	r1, [pc, #112]	; (80001f8 <button_reading+0xac>)
 8000188:	5ccb      	ldrb	r3, [r1, r3]
 800018a:	429a      	cmp	r2, r3
 800018c:	d128      	bne.n	80001e0 <button_reading+0x94>
            buttonBuffer[i] = debounceButtonBuffer1[i];
 800018e:	79fa      	ldrb	r2, [r7, #7]
 8000190:	79fb      	ldrb	r3, [r7, #7]
 8000192:	491a      	ldr	r1, [pc, #104]	; (80001fc <button_reading+0xb0>)
 8000194:	5c89      	ldrb	r1, [r1, r2]
 8000196:	4a1c      	ldr	r2, [pc, #112]	; (8000208 <button_reading+0xbc>)
 8000198:	54d1      	strb	r1, [r2, r3]

            if (buttonBuffer[i] == BUTTON_IS_PRESSED) {
 800019a:	79fb      	ldrb	r3, [r7, #7]
 800019c:	4a1a      	ldr	r2, [pc, #104]	; (8000208 <button_reading+0xbc>)
 800019e:	5cd3      	ldrb	r3, [r2, r3]
 80001a0:	2b00      	cmp	r3, #0
 80001a2:	d114      	bne.n	80001ce <button_reading+0x82>
                // If a button is pressed, we start counting
                if (counterForButtonPress1s[i] < DURATION_FOR_AUTO_INCREASING) {
 80001a4:	79fb      	ldrb	r3, [r7, #7]
 80001a6:	4a19      	ldr	r2, [pc, #100]	; (800020c <button_reading+0xc0>)
 80001a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80001ac:	2b63      	cmp	r3, #99	; 0x63
 80001ae:	d809      	bhi.n	80001c4 <button_reading+0x78>
                    counterForButtonPress1s[i]++;
 80001b0:	79fb      	ldrb	r3, [r7, #7]
 80001b2:	4a16      	ldr	r2, [pc, #88]	; (800020c <button_reading+0xc0>)
 80001b4:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80001b8:	3201      	adds	r2, #1
 80001ba:	b291      	uxth	r1, r2
 80001bc:	4a13      	ldr	r2, [pc, #76]	; (800020c <button_reading+0xc0>)
 80001be:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80001c2:	e00d      	b.n	80001e0 <button_reading+0x94>
                } else {
                    // The flag is turned on when 1 second has passed since the button is pressed.
                    flagForButtonPress1s[i] = 1;
 80001c4:	79fb      	ldrb	r3, [r7, #7]
 80001c6:	4a12      	ldr	r2, [pc, #72]	; (8000210 <button_reading+0xc4>)
 80001c8:	2101      	movs	r1, #1
 80001ca:	54d1      	strb	r1, [r2, r3]
 80001cc:	e008      	b.n	80001e0 <button_reading+0x94>
                    // todo
                }
            } else {
                counterForButtonPress1s[i] = 0;
 80001ce:	79fb      	ldrb	r3, [r7, #7]
 80001d0:	4a0e      	ldr	r2, [pc, #56]	; (800020c <button_reading+0xc0>)
 80001d2:	2100      	movs	r1, #0
 80001d4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                flagForButtonPress1s[i] = 0;
 80001d8:	79fb      	ldrb	r3, [r7, #7]
 80001da:	4a0d      	ldr	r2, [pc, #52]	; (8000210 <button_reading+0xc4>)
 80001dc:	2100      	movs	r1, #0
 80001de:	54d1      	strb	r1, [r2, r3]
    for (char i = 0; i < NO_OF_BUTTONS; ++i) {
 80001e0:	79fb      	ldrb	r3, [r7, #7]
 80001e2:	3301      	adds	r3, #1
 80001e4:	71fb      	strb	r3, [r7, #7]
 80001e6:	79fb      	ldrb	r3, [r7, #7]
 80001e8:	2b02      	cmp	r3, #2
 80001ea:	d9b5      	bls.n	8000158 <button_reading+0xc>
            }
        }
    }
}
 80001ec:	bf00      	nop
 80001ee:	bf00      	nop
 80001f0:	370c      	adds	r7, #12
 80001f2:	46bd      	mov	sp, r7
 80001f4:	bd90      	pop	{r4, r7, pc}
 80001f6:	bf00      	nop
 80001f8:	20000058 	.word	0x20000058
 80001fc:	20000054 	.word	0x20000054
 8000200:	20000000 	.word	0x20000000
 8000204:	40010800 	.word	0x40010800
 8000208:	20000050 	.word	0x20000050
 800020c:	20000060 	.word	0x20000060
 8000210:	2000005c 	.word	0x2000005c

08000214 <is_button_pressed>:

unsigned char is_button_pressed(uint8_t index) {
 8000214:	b480      	push	{r7}
 8000216:	b083      	sub	sp, #12
 8000218:	af00      	add	r7, sp, #0
 800021a:	4603      	mov	r3, r0
 800021c:	71fb      	strb	r3, [r7, #7]
    if (index >= NO_OF_BUTTONS) return 0;
 800021e:	79fb      	ldrb	r3, [r7, #7]
 8000220:	2b02      	cmp	r3, #2
 8000222:	d901      	bls.n	8000228 <is_button_pressed+0x14>
 8000224:	2300      	movs	r3, #0
 8000226:	e007      	b.n	8000238 <is_button_pressed+0x24>
    return (buttonBuffer[index] == BUTTON_IS_PRESSED);
 8000228:	79fb      	ldrb	r3, [r7, #7]
 800022a:	4a06      	ldr	r2, [pc, #24]	; (8000244 <is_button_pressed+0x30>)
 800022c:	5cd3      	ldrb	r3, [r2, r3]
 800022e:	2b00      	cmp	r3, #0
 8000230:	bf0c      	ite	eq
 8000232:	2301      	moveq	r3, #1
 8000234:	2300      	movne	r3, #0
 8000236:	b2db      	uxtb	r3, r3
}
 8000238:	4618      	mov	r0, r3
 800023a:	370c      	adds	r7, #12
 800023c:	46bd      	mov	sp, r7
 800023e:	bc80      	pop	{r7}
 8000240:	4770      	bx	lr
 8000242:	bf00      	nop
 8000244:	20000050 	.word	0x20000050

08000248 <is_button_pressed_1s>:

unsigned char is_button_pressed_1s(unsigned char index) {
 8000248:	b480      	push	{r7}
 800024a:	b083      	sub	sp, #12
 800024c:	af00      	add	r7, sp, #0
 800024e:	4603      	mov	r3, r0
 8000250:	71fb      	strb	r3, [r7, #7]
    if (index >= NO_OF_BUTTONS) return 0xff;
 8000252:	79fb      	ldrb	r3, [r7, #7]
 8000254:	2b02      	cmp	r3, #2
 8000256:	d901      	bls.n	800025c <is_button_pressed_1s+0x14>
 8000258:	23ff      	movs	r3, #255	; 0xff
 800025a:	e007      	b.n	800026c <is_button_pressed_1s+0x24>
    return (flagForButtonPress1s[index] == 1);
 800025c:	79fb      	ldrb	r3, [r7, #7]
 800025e:	4a06      	ldr	r2, [pc, #24]	; (8000278 <is_button_pressed_1s+0x30>)
 8000260:	5cd3      	ldrb	r3, [r2, r3]
 8000262:	2b01      	cmp	r3, #1
 8000264:	bf0c      	ite	eq
 8000266:	2301      	moveq	r3, #1
 8000268:	2300      	movne	r3, #0
 800026a:	b2db      	uxtb	r3, r3
}
 800026c:	4618      	mov	r0, r3
 800026e:	370c      	adds	r7, #12
 8000270:	46bd      	mov	sp, r7
 8000272:	bc80      	pop	{r7}
 8000274:	4770      	bx	lr
 8000276:	bf00      	nop
 8000278:	2000005c 	.word	0x2000005c

0800027c <detect_signal_button>:


int previous_mode = 1;

void detect_signal_button(enum ButtonState *buttonState, int button_pin)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b082      	sub	sp, #8
 8000280:	af00      	add	r7, sp, #0
 8000282:	6078      	str	r0, [r7, #4]
 8000284:	6039      	str	r1, [r7, #0]
    switch (*buttonState) {
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	781b      	ldrb	r3, [r3, #0]
 800028a:	2b02      	cmp	r3, #2
 800028c:	d02a      	beq.n	80002e4 <detect_signal_button+0x68>
 800028e:	2b02      	cmp	r3, #2
 8000290:	dc34      	bgt.n	80002fc <detect_signal_button+0x80>
 8000292:	2b00      	cmp	r3, #0
 8000294:	d002      	beq.n	800029c <detect_signal_button+0x20>
 8000296:	2b01      	cmp	r3, #1
 8000298:	d00c      	beq.n	80002b4 <detect_signal_button+0x38>
 800029a:	e02f      	b.n	80002fc <detect_signal_button+0x80>
        case BUTTON_RELEASED:
            if (is_button_pressed(button_pin)) {
 800029c:	683b      	ldr	r3, [r7, #0]
 800029e:	b2db      	uxtb	r3, r3
 80002a0:	4618      	mov	r0, r3
 80002a2:	f7ff ffb7 	bl	8000214 <is_button_pressed>
 80002a6:	4603      	mov	r3, r0
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d02b      	beq.n	8000304 <detect_signal_button+0x88>
                *buttonState = BUTTON_PRESSED;
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	2201      	movs	r2, #1
 80002b0:	701a      	strb	r2, [r3, #0]
                // INCREASE VALUE OF PORT A BY ONE UNIT
            }
            break;
 80002b2:	e027      	b.n	8000304 <detect_signal_button+0x88>

        case BUTTON_PRESSED:
            if (!is_button_pressed(button_pin)) {
 80002b4:	683b      	ldr	r3, [r7, #0]
 80002b6:	b2db      	uxtb	r3, r3
 80002b8:	4618      	mov	r0, r3
 80002ba:	f7ff ffab 	bl	8000214 <is_button_pressed>
 80002be:	4603      	mov	r3, r0
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d103      	bne.n	80002cc <detect_signal_button+0x50>
                *buttonState = BUTTON_RELEASED;
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	2200      	movs	r2, #0
 80002c8:	701a      	strb	r2, [r3, #0]
            } else if (is_button_pressed_1s(button_pin)) {
                *buttonState = BUTTON_PRESSED_MORE_THAN_1_SECOND;
            }
            break;
 80002ca:	e01d      	b.n	8000308 <detect_signal_button+0x8c>
            } else if (is_button_pressed_1s(button_pin)) {
 80002cc:	683b      	ldr	r3, [r7, #0]
 80002ce:	b2db      	uxtb	r3, r3
 80002d0:	4618      	mov	r0, r3
 80002d2:	f7ff ffb9 	bl	8000248 <is_button_pressed_1s>
 80002d6:	4603      	mov	r3, r0
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d015      	beq.n	8000308 <detect_signal_button+0x8c>
                *buttonState = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	2202      	movs	r2, #2
 80002e0:	701a      	strb	r2, [r3, #0]
            break;
 80002e2:	e011      	b.n	8000308 <detect_signal_button+0x8c>

        case BUTTON_PRESSED_MORE_THAN_1_SECOND:
            if (!is_button_pressed(button_pin)) {
 80002e4:	683b      	ldr	r3, [r7, #0]
 80002e6:	b2db      	uxtb	r3, r3
 80002e8:	4618      	mov	r0, r3
 80002ea:	f7ff ff93 	bl	8000214 <is_button_pressed>
 80002ee:	4603      	mov	r3, r0
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d10b      	bne.n	800030c <detect_signal_button+0x90>
                *buttonState = BUTTON_RELEASED;
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	2200      	movs	r2, #0
 80002f8:	701a      	strb	r2, [r3, #0]
            }
            // TODO: Add functionality here for long press
            break;
 80002fa:	e007      	b.n	800030c <detect_signal_button+0x90>

        default:
            *buttonState = BUTTON_RELEASED;
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	2200      	movs	r2, #0
 8000300:	701a      	strb	r2, [r3, #0]
    }
}
 8000302:	e004      	b.n	800030e <detect_signal_button+0x92>
            break;
 8000304:	bf00      	nop
 8000306:	e002      	b.n	800030e <detect_signal_button+0x92>
            break;
 8000308:	bf00      	nop
 800030a:	e000      	b.n	800030e <detect_signal_button+0x92>
            break;
 800030c:	bf00      	nop
}
 800030e:	bf00      	nop
 8000310:	3708      	adds	r7, #8
 8000312:	46bd      	mov	sp, r7
 8000314:	bd80      	pop	{r7, pc}
	...

08000318 <fsm_for_input_processing>:

void fsm_for_input_processing(void) {
 8000318:	b580      	push	{r7, lr}
 800031a:	b082      	sub	sp, #8
 800031c:	af00      	add	r7, sp, #0

	for (int i = 0; i < NO_OF_BUTTONS; i++)
 800031e:	2300      	movs	r3, #0
 8000320:	607b      	str	r3, [r7, #4]
 8000322:	e009      	b.n	8000338 <fsm_for_input_processing+0x20>
	{
		detect_signal_button(&buttonStates[i], i);  // Pass button state and pin number
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	4aac      	ldr	r2, [pc, #688]	; (80005d8 <fsm_for_input_processing+0x2c0>)
 8000328:	4413      	add	r3, r2
 800032a:	6879      	ldr	r1, [r7, #4]
 800032c:	4618      	mov	r0, r3
 800032e:	f7ff ffa5 	bl	800027c <detect_signal_button>
	for (int i = 0; i < NO_OF_BUTTONS; i++)
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	3301      	adds	r3, #1
 8000336:	607b      	str	r3, [r7, #4]
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	2b02      	cmp	r3, #2
 800033c:	ddf2      	ble.n	8000324 <fsm_for_input_processing+0xc>
	}

    // Handle mode switching
    switch(mode) {
 800033e:	4ba7      	ldr	r3, [pc, #668]	; (80005dc <fsm_for_input_processing+0x2c4>)
 8000340:	781b      	ldrb	r3, [r3, #0]
 8000342:	2b03      	cmp	r3, #3
 8000344:	f200 80ed 	bhi.w	8000522 <fsm_for_input_processing+0x20a>
 8000348:	a201      	add	r2, pc, #4	; (adr r2, 8000350 <fsm_for_input_processing+0x38>)
 800034a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800034e:	bf00      	nop
 8000350:	08000361 	.word	0x08000361
 8000354:	080003c3 	.word	0x080003c3
 8000358:	08000453 	.word	0x08000453
 800035c:	080004b9 	.word	0x080004b9
        case MODE1:
            if (counterLightBuffer[0] != counterLightBuffer[1]+counterLightBuffer[2])
 8000360:	4b9f      	ldr	r3, [pc, #636]	; (80005e0 <fsm_for_input_processing+0x2c8>)
 8000362:	681a      	ldr	r2, [r3, #0]
 8000364:	4b9e      	ldr	r3, [pc, #632]	; (80005e0 <fsm_for_input_processing+0x2c8>)
 8000366:	6859      	ldr	r1, [r3, #4]
 8000368:	4b9d      	ldr	r3, [pc, #628]	; (80005e0 <fsm_for_input_processing+0x2c8>)
 800036a:	689b      	ldr	r3, [r3, #8]
 800036c:	440b      	add	r3, r1
 800036e:	429a      	cmp	r2, r3
 8000370:	d00b      	beq.n	800038a <fsm_for_input_processing+0x72>
            {
            	HAL_GPIO_WritePin(GPIOA, Debug_Pin, 1); // indicate the red led is modified
 8000372:	2201      	movs	r2, #1
 8000374:	2102      	movs	r1, #2
 8000376:	489b      	ldr	r0, [pc, #620]	; (80005e4 <fsm_for_input_processing+0x2cc>)
 8000378:	f001 fb33 	bl	80019e2 <HAL_GPIO_WritePin>
            	counterLightBuffer[0] = counterLightBuffer[1]+counterLightBuffer[2]; // if green + yellow != red
 800037c:	4b98      	ldr	r3, [pc, #608]	; (80005e0 <fsm_for_input_processing+0x2c8>)
 800037e:	685a      	ldr	r2, [r3, #4]
 8000380:	4b97      	ldr	r3, [pc, #604]	; (80005e0 <fsm_for_input_processing+0x2c8>)
 8000382:	689b      	ldr	r3, [r3, #8]
 8000384:	4413      	add	r3, r2
 8000386:	4a96      	ldr	r2, [pc, #600]	; (80005e0 <fsm_for_input_processing+0x2c8>)
 8000388:	6013      	str	r3, [r2, #0]
            																		// make equal
            }

            fsm_traffic_light();
 800038a:	f000 fedb 	bl	8001144 <fsm_traffic_light>

            if (flag[1] == 1)
 800038e:	4b96      	ldr	r3, [pc, #600]	; (80005e8 <fsm_for_input_processing+0x2d0>)
 8000390:	685b      	ldr	r3, [r3, #4]
 8000392:	2b01      	cmp	r3, #1
 8000394:	d102      	bne.n	800039c <fsm_for_input_processing+0x84>
            {
    			setTimer_blinkly(50);
 8000396:	2032      	movs	r0, #50	; 0x32
 8000398:	f000 fe5c 	bl	8001054 <setTimer_blinkly>
            }
            previous_mode = 1;
 800039c:	4b93      	ldr	r3, [pc, #588]	; (80005ec <fsm_for_input_processing+0x2d4>)
 800039e:	2201      	movs	r2, #1
 80003a0:	601a      	str	r2, [r3, #0]
            setTimer_blinkly(50);
 80003a2:	2032      	movs	r0, #50	; 0x32
 80003a4:	f000 fe56 	bl	8001054 <setTimer_blinkly>
            setCounter[0] = counterLightBuffer[0];
 80003a8:	4b8d      	ldr	r3, [pc, #564]	; (80005e0 <fsm_for_input_processing+0x2c8>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	4a90      	ldr	r2, [pc, #576]	; (80005f0 <fsm_for_input_processing+0x2d8>)
 80003ae:	6013      	str	r3, [r2, #0]
            setCounter[1] = counterLightBuffer[1];
 80003b0:	4b8b      	ldr	r3, [pc, #556]	; (80005e0 <fsm_for_input_processing+0x2c8>)
 80003b2:	685b      	ldr	r3, [r3, #4]
 80003b4:	4a8e      	ldr	r2, [pc, #568]	; (80005f0 <fsm_for_input_processing+0x2d8>)
 80003b6:	6053      	str	r3, [r2, #4]
            setCounter[2] = counterLightBuffer[2];
 80003b8:	4b89      	ldr	r3, [pc, #548]	; (80005e0 <fsm_for_input_processing+0x2c8>)
 80003ba:	689b      	ldr	r3, [r3, #8]
 80003bc:	4a8c      	ldr	r2, [pc, #560]	; (80005f0 <fsm_for_input_processing+0x2d8>)
 80003be:	6093      	str	r3, [r2, #8]
            break;
 80003c0:	e0af      	b.n	8000522 <fsm_for_input_processing+0x20a>

        case MODE2:
        	if (previous_mode == 1)
 80003c2:	4b8a      	ldr	r3, [pc, #552]	; (80005ec <fsm_for_input_processing+0x2d4>)
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	2b01      	cmp	r3, #1
 80003c8:	d10b      	bne.n	80003e2 <fsm_for_input_processing+0xca>
        	{
        		HAL_GPIO_WritePin(GPIOB, red1_Pin, 0);
 80003ca:	2200      	movs	r2, #0
 80003cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003d0:	4888      	ldr	r0, [pc, #544]	; (80005f4 <fsm_for_input_processing+0x2dc>)
 80003d2:	f001 fb06 	bl	80019e2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, red2_Pin, 0);
 80003d6:	2200      	movs	r2, #0
 80003d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80003dc:	4885      	ldr	r0, [pc, #532]	; (80005f4 <fsm_for_input_processing+0x2dc>)
 80003de:	f001 fb00 	bl	80019e2 <HAL_GPIO_WritePin>
        	}
        	if (flag[1] == 1)
 80003e2:	4b81      	ldr	r3, [pc, #516]	; (80005e8 <fsm_for_input_processing+0x2d0>)
 80003e4:	685b      	ldr	r3, [r3, #4]
 80003e6:	2b01      	cmp	r3, #1
 80003e8:	d10c      	bne.n	8000404 <fsm_for_input_processing+0xec>
        	{
    			HAL_GPIO_TogglePin(GPIOB, red1_Pin);
 80003ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003ee:	4881      	ldr	r0, [pc, #516]	; (80005f4 <fsm_for_input_processing+0x2dc>)
 80003f0:	f001 fb0f 	bl	8001a12 <HAL_GPIO_TogglePin>
    			HAL_GPIO_TogglePin(GPIOB, red2_Pin);
 80003f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80003f8:	487e      	ldr	r0, [pc, #504]	; (80005f4 <fsm_for_input_processing+0x2dc>)
 80003fa:	f001 fb0a 	bl	8001a12 <HAL_GPIO_TogglePin>
    			setTimer_blinkly(50);
 80003fe:	2032      	movs	r0, #50	; 0x32
 8000400:	f000 fe28 	bl	8001054 <setTimer_blinkly>
        	}
			HAL_GPIO_WritePin(GPIOB, yellow1_Pin, 0);
 8000404:	2200      	movs	r2, #0
 8000406:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800040a:	487a      	ldr	r0, [pc, #488]	; (80005f4 <fsm_for_input_processing+0x2dc>)
 800040c:	f001 fae9 	bl	80019e2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, yellow2_Pin, 0);
 8000410:	2200      	movs	r2, #0
 8000412:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000416:	4877      	ldr	r0, [pc, #476]	; (80005f4 <fsm_for_input_processing+0x2dc>)
 8000418:	f001 fae3 	bl	80019e2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, green1_Pin, 0);
 800041c:	2200      	movs	r2, #0
 800041e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000422:	4874      	ldr	r0, [pc, #464]	; (80005f4 <fsm_for_input_processing+0x2dc>)
 8000424:	f001 fadd 	bl	80019e2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, green2_Pin, 0);
 8000428:	2200      	movs	r2, #0
 800042a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800042e:	4871      	ldr	r0, [pc, #452]	; (80005f4 <fsm_for_input_processing+0x2dc>)
 8000430:	f001 fad7 	bl	80019e2 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(GPIOA, Debug_Pin, 0);
 8000434:	2200      	movs	r2, #0
 8000436:	2102      	movs	r1, #2
 8000438:	486a      	ldr	r0, [pc, #424]	; (80005e4 <fsm_for_input_processing+0x2cc>)
 800043a:	f001 fad2 	bl	80019e2 <HAL_GPIO_WritePin>
			updateDigitBuffer(setCounter[0], 02);
 800043e:	4b6c      	ldr	r3, [pc, #432]	; (80005f0 <fsm_for_input_processing+0x2d8>)
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	2102      	movs	r1, #2
 8000444:	4618      	mov	r0, r3
 8000446:	f000 fce3 	bl	8000e10 <updateDigitBuffer>

			previous_mode = 2;
 800044a:	4b68      	ldr	r3, [pc, #416]	; (80005ec <fsm_for_input_processing+0x2d4>)
 800044c:	2202      	movs	r2, #2
 800044e:	601a      	str	r2, [r3, #0]
            break;
 8000450:	e067      	b.n	8000522 <fsm_for_input_processing+0x20a>

        case MODE3:
			HAL_GPIO_WritePin(GPIOB, red1_Pin, 0);
 8000452:	2200      	movs	r2, #0
 8000454:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000458:	4866      	ldr	r0, [pc, #408]	; (80005f4 <fsm_for_input_processing+0x2dc>)
 800045a:	f001 fac2 	bl	80019e2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, red2_Pin, 0);
 800045e:	2200      	movs	r2, #0
 8000460:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000464:	4863      	ldr	r0, [pc, #396]	; (80005f4 <fsm_for_input_processing+0x2dc>)
 8000466:	f001 fabc 	bl	80019e2 <HAL_GPIO_WritePin>
			if (flag[1] == 1)
 800046a:	4b5f      	ldr	r3, [pc, #380]	; (80005e8 <fsm_for_input_processing+0x2d0>)
 800046c:	685b      	ldr	r3, [r3, #4]
 800046e:	2b01      	cmp	r3, #1
 8000470:	d10c      	bne.n	800048c <fsm_for_input_processing+0x174>
			{
				HAL_GPIO_TogglePin(GPIOB, yellow1_Pin);
 8000472:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000476:	485f      	ldr	r0, [pc, #380]	; (80005f4 <fsm_for_input_processing+0x2dc>)
 8000478:	f001 facb 	bl	8001a12 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(GPIOB, yellow2_Pin);
 800047c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000480:	485c      	ldr	r0, [pc, #368]	; (80005f4 <fsm_for_input_processing+0x2dc>)
 8000482:	f001 fac6 	bl	8001a12 <HAL_GPIO_TogglePin>
    			setTimer_blinkly(50);
 8000486:	2032      	movs	r0, #50	; 0x32
 8000488:	f000 fde4 	bl	8001054 <setTimer_blinkly>
			}
			HAL_GPIO_WritePin(GPIOB, green1_Pin, 0);
 800048c:	2200      	movs	r2, #0
 800048e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000492:	4858      	ldr	r0, [pc, #352]	; (80005f4 <fsm_for_input_processing+0x2dc>)
 8000494:	f001 faa5 	bl	80019e2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, green2_Pin, 0);
 8000498:	2200      	movs	r2, #0
 800049a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800049e:	4855      	ldr	r0, [pc, #340]	; (80005f4 <fsm_for_input_processing+0x2dc>)
 80004a0:	f001 fa9f 	bl	80019e2 <HAL_GPIO_WritePin>
			updateDigitBuffer(setCounter[1], 03);
 80004a4:	4b52      	ldr	r3, [pc, #328]	; (80005f0 <fsm_for_input_processing+0x2d8>)
 80004a6:	685b      	ldr	r3, [r3, #4]
 80004a8:	2103      	movs	r1, #3
 80004aa:	4618      	mov	r0, r3
 80004ac:	f000 fcb0 	bl	8000e10 <updateDigitBuffer>
			previous_mode = 3;
 80004b0:	4b4e      	ldr	r3, [pc, #312]	; (80005ec <fsm_for_input_processing+0x2d4>)
 80004b2:	2203      	movs	r2, #3
 80004b4:	601a      	str	r2, [r3, #0]
            break;
 80004b6:	e034      	b.n	8000522 <fsm_for_input_processing+0x20a>

        case MODE4:
			HAL_GPIO_WritePin(GPIOB, red1_Pin, 0);
 80004b8:	2200      	movs	r2, #0
 80004ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004be:	484d      	ldr	r0, [pc, #308]	; (80005f4 <fsm_for_input_processing+0x2dc>)
 80004c0:	f001 fa8f 	bl	80019e2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, red2_Pin, 0);
 80004c4:	2200      	movs	r2, #0
 80004c6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004ca:	484a      	ldr	r0, [pc, #296]	; (80005f4 <fsm_for_input_processing+0x2dc>)
 80004cc:	f001 fa89 	bl	80019e2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, yellow1_Pin, 0);
 80004d0:	2200      	movs	r2, #0
 80004d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004d6:	4847      	ldr	r0, [pc, #284]	; (80005f4 <fsm_for_input_processing+0x2dc>)
 80004d8:	f001 fa83 	bl	80019e2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, yellow2_Pin, 0);
 80004dc:	2200      	movs	r2, #0
 80004de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004e2:	4844      	ldr	r0, [pc, #272]	; (80005f4 <fsm_for_input_processing+0x2dc>)
 80004e4:	f001 fa7d 	bl	80019e2 <HAL_GPIO_WritePin>
			if (flag[1] == 1)
 80004e8:	4b3f      	ldr	r3, [pc, #252]	; (80005e8 <fsm_for_input_processing+0x2d0>)
 80004ea:	685b      	ldr	r3, [r3, #4]
 80004ec:	2b01      	cmp	r3, #1
 80004ee:	d10c      	bne.n	800050a <fsm_for_input_processing+0x1f2>
			{
				HAL_GPIO_TogglePin(GPIOB, green1_Pin);
 80004f0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004f4:	483f      	ldr	r0, [pc, #252]	; (80005f4 <fsm_for_input_processing+0x2dc>)
 80004f6:	f001 fa8c 	bl	8001a12 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(GPIOB, green2_Pin);
 80004fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004fe:	483d      	ldr	r0, [pc, #244]	; (80005f4 <fsm_for_input_processing+0x2dc>)
 8000500:	f001 fa87 	bl	8001a12 <HAL_GPIO_TogglePin>
    			setTimer_blinkly(50);
 8000504:	2032      	movs	r0, #50	; 0x32
 8000506:	f000 fda5 	bl	8001054 <setTimer_blinkly>
			}
        	reset_state();
 800050a:	f000 fe05 	bl	8001118 <reset_state>

			updateDigitBuffer(setCounter[2], 04);
 800050e:	4b38      	ldr	r3, [pc, #224]	; (80005f0 <fsm_for_input_processing+0x2d8>)
 8000510:	689b      	ldr	r3, [r3, #8]
 8000512:	2104      	movs	r1, #4
 8000514:	4618      	mov	r0, r3
 8000516:	f000 fc7b 	bl	8000e10 <updateDigitBuffer>
        	previous_mode = 4;
 800051a:	4b34      	ldr	r3, [pc, #208]	; (80005ec <fsm_for_input_processing+0x2d4>)
 800051c:	2204      	movs	r2, #4
 800051e:	601a      	str	r2, [r3, #0]
            break;
 8000520:	bf00      	nop
    }

    /***********************************Beginning handle button 1*********************************/

    if (buttonStates[0] == BUTTON_PRESSED || buttonStates[0] == BUTTON_PRESSED_MORE_THAN_1_SECOND)
 8000522:	4b2d      	ldr	r3, [pc, #180]	; (80005d8 <fsm_for_input_processing+0x2c0>)
 8000524:	781b      	ldrb	r3, [r3, #0]
 8000526:	2b01      	cmp	r3, #1
 8000528:	d003      	beq.n	8000532 <fsm_for_input_processing+0x21a>
 800052a:	4b2b      	ldr	r3, [pc, #172]	; (80005d8 <fsm_for_input_processing+0x2c0>)
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	2b02      	cmp	r3, #2
 8000530:	d12c      	bne.n	800058c <fsm_for_input_processing+0x274>
    {

    	if (buttonStates[0] == BUTTON_PRESSED_MORE_THAN_1_SECOND)
 8000532:	4b29      	ldr	r3, [pc, #164]	; (80005d8 <fsm_for_input_processing+0x2c0>)
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	2b02      	cmp	r3, #2
 8000538:	d114      	bne.n	8000564 <fsm_for_input_processing+0x24c>
    	{
    		if (flag[4] == 1)
 800053a:	4b2b      	ldr	r3, [pc, #172]	; (80005e8 <fsm_for_input_processing+0x2d0>)
 800053c:	691b      	ldr	r3, [r3, #16]
 800053e:	2b01      	cmp	r3, #1
 8000540:	d124      	bne.n	800058c <fsm_for_input_processing+0x274>
			{
				mode ++;
 8000542:	4b26      	ldr	r3, [pc, #152]	; (80005dc <fsm_for_input_processing+0x2c4>)
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	3301      	adds	r3, #1
 8000548:	b2da      	uxtb	r2, r3
 800054a:	4b24      	ldr	r3, [pc, #144]	; (80005dc <fsm_for_input_processing+0x2c4>)
 800054c:	701a      	strb	r2, [r3, #0]
				if (mode == 4) mode = 0;
 800054e:	4b23      	ldr	r3, [pc, #140]	; (80005dc <fsm_for_input_processing+0x2c4>)
 8000550:	781b      	ldrb	r3, [r3, #0]
 8000552:	2b04      	cmp	r3, #4
 8000554:	d102      	bne.n	800055c <fsm_for_input_processing+0x244>
 8000556:	4b21      	ldr	r3, [pc, #132]	; (80005dc <fsm_for_input_processing+0x2c4>)
 8000558:	2200      	movs	r2, #0
 800055a:	701a      	strb	r2, [r3, #0]
				setTimer_increasing_num(10);
 800055c:	200a      	movs	r0, #10
 800055e:	f000 fd65 	bl	800102c <setTimer_increasing_num>
 8000562:	e013      	b.n	800058c <fsm_for_input_processing+0x274>
    	}

    	else
    	{
//			HAL_GPIO_WritePin(GPIOA, Debug_Pin, 1);
    		if (flag[4] == 1)
 8000564:	4b20      	ldr	r3, [pc, #128]	; (80005e8 <fsm_for_input_processing+0x2d0>)
 8000566:	691b      	ldr	r3, [r3, #16]
 8000568:	2b01      	cmp	r3, #1
 800056a:	d10f      	bne.n	800058c <fsm_for_input_processing+0x274>
			{
				mode ++;
 800056c:	4b1b      	ldr	r3, [pc, #108]	; (80005dc <fsm_for_input_processing+0x2c4>)
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	3301      	adds	r3, #1
 8000572:	b2da      	uxtb	r2, r3
 8000574:	4b19      	ldr	r3, [pc, #100]	; (80005dc <fsm_for_input_processing+0x2c4>)
 8000576:	701a      	strb	r2, [r3, #0]
				if (mode == 4)
 8000578:	4b18      	ldr	r3, [pc, #96]	; (80005dc <fsm_for_input_processing+0x2c4>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	2b04      	cmp	r3, #4
 800057e:	d102      	bne.n	8000586 <fsm_for_input_processing+0x26e>
				{
					mode = 0;
 8000580:	4b16      	ldr	r3, [pc, #88]	; (80005dc <fsm_for_input_processing+0x2c4>)
 8000582:	2200      	movs	r2, #0
 8000584:	701a      	strb	r2, [r3, #0]
//					counterLightBuffer[0] = counter
				};
				setTimer_increasing_num(10);
 8000586:	200a      	movs	r0, #10
 8000588:	f000 fd50 	bl	800102c <setTimer_increasing_num>

    /***********************************Ending handle button 1*********************************/

    /***********************************Beginning handle button 2*********************************/

    if (buttonStates[1] == BUTTON_PRESSED || buttonStates[1] == BUTTON_PRESSED_MORE_THAN_1_SECOND)
 800058c:	4b12      	ldr	r3, [pc, #72]	; (80005d8 <fsm_for_input_processing+0x2c0>)
 800058e:	785b      	ldrb	r3, [r3, #1]
 8000590:	2b01      	cmp	r3, #1
 8000592:	d004      	beq.n	800059e <fsm_for_input_processing+0x286>
 8000594:	4b10      	ldr	r3, [pc, #64]	; (80005d8 <fsm_for_input_processing+0x2c0>)
 8000596:	785b      	ldrb	r3, [r3, #1]
 8000598:	2b02      	cmp	r3, #2
 800059a:	f040 808c 	bne.w	80006b6 <fsm_for_input_processing+0x39e>
	{
		// debug on if button1 pressed

		if (buttonStates[1] == BUTTON_PRESSED_MORE_THAN_1_SECOND)
 800059e:	4b0e      	ldr	r3, [pc, #56]	; (80005d8 <fsm_for_input_processing+0x2c0>)
 80005a0:	785b      	ldrb	r3, [r3, #1]
 80005a2:	2b02      	cmp	r3, #2
 80005a4:	d14c      	bne.n	8000640 <fsm_for_input_processing+0x328>
		{
			if (flag[4] == 1)
 80005a6:	4b10      	ldr	r3, [pc, #64]	; (80005e8 <fsm_for_input_processing+0x2d0>)
 80005a8:	691b      	ldr	r3, [r3, #16]
 80005aa:	2b01      	cmp	r3, #1
 80005ac:	f040 8083 	bne.w	80006b6 <fsm_for_input_processing+0x39e>
			{
				if (mode == 1) setCounter[0] ++;
 80005b0:	4b0a      	ldr	r3, [pc, #40]	; (80005dc <fsm_for_input_processing+0x2c4>)
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	2b01      	cmp	r3, #1
 80005b6:	d105      	bne.n	80005c4 <fsm_for_input_processing+0x2ac>
 80005b8:	4b0d      	ldr	r3, [pc, #52]	; (80005f0 <fsm_for_input_processing+0x2d8>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	3301      	adds	r3, #1
 80005be:	4a0c      	ldr	r2, [pc, #48]	; (80005f0 <fsm_for_input_processing+0x2d8>)
 80005c0:	6013      	str	r3, [r2, #0]
 80005c2:	e022      	b.n	800060a <fsm_for_input_processing+0x2f2>
				else if (mode == 2) setCounter[1] ++;
 80005c4:	4b05      	ldr	r3, [pc, #20]	; (80005dc <fsm_for_input_processing+0x2c4>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	2b02      	cmp	r3, #2
 80005ca:	d115      	bne.n	80005f8 <fsm_for_input_processing+0x2e0>
 80005cc:	4b08      	ldr	r3, [pc, #32]	; (80005f0 <fsm_for_input_processing+0x2d8>)
 80005ce:	685b      	ldr	r3, [r3, #4]
 80005d0:	3301      	adds	r3, #1
 80005d2:	4a07      	ldr	r2, [pc, #28]	; (80005f0 <fsm_for_input_processing+0x2d8>)
 80005d4:	6053      	str	r3, [r2, #4]
 80005d6:	e018      	b.n	800060a <fsm_for_input_processing+0x2f2>
 80005d8:	20000068 	.word	0x20000068
 80005dc:	2000006b 	.word	0x2000006b
 80005e0:	20000010 	.word	0x20000010
 80005e4:	40010800 	.word	0x40010800
 80005e8:	20000070 	.word	0x20000070
 80005ec:	20000008 	.word	0x20000008
 80005f0:	20000044 	.word	0x20000044
 80005f4:	40010c00 	.word	0x40010c00
				else if (mode == 3) setCounter[2] ++;
 80005f8:	4b46      	ldr	r3, [pc, #280]	; (8000714 <fsm_for_input_processing+0x3fc>)
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	2b03      	cmp	r3, #3
 80005fe:	d104      	bne.n	800060a <fsm_for_input_processing+0x2f2>
 8000600:	4b45      	ldr	r3, [pc, #276]	; (8000718 <fsm_for_input_processing+0x400>)
 8000602:	689b      	ldr	r3, [r3, #8]
 8000604:	3301      	adds	r3, #1
 8000606:	4a44      	ldr	r2, [pc, #272]	; (8000718 <fsm_for_input_processing+0x400>)
 8000608:	6093      	str	r3, [r2, #8]

				//////////////////////////////////////////
				if (setCounter[0] == 100) setCounter[0] = 0;
 800060a:	4b43      	ldr	r3, [pc, #268]	; (8000718 <fsm_for_input_processing+0x400>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	2b64      	cmp	r3, #100	; 0x64
 8000610:	d103      	bne.n	800061a <fsm_for_input_processing+0x302>
 8000612:	4b41      	ldr	r3, [pc, #260]	; (8000718 <fsm_for_input_processing+0x400>)
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
 8000618:	e00e      	b.n	8000638 <fsm_for_input_processing+0x320>
				else if (setCounter[1] == 100) setCounter[1] = 0;
 800061a:	4b3f      	ldr	r3, [pc, #252]	; (8000718 <fsm_for_input_processing+0x400>)
 800061c:	685b      	ldr	r3, [r3, #4]
 800061e:	2b64      	cmp	r3, #100	; 0x64
 8000620:	d103      	bne.n	800062a <fsm_for_input_processing+0x312>
 8000622:	4b3d      	ldr	r3, [pc, #244]	; (8000718 <fsm_for_input_processing+0x400>)
 8000624:	2200      	movs	r2, #0
 8000626:	605a      	str	r2, [r3, #4]
 8000628:	e006      	b.n	8000638 <fsm_for_input_processing+0x320>
				else if (setCounter[2] == 100) setCounter[2] = 0;
 800062a:	4b3b      	ldr	r3, [pc, #236]	; (8000718 <fsm_for_input_processing+0x400>)
 800062c:	689b      	ldr	r3, [r3, #8]
 800062e:	2b64      	cmp	r3, #100	; 0x64
 8000630:	d102      	bne.n	8000638 <fsm_for_input_processing+0x320>
 8000632:	4b39      	ldr	r3, [pc, #228]	; (8000718 <fsm_for_input_processing+0x400>)
 8000634:	2200      	movs	r2, #0
 8000636:	609a      	str	r2, [r3, #8]

				setTimer_increasing_num(10);
 8000638:	200a      	movs	r0, #10
 800063a:	f000 fcf7 	bl	800102c <setTimer_increasing_num>
 800063e:	e03a      	b.n	80006b6 <fsm_for_input_processing+0x39e>
			}
		}

		else
		{
			if (flag[4] == 1)
 8000640:	4b36      	ldr	r3, [pc, #216]	; (800071c <fsm_for_input_processing+0x404>)
 8000642:	691b      	ldr	r3, [r3, #16]
 8000644:	2b01      	cmp	r3, #1
 8000646:	d136      	bne.n	80006b6 <fsm_for_input_processing+0x39e>
			{
				if (mode == 1) setCounter[0] ++;
 8000648:	4b32      	ldr	r3, [pc, #200]	; (8000714 <fsm_for_input_processing+0x3fc>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	2b01      	cmp	r3, #1
 800064e:	d105      	bne.n	800065c <fsm_for_input_processing+0x344>
 8000650:	4b31      	ldr	r3, [pc, #196]	; (8000718 <fsm_for_input_processing+0x400>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	3301      	adds	r3, #1
 8000656:	4a30      	ldr	r2, [pc, #192]	; (8000718 <fsm_for_input_processing+0x400>)
 8000658:	6013      	str	r3, [r2, #0]
 800065a:	e012      	b.n	8000682 <fsm_for_input_processing+0x36a>
				else if (mode == 2) setCounter[1] ++;
 800065c:	4b2d      	ldr	r3, [pc, #180]	; (8000714 <fsm_for_input_processing+0x3fc>)
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	2b02      	cmp	r3, #2
 8000662:	d105      	bne.n	8000670 <fsm_for_input_processing+0x358>
 8000664:	4b2c      	ldr	r3, [pc, #176]	; (8000718 <fsm_for_input_processing+0x400>)
 8000666:	685b      	ldr	r3, [r3, #4]
 8000668:	3301      	adds	r3, #1
 800066a:	4a2b      	ldr	r2, [pc, #172]	; (8000718 <fsm_for_input_processing+0x400>)
 800066c:	6053      	str	r3, [r2, #4]
 800066e:	e008      	b.n	8000682 <fsm_for_input_processing+0x36a>
				else if (mode == 3) setCounter[2] ++;
 8000670:	4b28      	ldr	r3, [pc, #160]	; (8000714 <fsm_for_input_processing+0x3fc>)
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	2b03      	cmp	r3, #3
 8000676:	d104      	bne.n	8000682 <fsm_for_input_processing+0x36a>
 8000678:	4b27      	ldr	r3, [pc, #156]	; (8000718 <fsm_for_input_processing+0x400>)
 800067a:	689b      	ldr	r3, [r3, #8]
 800067c:	3301      	adds	r3, #1
 800067e:	4a26      	ldr	r2, [pc, #152]	; (8000718 <fsm_for_input_processing+0x400>)
 8000680:	6093      	str	r3, [r2, #8]

				//////////////////////////////////////////
				if (setCounter[0] == 100) setCounter[0] = 0;
 8000682:	4b25      	ldr	r3, [pc, #148]	; (8000718 <fsm_for_input_processing+0x400>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	2b64      	cmp	r3, #100	; 0x64
 8000688:	d103      	bne.n	8000692 <fsm_for_input_processing+0x37a>
 800068a:	4b23      	ldr	r3, [pc, #140]	; (8000718 <fsm_for_input_processing+0x400>)
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	e00e      	b.n	80006b0 <fsm_for_input_processing+0x398>
				else if (setCounter[1] == 100) setCounter[1] = 0;
 8000692:	4b21      	ldr	r3, [pc, #132]	; (8000718 <fsm_for_input_processing+0x400>)
 8000694:	685b      	ldr	r3, [r3, #4]
 8000696:	2b64      	cmp	r3, #100	; 0x64
 8000698:	d103      	bne.n	80006a2 <fsm_for_input_processing+0x38a>
 800069a:	4b1f      	ldr	r3, [pc, #124]	; (8000718 <fsm_for_input_processing+0x400>)
 800069c:	2200      	movs	r2, #0
 800069e:	605a      	str	r2, [r3, #4]
 80006a0:	e006      	b.n	80006b0 <fsm_for_input_processing+0x398>
				else if (setCounter[2] == 100) setCounter[2] = 0;
 80006a2:	4b1d      	ldr	r3, [pc, #116]	; (8000718 <fsm_for_input_processing+0x400>)
 80006a4:	689b      	ldr	r3, [r3, #8]
 80006a6:	2b64      	cmp	r3, #100	; 0x64
 80006a8:	d102      	bne.n	80006b0 <fsm_for_input_processing+0x398>
 80006aa:	4b1b      	ldr	r3, [pc, #108]	; (8000718 <fsm_for_input_processing+0x400>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	609a      	str	r2, [r3, #8]

				setTimer_increasing_num(10);
 80006b0:	200a      	movs	r0, #10
 80006b2:	f000 fcbb 	bl	800102c <setTimer_increasing_num>

    /***********************************Ending handle button 2*********************************/

    /***********************************Beginning handle button 3*********************************/

	if (buttonStates[2] == BUTTON_PRESSED || buttonStates[2] == BUTTON_PRESSED_MORE_THAN_1_SECOND)
 80006b6:	4b1a      	ldr	r3, [pc, #104]	; (8000720 <fsm_for_input_processing+0x408>)
 80006b8:	789b      	ldrb	r3, [r3, #2]
 80006ba:	2b01      	cmp	r3, #1
 80006bc:	d003      	beq.n	80006c6 <fsm_for_input_processing+0x3ae>
 80006be:	4b18      	ldr	r3, [pc, #96]	; (8000720 <fsm_for_input_processing+0x408>)
 80006c0:	789b      	ldrb	r3, [r3, #2]
 80006c2:	2b02      	cmp	r3, #2
 80006c4:	d120      	bne.n	8000708 <fsm_for_input_processing+0x3f0>
	{
		if (flag[4] == 1)
 80006c6:	4b15      	ldr	r3, [pc, #84]	; (800071c <fsm_for_input_processing+0x404>)
 80006c8:	691b      	ldr	r3, [r3, #16]
 80006ca:	2b01      	cmp	r3, #1
 80006cc:	d11c      	bne.n	8000708 <fsm_for_input_processing+0x3f0>
		{
			if (mode == 1) counterLightBuffer[0] = setCounter[0];
 80006ce:	4b11      	ldr	r3, [pc, #68]	; (8000714 <fsm_for_input_processing+0x3fc>)
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	2b01      	cmp	r3, #1
 80006d4:	d104      	bne.n	80006e0 <fsm_for_input_processing+0x3c8>
 80006d6:	4b10      	ldr	r3, [pc, #64]	; (8000718 <fsm_for_input_processing+0x400>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	4a12      	ldr	r2, [pc, #72]	; (8000724 <fsm_for_input_processing+0x40c>)
 80006dc:	6013      	str	r3, [r2, #0]
 80006de:	e010      	b.n	8000702 <fsm_for_input_processing+0x3ea>
			else if (mode == 2) counterLightBuffer[1] = setCounter[1];
 80006e0:	4b0c      	ldr	r3, [pc, #48]	; (8000714 <fsm_for_input_processing+0x3fc>)
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	2b02      	cmp	r3, #2
 80006e6:	d104      	bne.n	80006f2 <fsm_for_input_processing+0x3da>
 80006e8:	4b0b      	ldr	r3, [pc, #44]	; (8000718 <fsm_for_input_processing+0x400>)
 80006ea:	685b      	ldr	r3, [r3, #4]
 80006ec:	4a0d      	ldr	r2, [pc, #52]	; (8000724 <fsm_for_input_processing+0x40c>)
 80006ee:	6053      	str	r3, [r2, #4]
 80006f0:	e007      	b.n	8000702 <fsm_for_input_processing+0x3ea>
			else if (mode == 3) counterLightBuffer[2] = setCounter[2];
 80006f2:	4b08      	ldr	r3, [pc, #32]	; (8000714 <fsm_for_input_processing+0x3fc>)
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	2b03      	cmp	r3, #3
 80006f8:	d103      	bne.n	8000702 <fsm_for_input_processing+0x3ea>
 80006fa:	4b07      	ldr	r3, [pc, #28]	; (8000718 <fsm_for_input_processing+0x400>)
 80006fc:	689b      	ldr	r3, [r3, #8]
 80006fe:	4a09      	ldr	r2, [pc, #36]	; (8000724 <fsm_for_input_processing+0x40c>)
 8000700:	6093      	str	r3, [r2, #8]

			setTimer_increasing_num(5);
 8000702:	2005      	movs	r0, #5
 8000704:	f000 fc92 	bl	800102c <setTimer_increasing_num>
//		HAL_GPIO_WritePin(GPIOA, Debug_Pin, 0);
	}

	/***********************************Ending handle button 3*********************************/

    fsm_change_digit();
 8000708:	f000 fbc6 	bl	8000e98 <fsm_change_digit>
}
 800070c:	bf00      	nop
 800070e:	3708      	adds	r7, #8
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	2000006b 	.word	0x2000006b
 8000718:	20000044 	.word	0x20000044
 800071c:	20000070 	.word	0x20000070
 8000720:	20000068 	.word	0x20000068
 8000724:	20000010 	.word	0x20000010

08000728 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800072c:	f000 fe58 	bl	80013e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000730:	f000 f81a 	bl	8000768 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000734:	f000 f8a0 	bl	8000878 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000738:	f000 f852 	bl	80007e0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2);
 800073c:	4809      	ldr	r0, [pc, #36]	; (8000764 <main+0x3c>)
 800073e:	f001 fdad 	bl	800229c <HAL_TIM_Base_Start_IT>
  reset_state();
 8000742:	f000 fce9 	bl	8001118 <reset_state>
  setTimer1(100);
 8000746:	2064      	movs	r0, #100	; 0x64
 8000748:	f000 fc5c 	bl	8001004 <setTimer1>
  setTimer_blinkly(50);
 800074c:	2032      	movs	r0, #50	; 0x32
 800074e:	f000 fc81 	bl	8001054 <setTimer_blinkly>
  setTimer_increasing_num(10);
 8000752:	200a      	movs	r0, #10
 8000754:	f000 fc6a 	bl	800102c <setTimer_increasing_num>
  setTimer_change_digit(5);
 8000758:	2005      	movs	r0, #5
 800075a:	f000 fc8f 	bl	800107c <setTimer_change_digit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  fsm_for_input_processing();
 800075e:	f7ff fddb 	bl	8000318 <fsm_for_input_processing>
  {
 8000762:	e7fc      	b.n	800075e <main+0x36>
 8000764:	200000b0 	.word	0x200000b0

08000768 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b090      	sub	sp, #64	; 0x40
 800076c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800076e:	f107 0318 	add.w	r3, r7, #24
 8000772:	2228      	movs	r2, #40	; 0x28
 8000774:	2100      	movs	r1, #0
 8000776:	4618      	mov	r0, r3
 8000778:	f002 f940 	bl	80029fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800077c:	1d3b      	adds	r3, r7, #4
 800077e:	2200      	movs	r2, #0
 8000780:	601a      	str	r2, [r3, #0]
 8000782:	605a      	str	r2, [r3, #4]
 8000784:	609a      	str	r2, [r3, #8]
 8000786:	60da      	str	r2, [r3, #12]
 8000788:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800078a:	2302      	movs	r3, #2
 800078c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800078e:	2301      	movs	r3, #1
 8000790:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000792:	2310      	movs	r3, #16
 8000794:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000796:	2300      	movs	r3, #0
 8000798:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800079a:	f107 0318 	add.w	r3, r7, #24
 800079e:	4618      	mov	r0, r3
 80007a0:	f001 f950 	bl	8001a44 <HAL_RCC_OscConfig>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <SystemClock_Config+0x46>
  {
    Error_Handler();
 80007aa:	f000 f8d3 	bl	8000954 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ae:	230f      	movs	r3, #15
 80007b0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007b2:	2300      	movs	r3, #0
 80007b4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007b6:	2300      	movs	r3, #0
 80007b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007ba:	2300      	movs	r3, #0
 80007bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007be:	2300      	movs	r3, #0
 80007c0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007c2:	1d3b      	adds	r3, r7, #4
 80007c4:	2100      	movs	r1, #0
 80007c6:	4618      	mov	r0, r3
 80007c8:	f001 fbbc 	bl	8001f44 <HAL_RCC_ClockConfig>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80007d2:	f000 f8bf 	bl	8000954 <Error_Handler>
  }
}
 80007d6:	bf00      	nop
 80007d8:	3740      	adds	r7, #64	; 0x40
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
	...

080007e0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b086      	sub	sp, #24
 80007e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007e6:	f107 0308 	add.w	r3, r7, #8
 80007ea:	2200      	movs	r2, #0
 80007ec:	601a      	str	r2, [r3, #0]
 80007ee:	605a      	str	r2, [r3, #4]
 80007f0:	609a      	str	r2, [r3, #8]
 80007f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007f4:	463b      	mov	r3, r7
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007fc:	4b1d      	ldr	r3, [pc, #116]	; (8000874 <MX_TIM2_Init+0x94>)
 80007fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000802:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000804:	4b1b      	ldr	r3, [pc, #108]	; (8000874 <MX_TIM2_Init+0x94>)
 8000806:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800080a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800080c:	4b19      	ldr	r3, [pc, #100]	; (8000874 <MX_TIM2_Init+0x94>)
 800080e:	2200      	movs	r2, #0
 8000810:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000812:	4b18      	ldr	r3, [pc, #96]	; (8000874 <MX_TIM2_Init+0x94>)
 8000814:	2209      	movs	r2, #9
 8000816:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000818:	4b16      	ldr	r3, [pc, #88]	; (8000874 <MX_TIM2_Init+0x94>)
 800081a:	2200      	movs	r2, #0
 800081c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800081e:	4b15      	ldr	r3, [pc, #84]	; (8000874 <MX_TIM2_Init+0x94>)
 8000820:	2200      	movs	r2, #0
 8000822:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000824:	4813      	ldr	r0, [pc, #76]	; (8000874 <MX_TIM2_Init+0x94>)
 8000826:	f001 fce9 	bl	80021fc <HAL_TIM_Base_Init>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000830:	f000 f890 	bl	8000954 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000834:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000838:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800083a:	f107 0308 	add.w	r3, r7, #8
 800083e:	4619      	mov	r1, r3
 8000840:	480c      	ldr	r0, [pc, #48]	; (8000874 <MX_TIM2_Init+0x94>)
 8000842:	f001 fe67 	bl	8002514 <HAL_TIM_ConfigClockSource>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800084c:	f000 f882 	bl	8000954 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000850:	2300      	movs	r3, #0
 8000852:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000854:	2300      	movs	r3, #0
 8000856:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000858:	463b      	mov	r3, r7
 800085a:	4619      	mov	r1, r3
 800085c:	4805      	ldr	r0, [pc, #20]	; (8000874 <MX_TIM2_Init+0x94>)
 800085e:	f002 f83f 	bl	80028e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000868:	f000 f874 	bl	8000954 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800086c:	bf00      	nop
 800086e:	3718      	adds	r7, #24
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	200000b0 	.word	0x200000b0

08000878 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b086      	sub	sp, #24
 800087c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087e:	f107 0308 	add.w	r3, r7, #8
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]
 8000886:	605a      	str	r2, [r3, #4]
 8000888:	609a      	str	r2, [r3, #8]
 800088a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800088c:	4b28      	ldr	r3, [pc, #160]	; (8000930 <MX_GPIO_Init+0xb8>)
 800088e:	699b      	ldr	r3, [r3, #24]
 8000890:	4a27      	ldr	r2, [pc, #156]	; (8000930 <MX_GPIO_Init+0xb8>)
 8000892:	f043 0304 	orr.w	r3, r3, #4
 8000896:	6193      	str	r3, [r2, #24]
 8000898:	4b25      	ldr	r3, [pc, #148]	; (8000930 <MX_GPIO_Init+0xb8>)
 800089a:	699b      	ldr	r3, [r3, #24]
 800089c:	f003 0304 	and.w	r3, r3, #4
 80008a0:	607b      	str	r3, [r7, #4]
 80008a2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008a4:	4b22      	ldr	r3, [pc, #136]	; (8000930 <MX_GPIO_Init+0xb8>)
 80008a6:	699b      	ldr	r3, [r3, #24]
 80008a8:	4a21      	ldr	r2, [pc, #132]	; (8000930 <MX_GPIO_Init+0xb8>)
 80008aa:	f043 0308 	orr.w	r3, r3, #8
 80008ae:	6193      	str	r3, [r2, #24]
 80008b0:	4b1f      	ldr	r3, [pc, #124]	; (8000930 <MX_GPIO_Init+0xb8>)
 80008b2:	699b      	ldr	r3, [r3, #24]
 80008b4:	f003 0308 	and.w	r3, r3, #8
 80008b8:	603b      	str	r3, [r7, #0]
 80008ba:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Debug_Pin|dig1_Pin|dig2_Pin|dig3_Pin
 80008bc:	2200      	movs	r2, #0
 80008be:	f24f 0102 	movw	r1, #61442	; 0xf002
 80008c2:	481c      	ldr	r0, [pc, #112]	; (8000934 <MX_GPIO_Init+0xbc>)
 80008c4:	f001 f88d 	bl	80019e2 <HAL_GPIO_WritePin>
                          |dig4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, a_Pin|b_Pin|c_Pin|red1_Pin
 80008c8:	2200      	movs	r2, #0
 80008ca:	f64f 417f 	movw	r1, #64639	; 0xfc7f
 80008ce:	481a      	ldr	r0, [pc, #104]	; (8000938 <MX_GPIO_Init+0xc0>)
 80008d0:	f001 f887 	bl	80019e2 <HAL_GPIO_WritePin>
                          |green2_Pin|d_Pin|e_Pin|f_Pin
                          |g_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : Debug_Pin dig1_Pin dig2_Pin dig3_Pin
                           dig4_Pin */
  GPIO_InitStruct.Pin = Debug_Pin|dig1_Pin|dig2_Pin|dig3_Pin
 80008d4:	f24f 0302 	movw	r3, #61442	; 0xf002
 80008d8:	60bb      	str	r3, [r7, #8]
                          |dig4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008da:	2301      	movs	r3, #1
 80008dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e2:	2302      	movs	r3, #2
 80008e4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e6:	f107 0308 	add.w	r3, r7, #8
 80008ea:	4619      	mov	r1, r3
 80008ec:	4811      	ldr	r0, [pc, #68]	; (8000934 <MX_GPIO_Init+0xbc>)
 80008ee:	f000 fee7 	bl	80016c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : button1_Pin button2_Pin button3_Pin */
  GPIO_InitStruct.Pin = button1_Pin|button2_Pin|button3_Pin;
 80008f2:	231c      	movs	r3, #28
 80008f4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008f6:	2300      	movs	r3, #0
 80008f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008fa:	2301      	movs	r3, #1
 80008fc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fe:	f107 0308 	add.w	r3, r7, #8
 8000902:	4619      	mov	r1, r3
 8000904:	480b      	ldr	r0, [pc, #44]	; (8000934 <MX_GPIO_Init+0xbc>)
 8000906:	f000 fedb 	bl	80016c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : a_Pin b_Pin c_Pin red1_Pin
                           red2_Pin yellow1_Pin yellow2_Pin green1_Pin
                           green2_Pin d_Pin e_Pin f_Pin
                           g_Pin */
  GPIO_InitStruct.Pin = a_Pin|b_Pin|c_Pin|red1_Pin
 800090a:	f64f 437f 	movw	r3, #64639	; 0xfc7f
 800090e:	60bb      	str	r3, [r7, #8]
                          |red2_Pin|yellow1_Pin|yellow2_Pin|green1_Pin
                          |green2_Pin|d_Pin|e_Pin|f_Pin
                          |g_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000910:	2301      	movs	r3, #1
 8000912:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000914:	2300      	movs	r3, #0
 8000916:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000918:	2302      	movs	r3, #2
 800091a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800091c:	f107 0308 	add.w	r3, r7, #8
 8000920:	4619      	mov	r1, r3
 8000922:	4805      	ldr	r0, [pc, #20]	; (8000938 <MX_GPIO_Init+0xc0>)
 8000924:	f000 fecc 	bl	80016c0 <HAL_GPIO_Init>

}
 8000928:	bf00      	nop
 800092a:	3718      	adds	r7, #24
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	40021000 	.word	0x40021000
 8000934:	40010800 	.word	0x40010800
 8000938:	40010c00 	.word	0x40010c00

0800093c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
	button_reading();
 8000944:	f7ff fc02 	bl	800014c <button_reading>
	timerRun();
 8000948:	f000 fbac 	bl	80010a4 <timerRun>
}
 800094c:	bf00      	nop
 800094e:	3708      	adds	r7, #8
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}

08000954 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000958:	b672      	cpsid	i
}
 800095a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800095c:	e7fe      	b.n	800095c <Error_Handler+0x8>
	...

08000960 <display_num>:
#include "seven_segment.h"

int index_digit = 0;

void display_num(int number)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
    // Reset all segments before displaying the new number
    HAL_GPIO_WritePin(GPIOB, a_Pin, 1);  // Inverted: previously 0, now 1
 8000968:	2201      	movs	r2, #1
 800096a:	2101      	movs	r1, #1
 800096c:	48bf      	ldr	r0, [pc, #764]	; (8000c6c <display_num+0x30c>)
 800096e:	f001 f838 	bl	80019e2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, b_Pin, 1);  // Inverted
 8000972:	2201      	movs	r2, #1
 8000974:	2102      	movs	r1, #2
 8000976:	48bd      	ldr	r0, [pc, #756]	; (8000c6c <display_num+0x30c>)
 8000978:	f001 f833 	bl	80019e2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, c_Pin, 1);  // Inverted
 800097c:	2201      	movs	r2, #1
 800097e:	2104      	movs	r1, #4
 8000980:	48ba      	ldr	r0, [pc, #744]	; (8000c6c <display_num+0x30c>)
 8000982:	f001 f82e 	bl	80019e2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, d_Pin, 1);  // Inverted
 8000986:	2201      	movs	r2, #1
 8000988:	2108      	movs	r1, #8
 800098a:	48b8      	ldr	r0, [pc, #736]	; (8000c6c <display_num+0x30c>)
 800098c:	f001 f829 	bl	80019e2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, e_Pin, 1);  // Inverted
 8000990:	2201      	movs	r2, #1
 8000992:	2110      	movs	r1, #16
 8000994:	48b5      	ldr	r0, [pc, #724]	; (8000c6c <display_num+0x30c>)
 8000996:	f001 f824 	bl	80019e2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, f_Pin, 1);  // Inverted
 800099a:	2201      	movs	r2, #1
 800099c:	2120      	movs	r1, #32
 800099e:	48b3      	ldr	r0, [pc, #716]	; (8000c6c <display_num+0x30c>)
 80009a0:	f001 f81f 	bl	80019e2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, g_Pin, 1);  // Inverted
 80009a4:	2201      	movs	r2, #1
 80009a6:	2140      	movs	r1, #64	; 0x40
 80009a8:	48b0      	ldr	r0, [pc, #704]	; (8000c6c <display_num+0x30c>)
 80009aa:	f001 f81a 	bl	80019e2 <HAL_GPIO_WritePin>
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	2b09      	cmp	r3, #9
 80009b2:	f200 8181 	bhi.w	8000cb8 <display_num+0x358>
 80009b6:	a201      	add	r2, pc, #4	; (adr r2, 80009bc <display_num+0x5c>)
 80009b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009bc:	080009e5 	.word	0x080009e5
 80009c0:	08000a2d 	.word	0x08000a2d
 80009c4:	08000a75 	.word	0x08000a75
 80009c8:	08000abd 	.word	0x08000abd
 80009cc:	08000b05 	.word	0x08000b05
 80009d0:	08000b4d 	.word	0x08000b4d
 80009d4:	08000b95 	.word	0x08000b95
 80009d8:	08000bdd 	.word	0x08000bdd
 80009dc:	08000c25 	.word	0x08000c25
 80009e0:	08000c71 	.word	0x08000c71

    switch(number)
    {
        case 0:
            HAL_GPIO_WritePin(GPIOB, a_Pin, 0);  // Inverted: previously 1, now 0
 80009e4:	2200      	movs	r2, #0
 80009e6:	2101      	movs	r1, #1
 80009e8:	48a0      	ldr	r0, [pc, #640]	; (8000c6c <display_num+0x30c>)
 80009ea:	f000 fffa 	bl	80019e2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, b_Pin, 0);
 80009ee:	2200      	movs	r2, #0
 80009f0:	2102      	movs	r1, #2
 80009f2:	489e      	ldr	r0, [pc, #632]	; (8000c6c <display_num+0x30c>)
 80009f4:	f000 fff5 	bl	80019e2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, c_Pin, 0);
 80009f8:	2200      	movs	r2, #0
 80009fa:	2104      	movs	r1, #4
 80009fc:	489b      	ldr	r0, [pc, #620]	; (8000c6c <display_num+0x30c>)
 80009fe:	f000 fff0 	bl	80019e2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, d_Pin, 0);
 8000a02:	2200      	movs	r2, #0
 8000a04:	2108      	movs	r1, #8
 8000a06:	4899      	ldr	r0, [pc, #612]	; (8000c6c <display_num+0x30c>)
 8000a08:	f000 ffeb 	bl	80019e2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, e_Pin, 0);
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	2110      	movs	r1, #16
 8000a10:	4896      	ldr	r0, [pc, #600]	; (8000c6c <display_num+0x30c>)
 8000a12:	f000 ffe6 	bl	80019e2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, f_Pin, 0);
 8000a16:	2200      	movs	r2, #0
 8000a18:	2120      	movs	r1, #32
 8000a1a:	4894      	ldr	r0, [pc, #592]	; (8000c6c <display_num+0x30c>)
 8000a1c:	f000 ffe1 	bl	80019e2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, g_Pin, 1);  // Inverted
 8000a20:	2201      	movs	r2, #1
 8000a22:	2140      	movs	r1, #64	; 0x40
 8000a24:	4891      	ldr	r0, [pc, #580]	; (8000c6c <display_num+0x30c>)
 8000a26:	f000 ffdc 	bl	80019e2 <HAL_GPIO_WritePin>
            break;
 8000a2a:	e146      	b.n	8000cba <display_num+0x35a>
        case 1:
            HAL_GPIO_WritePin(GPIOB, a_Pin, 1);  // Inverted: previously 0, now 1
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	2101      	movs	r1, #1
 8000a30:	488e      	ldr	r0, [pc, #568]	; (8000c6c <display_num+0x30c>)
 8000a32:	f000 ffd6 	bl	80019e2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, b_Pin, 0);
 8000a36:	2200      	movs	r2, #0
 8000a38:	2102      	movs	r1, #2
 8000a3a:	488c      	ldr	r0, [pc, #560]	; (8000c6c <display_num+0x30c>)
 8000a3c:	f000 ffd1 	bl	80019e2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, c_Pin, 0);
 8000a40:	2200      	movs	r2, #0
 8000a42:	2104      	movs	r1, #4
 8000a44:	4889      	ldr	r0, [pc, #548]	; (8000c6c <display_num+0x30c>)
 8000a46:	f000 ffcc 	bl	80019e2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, d_Pin, 1);  // Inverted
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	2108      	movs	r1, #8
 8000a4e:	4887      	ldr	r0, [pc, #540]	; (8000c6c <display_num+0x30c>)
 8000a50:	f000 ffc7 	bl	80019e2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, e_Pin, 1);  // Inverted
 8000a54:	2201      	movs	r2, #1
 8000a56:	2110      	movs	r1, #16
 8000a58:	4884      	ldr	r0, [pc, #528]	; (8000c6c <display_num+0x30c>)
 8000a5a:	f000 ffc2 	bl	80019e2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, f_Pin, 1);  // Inverted
 8000a5e:	2201      	movs	r2, #1
 8000a60:	2120      	movs	r1, #32
 8000a62:	4882      	ldr	r0, [pc, #520]	; (8000c6c <display_num+0x30c>)
 8000a64:	f000 ffbd 	bl	80019e2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, g_Pin, 1);  // Inverted
 8000a68:	2201      	movs	r2, #1
 8000a6a:	2140      	movs	r1, #64	; 0x40
 8000a6c:	487f      	ldr	r0, [pc, #508]	; (8000c6c <display_num+0x30c>)
 8000a6e:	f000 ffb8 	bl	80019e2 <HAL_GPIO_WritePin>
            break;
 8000a72:	e122      	b.n	8000cba <display_num+0x35a>
        case 2:
            HAL_GPIO_WritePin(GPIOB, a_Pin, 0);
 8000a74:	2200      	movs	r2, #0
 8000a76:	2101      	movs	r1, #1
 8000a78:	487c      	ldr	r0, [pc, #496]	; (8000c6c <display_num+0x30c>)
 8000a7a:	f000 ffb2 	bl	80019e2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, b_Pin, 0);
 8000a7e:	2200      	movs	r2, #0
 8000a80:	2102      	movs	r1, #2
 8000a82:	487a      	ldr	r0, [pc, #488]	; (8000c6c <display_num+0x30c>)
 8000a84:	f000 ffad 	bl	80019e2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, c_Pin, 1);  // Inverted
 8000a88:	2201      	movs	r2, #1
 8000a8a:	2104      	movs	r1, #4
 8000a8c:	4877      	ldr	r0, [pc, #476]	; (8000c6c <display_num+0x30c>)
 8000a8e:	f000 ffa8 	bl	80019e2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, g_Pin, 0);
 8000a92:	2200      	movs	r2, #0
 8000a94:	2140      	movs	r1, #64	; 0x40
 8000a96:	4875      	ldr	r0, [pc, #468]	; (8000c6c <display_num+0x30c>)
 8000a98:	f000 ffa3 	bl	80019e2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, e_Pin, 0);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	2110      	movs	r1, #16
 8000aa0:	4872      	ldr	r0, [pc, #456]	; (8000c6c <display_num+0x30c>)
 8000aa2:	f000 ff9e 	bl	80019e2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, d_Pin, 0);
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	2108      	movs	r1, #8
 8000aaa:	4870      	ldr	r0, [pc, #448]	; (8000c6c <display_num+0x30c>)
 8000aac:	f000 ff99 	bl	80019e2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, f_Pin, 1);  // Inverted
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	2120      	movs	r1, #32
 8000ab4:	486d      	ldr	r0, [pc, #436]	; (8000c6c <display_num+0x30c>)
 8000ab6:	f000 ff94 	bl	80019e2 <HAL_GPIO_WritePin>
            break;
 8000aba:	e0fe      	b.n	8000cba <display_num+0x35a>
        case 3:
            HAL_GPIO_WritePin(GPIOB, a_Pin, 0);
 8000abc:	2200      	movs	r2, #0
 8000abe:	2101      	movs	r1, #1
 8000ac0:	486a      	ldr	r0, [pc, #424]	; (8000c6c <display_num+0x30c>)
 8000ac2:	f000 ff8e 	bl	80019e2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, b_Pin, 0);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	2102      	movs	r1, #2
 8000aca:	4868      	ldr	r0, [pc, #416]	; (8000c6c <display_num+0x30c>)
 8000acc:	f000 ff89 	bl	80019e2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, g_Pin, 0);
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	2140      	movs	r1, #64	; 0x40
 8000ad4:	4865      	ldr	r0, [pc, #404]	; (8000c6c <display_num+0x30c>)
 8000ad6:	f000 ff84 	bl	80019e2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, c_Pin, 0);
 8000ada:	2200      	movs	r2, #0
 8000adc:	2104      	movs	r1, #4
 8000ade:	4863      	ldr	r0, [pc, #396]	; (8000c6c <display_num+0x30c>)
 8000ae0:	f000 ff7f 	bl	80019e2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, d_Pin, 0);
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	2108      	movs	r1, #8
 8000ae8:	4860      	ldr	r0, [pc, #384]	; (8000c6c <display_num+0x30c>)
 8000aea:	f000 ff7a 	bl	80019e2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, e_Pin, 1);  // Inverted
 8000aee:	2201      	movs	r2, #1
 8000af0:	2110      	movs	r1, #16
 8000af2:	485e      	ldr	r0, [pc, #376]	; (8000c6c <display_num+0x30c>)
 8000af4:	f000 ff75 	bl	80019e2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, f_Pin, 1);  // Inverted
 8000af8:	2201      	movs	r2, #1
 8000afa:	2120      	movs	r1, #32
 8000afc:	485b      	ldr	r0, [pc, #364]	; (8000c6c <display_num+0x30c>)
 8000afe:	f000 ff70 	bl	80019e2 <HAL_GPIO_WritePin>
            break;
 8000b02:	e0da      	b.n	8000cba <display_num+0x35a>
        case 4:
            HAL_GPIO_WritePin(GPIOB, f_Pin, 0);
 8000b04:	2200      	movs	r2, #0
 8000b06:	2120      	movs	r1, #32
 8000b08:	4858      	ldr	r0, [pc, #352]	; (8000c6c <display_num+0x30c>)
 8000b0a:	f000 ff6a 	bl	80019e2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, b_Pin, 0);
 8000b0e:	2200      	movs	r2, #0
 8000b10:	2102      	movs	r1, #2
 8000b12:	4856      	ldr	r0, [pc, #344]	; (8000c6c <display_num+0x30c>)
 8000b14:	f000 ff65 	bl	80019e2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, g_Pin, 0);
 8000b18:	2200      	movs	r2, #0
 8000b1a:	2140      	movs	r1, #64	; 0x40
 8000b1c:	4853      	ldr	r0, [pc, #332]	; (8000c6c <display_num+0x30c>)
 8000b1e:	f000 ff60 	bl	80019e2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, c_Pin, 0);
 8000b22:	2200      	movs	r2, #0
 8000b24:	2104      	movs	r1, #4
 8000b26:	4851      	ldr	r0, [pc, #324]	; (8000c6c <display_num+0x30c>)
 8000b28:	f000 ff5b 	bl	80019e2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, a_Pin, 1);  // Inverted: previously 0, now 1
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	2101      	movs	r1, #1
 8000b30:	484e      	ldr	r0, [pc, #312]	; (8000c6c <display_num+0x30c>)
 8000b32:	f000 ff56 	bl	80019e2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, d_Pin, 1);  // Inverted
 8000b36:	2201      	movs	r2, #1
 8000b38:	2108      	movs	r1, #8
 8000b3a:	484c      	ldr	r0, [pc, #304]	; (8000c6c <display_num+0x30c>)
 8000b3c:	f000 ff51 	bl	80019e2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, e_Pin, 1);  // Inverted
 8000b40:	2201      	movs	r2, #1
 8000b42:	2110      	movs	r1, #16
 8000b44:	4849      	ldr	r0, [pc, #292]	; (8000c6c <display_num+0x30c>)
 8000b46:	f000 ff4c 	bl	80019e2 <HAL_GPIO_WritePin>
            break;
 8000b4a:	e0b6      	b.n	8000cba <display_num+0x35a>
        case 5:
            HAL_GPIO_WritePin(GPIOB, a_Pin, 0);
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	2101      	movs	r1, #1
 8000b50:	4846      	ldr	r0, [pc, #280]	; (8000c6c <display_num+0x30c>)
 8000b52:	f000 ff46 	bl	80019e2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, f_Pin, 0);
 8000b56:	2200      	movs	r2, #0
 8000b58:	2120      	movs	r1, #32
 8000b5a:	4844      	ldr	r0, [pc, #272]	; (8000c6c <display_num+0x30c>)
 8000b5c:	f000 ff41 	bl	80019e2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, g_Pin, 0);
 8000b60:	2200      	movs	r2, #0
 8000b62:	2140      	movs	r1, #64	; 0x40
 8000b64:	4841      	ldr	r0, [pc, #260]	; (8000c6c <display_num+0x30c>)
 8000b66:	f000 ff3c 	bl	80019e2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, c_Pin, 0);
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2104      	movs	r1, #4
 8000b6e:	483f      	ldr	r0, [pc, #252]	; (8000c6c <display_num+0x30c>)
 8000b70:	f000 ff37 	bl	80019e2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, d_Pin, 0);
 8000b74:	2200      	movs	r2, #0
 8000b76:	2108      	movs	r1, #8
 8000b78:	483c      	ldr	r0, [pc, #240]	; (8000c6c <display_num+0x30c>)
 8000b7a:	f000 ff32 	bl	80019e2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, b_Pin, 1);  // Inverted
 8000b7e:	2201      	movs	r2, #1
 8000b80:	2102      	movs	r1, #2
 8000b82:	483a      	ldr	r0, [pc, #232]	; (8000c6c <display_num+0x30c>)
 8000b84:	f000 ff2d 	bl	80019e2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, e_Pin, 1);  // Inverted
 8000b88:	2201      	movs	r2, #1
 8000b8a:	2110      	movs	r1, #16
 8000b8c:	4837      	ldr	r0, [pc, #220]	; (8000c6c <display_num+0x30c>)
 8000b8e:	f000 ff28 	bl	80019e2 <HAL_GPIO_WritePin>
            break;
 8000b92:	e092      	b.n	8000cba <display_num+0x35a>
        case 6:
            HAL_GPIO_WritePin(GPIOB, a_Pin, 0);
 8000b94:	2200      	movs	r2, #0
 8000b96:	2101      	movs	r1, #1
 8000b98:	4834      	ldr	r0, [pc, #208]	; (8000c6c <display_num+0x30c>)
 8000b9a:	f000 ff22 	bl	80019e2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, f_Pin, 0);
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	2120      	movs	r1, #32
 8000ba2:	4832      	ldr	r0, [pc, #200]	; (8000c6c <display_num+0x30c>)
 8000ba4:	f000 ff1d 	bl	80019e2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, g_Pin, 0);
 8000ba8:	2200      	movs	r2, #0
 8000baa:	2140      	movs	r1, #64	; 0x40
 8000bac:	482f      	ldr	r0, [pc, #188]	; (8000c6c <display_num+0x30c>)
 8000bae:	f000 ff18 	bl	80019e2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, e_Pin, 0);
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	2110      	movs	r1, #16
 8000bb6:	482d      	ldr	r0, [pc, #180]	; (8000c6c <display_num+0x30c>)
 8000bb8:	f000 ff13 	bl	80019e2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, d_Pin, 0);
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	2108      	movs	r1, #8
 8000bc0:	482a      	ldr	r0, [pc, #168]	; (8000c6c <display_num+0x30c>)
 8000bc2:	f000 ff0e 	bl	80019e2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, c_Pin, 0);
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	2104      	movs	r1, #4
 8000bca:	4828      	ldr	r0, [pc, #160]	; (8000c6c <display_num+0x30c>)
 8000bcc:	f000 ff09 	bl	80019e2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, b_Pin, 1);  // Inverted
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	2102      	movs	r1, #2
 8000bd4:	4825      	ldr	r0, [pc, #148]	; (8000c6c <display_num+0x30c>)
 8000bd6:	f000 ff04 	bl	80019e2 <HAL_GPIO_WritePin>
            break;
 8000bda:	e06e      	b.n	8000cba <display_num+0x35a>
        case 7:
            HAL_GPIO_WritePin(GPIOB, a_Pin, 0);
 8000bdc:	2200      	movs	r2, #0
 8000bde:	2101      	movs	r1, #1
 8000be0:	4822      	ldr	r0, [pc, #136]	; (8000c6c <display_num+0x30c>)
 8000be2:	f000 fefe 	bl	80019e2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, b_Pin, 0);
 8000be6:	2200      	movs	r2, #0
 8000be8:	2102      	movs	r1, #2
 8000bea:	4820      	ldr	r0, [pc, #128]	; (8000c6c <display_num+0x30c>)
 8000bec:	f000 fef9 	bl	80019e2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, c_Pin, 0);
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	2104      	movs	r1, #4
 8000bf4:	481d      	ldr	r0, [pc, #116]	; (8000c6c <display_num+0x30c>)
 8000bf6:	f000 fef4 	bl	80019e2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, d_Pin, 1);  // Inverted
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	2108      	movs	r1, #8
 8000bfe:	481b      	ldr	r0, [pc, #108]	; (8000c6c <display_num+0x30c>)
 8000c00:	f000 feef 	bl	80019e2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, e_Pin, 1);  // Inverted
 8000c04:	2201      	movs	r2, #1
 8000c06:	2110      	movs	r1, #16
 8000c08:	4818      	ldr	r0, [pc, #96]	; (8000c6c <display_num+0x30c>)
 8000c0a:	f000 feea 	bl	80019e2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, f_Pin, 1);  // Inverted
 8000c0e:	2201      	movs	r2, #1
 8000c10:	2120      	movs	r1, #32
 8000c12:	4816      	ldr	r0, [pc, #88]	; (8000c6c <display_num+0x30c>)
 8000c14:	f000 fee5 	bl	80019e2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, g_Pin, 1);  // Inverted
 8000c18:	2201      	movs	r2, #1
 8000c1a:	2140      	movs	r1, #64	; 0x40
 8000c1c:	4813      	ldr	r0, [pc, #76]	; (8000c6c <display_num+0x30c>)
 8000c1e:	f000 fee0 	bl	80019e2 <HAL_GPIO_WritePin>
            break;
 8000c22:	e04a      	b.n	8000cba <display_num+0x35a>
        case 8:
            HAL_GPIO_WritePin(GPIOB, a_Pin, 0);
 8000c24:	2200      	movs	r2, #0
 8000c26:	2101      	movs	r1, #1
 8000c28:	4810      	ldr	r0, [pc, #64]	; (8000c6c <display_num+0x30c>)
 8000c2a:	f000 feda 	bl	80019e2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, b_Pin, 0);
 8000c2e:	2200      	movs	r2, #0
 8000c30:	2102      	movs	r1, #2
 8000c32:	480e      	ldr	r0, [pc, #56]	; (8000c6c <display_num+0x30c>)
 8000c34:	f000 fed5 	bl	80019e2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, c_Pin, 0);
 8000c38:	2200      	movs	r2, #0
 8000c3a:	2104      	movs	r1, #4
 8000c3c:	480b      	ldr	r0, [pc, #44]	; (8000c6c <display_num+0x30c>)
 8000c3e:	f000 fed0 	bl	80019e2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, d_Pin, 0);
 8000c42:	2200      	movs	r2, #0
 8000c44:	2108      	movs	r1, #8
 8000c46:	4809      	ldr	r0, [pc, #36]	; (8000c6c <display_num+0x30c>)
 8000c48:	f000 fecb 	bl	80019e2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, e_Pin, 0);
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	2110      	movs	r1, #16
 8000c50:	4806      	ldr	r0, [pc, #24]	; (8000c6c <display_num+0x30c>)
 8000c52:	f000 fec6 	bl	80019e2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, f_Pin, 0);
 8000c56:	2200      	movs	r2, #0
 8000c58:	2120      	movs	r1, #32
 8000c5a:	4804      	ldr	r0, [pc, #16]	; (8000c6c <display_num+0x30c>)
 8000c5c:	f000 fec1 	bl	80019e2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, g_Pin, 0);
 8000c60:	2200      	movs	r2, #0
 8000c62:	2140      	movs	r1, #64	; 0x40
 8000c64:	4801      	ldr	r0, [pc, #4]	; (8000c6c <display_num+0x30c>)
 8000c66:	f000 febc 	bl	80019e2 <HAL_GPIO_WritePin>
            break;
 8000c6a:	e026      	b.n	8000cba <display_num+0x35a>
 8000c6c:	40010c00 	.word	0x40010c00
        case 9:
            HAL_GPIO_WritePin(GPIOB, a_Pin, 0);
 8000c70:	2200      	movs	r2, #0
 8000c72:	2101      	movs	r1, #1
 8000c74:	4813      	ldr	r0, [pc, #76]	; (8000cc4 <display_num+0x364>)
 8000c76:	f000 feb4 	bl	80019e2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, b_Pin, 0);
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	2102      	movs	r1, #2
 8000c7e:	4811      	ldr	r0, [pc, #68]	; (8000cc4 <display_num+0x364>)
 8000c80:	f000 feaf 	bl	80019e2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, c_Pin, 0);
 8000c84:	2200      	movs	r2, #0
 8000c86:	2104      	movs	r1, #4
 8000c88:	480e      	ldr	r0, [pc, #56]	; (8000cc4 <display_num+0x364>)
 8000c8a:	f000 feaa 	bl	80019e2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, d_Pin, 0);
 8000c8e:	2200      	movs	r2, #0
 8000c90:	2108      	movs	r1, #8
 8000c92:	480c      	ldr	r0, [pc, #48]	; (8000cc4 <display_num+0x364>)
 8000c94:	f000 fea5 	bl	80019e2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, f_Pin, 0);
 8000c98:	2200      	movs	r2, #0
 8000c9a:	2120      	movs	r1, #32
 8000c9c:	4809      	ldr	r0, [pc, #36]	; (8000cc4 <display_num+0x364>)
 8000c9e:	f000 fea0 	bl	80019e2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, g_Pin, 0);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	2140      	movs	r1, #64	; 0x40
 8000ca6:	4807      	ldr	r0, [pc, #28]	; (8000cc4 <display_num+0x364>)
 8000ca8:	f000 fe9b 	bl	80019e2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, e_Pin, 1);  // Inverted
 8000cac:	2201      	movs	r2, #1
 8000cae:	2110      	movs	r1, #16
 8000cb0:	4804      	ldr	r0, [pc, #16]	; (8000cc4 <display_num+0x364>)
 8000cb2:	f000 fe96 	bl	80019e2 <HAL_GPIO_WritePin>
            break;
 8000cb6:	e000      	b.n	8000cba <display_num+0x35a>
        default:
            // Handle invalid input (turn on all segments or display error)
            break;
 8000cb8:	bf00      	nop
    }
}
 8000cba:	bf00      	nop
 8000cbc:	3708      	adds	r7, #8
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	40010c00 	.word	0x40010c00

08000cc8 <display_4_digit>:

void display_4_digit(int index, int number)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
 8000cd0:	6039      	str	r1, [r7, #0]
    // Turn off all digits before selecting the correct one
    HAL_GPIO_WritePin(GPIOA, dig1_Pin, 0);
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cd8:	484c      	ldr	r0, [pc, #304]	; (8000e0c <display_4_digit+0x144>)
 8000cda:	f000 fe82 	bl	80019e2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, dig2_Pin, 0);
 8000cde:	2200      	movs	r2, #0
 8000ce0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ce4:	4849      	ldr	r0, [pc, #292]	; (8000e0c <display_4_digit+0x144>)
 8000ce6:	f000 fe7c 	bl	80019e2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, dig3_Pin, 0);
 8000cea:	2200      	movs	r2, #0
 8000cec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cf0:	4846      	ldr	r0, [pc, #280]	; (8000e0c <display_4_digit+0x144>)
 8000cf2:	f000 fe76 	bl	80019e2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, dig4_Pin, 0);
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000cfc:	4843      	ldr	r0, [pc, #268]	; (8000e0c <display_4_digit+0x144>)
 8000cfe:	f000 fe70 	bl	80019e2 <HAL_GPIO_WritePin>
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	2b03      	cmp	r3, #3
 8000d06:	d87b      	bhi.n	8000e00 <display_4_digit+0x138>
 8000d08:	a201      	add	r2, pc, #4	; (adr r2, 8000d10 <display_4_digit+0x48>)
 8000d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d0e:	bf00      	nop
 8000d10:	08000d21 	.word	0x08000d21
 8000d14:	08000d59 	.word	0x08000d59
 8000d18:	08000d91 	.word	0x08000d91
 8000d1c:	08000dc9 	.word	0x08000dc9

    switch(index)
    {
        case 0:
            // Enable the first digit
            HAL_GPIO_WritePin(GPIOA, dig1_Pin, 1);
 8000d20:	2201      	movs	r2, #1
 8000d22:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d26:	4839      	ldr	r0, [pc, #228]	; (8000e0c <display_4_digit+0x144>)
 8000d28:	f000 fe5b 	bl	80019e2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, dig2_Pin, 0);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d32:	4836      	ldr	r0, [pc, #216]	; (8000e0c <display_4_digit+0x144>)
 8000d34:	f000 fe55 	bl	80019e2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, dig3_Pin, 0);
 8000d38:	2200      	movs	r2, #0
 8000d3a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d3e:	4833      	ldr	r0, [pc, #204]	; (8000e0c <display_4_digit+0x144>)
 8000d40:	f000 fe4f 	bl	80019e2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, dig4_Pin, 0);
 8000d44:	2200      	movs	r2, #0
 8000d46:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d4a:	4830      	ldr	r0, [pc, #192]	; (8000e0c <display_4_digit+0x144>)
 8000d4c:	f000 fe49 	bl	80019e2 <HAL_GPIO_WritePin>
            display_num(number); // Display the number on the first digit
 8000d50:	6838      	ldr	r0, [r7, #0]
 8000d52:	f7ff fe05 	bl	8000960 <display_num>
            break;
 8000d56:	e054      	b.n	8000e02 <display_4_digit+0x13a>
        case 1:
            // Enable the second digit
            HAL_GPIO_WritePin(GPIOA, dig1_Pin, 0);
 8000d58:	2200      	movs	r2, #0
 8000d5a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d5e:	482b      	ldr	r0, [pc, #172]	; (8000e0c <display_4_digit+0x144>)
 8000d60:	f000 fe3f 	bl	80019e2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, dig2_Pin, 1);
 8000d64:	2201      	movs	r2, #1
 8000d66:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d6a:	4828      	ldr	r0, [pc, #160]	; (8000e0c <display_4_digit+0x144>)
 8000d6c:	f000 fe39 	bl	80019e2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, dig3_Pin, 0);
 8000d70:	2200      	movs	r2, #0
 8000d72:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d76:	4825      	ldr	r0, [pc, #148]	; (8000e0c <display_4_digit+0x144>)
 8000d78:	f000 fe33 	bl	80019e2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, dig4_Pin, 0);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d82:	4822      	ldr	r0, [pc, #136]	; (8000e0c <display_4_digit+0x144>)
 8000d84:	f000 fe2d 	bl	80019e2 <HAL_GPIO_WritePin>
            display_num(number); // Display the number on the second digit
 8000d88:	6838      	ldr	r0, [r7, #0]
 8000d8a:	f7ff fde9 	bl	8000960 <display_num>
            break;
 8000d8e:	e038      	b.n	8000e02 <display_4_digit+0x13a>
        case 2:
            // Enable the third digit
            HAL_GPIO_WritePin(GPIOA, dig1_Pin, 0);
 8000d90:	2200      	movs	r2, #0
 8000d92:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d96:	481d      	ldr	r0, [pc, #116]	; (8000e0c <display_4_digit+0x144>)
 8000d98:	f000 fe23 	bl	80019e2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, dig2_Pin, 0);
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000da2:	481a      	ldr	r0, [pc, #104]	; (8000e0c <display_4_digit+0x144>)
 8000da4:	f000 fe1d 	bl	80019e2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, dig3_Pin, 1);
 8000da8:	2201      	movs	r2, #1
 8000daa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dae:	4817      	ldr	r0, [pc, #92]	; (8000e0c <display_4_digit+0x144>)
 8000db0:	f000 fe17 	bl	80019e2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, dig4_Pin, 0);
 8000db4:	2200      	movs	r2, #0
 8000db6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000dba:	4814      	ldr	r0, [pc, #80]	; (8000e0c <display_4_digit+0x144>)
 8000dbc:	f000 fe11 	bl	80019e2 <HAL_GPIO_WritePin>
            display_num(number); // Display the number on the third digit
 8000dc0:	6838      	ldr	r0, [r7, #0]
 8000dc2:	f7ff fdcd 	bl	8000960 <display_num>
            break;
 8000dc6:	e01c      	b.n	8000e02 <display_4_digit+0x13a>
        case 3:
            // Enable the fourth digit
            HAL_GPIO_WritePin(GPIOA, dig1_Pin, 0);
 8000dc8:	2200      	movs	r2, #0
 8000dca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dce:	480f      	ldr	r0, [pc, #60]	; (8000e0c <display_4_digit+0x144>)
 8000dd0:	f000 fe07 	bl	80019e2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, dig2_Pin, 0);
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dda:	480c      	ldr	r0, [pc, #48]	; (8000e0c <display_4_digit+0x144>)
 8000ddc:	f000 fe01 	bl	80019e2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, dig3_Pin, 0);
 8000de0:	2200      	movs	r2, #0
 8000de2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000de6:	4809      	ldr	r0, [pc, #36]	; (8000e0c <display_4_digit+0x144>)
 8000de8:	f000 fdfb 	bl	80019e2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, dig4_Pin, 1);
 8000dec:	2201      	movs	r2, #1
 8000dee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000df2:	4806      	ldr	r0, [pc, #24]	; (8000e0c <display_4_digit+0x144>)
 8000df4:	f000 fdf5 	bl	80019e2 <HAL_GPIO_WritePin>
            display_num(number); // Display the number on the fourth digit
 8000df8:	6838      	ldr	r0, [r7, #0]
 8000dfa:	f7ff fdb1 	bl	8000960 <display_num>
            break;
 8000dfe:	e000      	b.n	8000e02 <display_4_digit+0x13a>
        default:
            // Handle invalid index (do nothing or turn off all digits)
            break;
 8000e00:	bf00      	nop
    }
}
 8000e02:	bf00      	nop
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	40010800 	.word	0x40010800

08000e10 <updateDigitBuffer>:

void updateDigitBuffer(int duration1, int duration2)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b087      	sub	sp, #28
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
 8000e18:	6039      	str	r1, [r7, #0]
    // Giả sử duration1 và duration2 đều là số từ 0 đến 99

    // Tách duration1 thành các chữ số riêng lẻ
    int tens1 = duration1 / 10;   // Chữ số hàng chục của duration1
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4a1c      	ldr	r2, [pc, #112]	; (8000e90 <updateDigitBuffer+0x80>)
 8000e1e:	fb82 1203 	smull	r1, r2, r2, r3
 8000e22:	1092      	asrs	r2, r2, #2
 8000e24:	17db      	asrs	r3, r3, #31
 8000e26:	1ad3      	subs	r3, r2, r3
 8000e28:	617b      	str	r3, [r7, #20]
    int ones1 = duration1 % 10;   // Chữ số hàng đơn vị của duration1
 8000e2a:	687a      	ldr	r2, [r7, #4]
 8000e2c:	4b18      	ldr	r3, [pc, #96]	; (8000e90 <updateDigitBuffer+0x80>)
 8000e2e:	fb83 1302 	smull	r1, r3, r3, r2
 8000e32:	1099      	asrs	r1, r3, #2
 8000e34:	17d3      	asrs	r3, r2, #31
 8000e36:	1ac9      	subs	r1, r1, r3
 8000e38:	460b      	mov	r3, r1
 8000e3a:	009b      	lsls	r3, r3, #2
 8000e3c:	440b      	add	r3, r1
 8000e3e:	005b      	lsls	r3, r3, #1
 8000e40:	1ad3      	subs	r3, r2, r3
 8000e42:	613b      	str	r3, [r7, #16]

    // Tách duration2 thành các chữ số riêng lẻ
    int tens2 = duration2 / 10;   // Chữ số hàng chục của duration2
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	4a12      	ldr	r2, [pc, #72]	; (8000e90 <updateDigitBuffer+0x80>)
 8000e48:	fb82 1203 	smull	r1, r2, r2, r3
 8000e4c:	1092      	asrs	r2, r2, #2
 8000e4e:	17db      	asrs	r3, r3, #31
 8000e50:	1ad3      	subs	r3, r2, r3
 8000e52:	60fb      	str	r3, [r7, #12]
    int ones2 = duration2 % 10;   // Chữ số hàng đơn vị của duration2
 8000e54:	683a      	ldr	r2, [r7, #0]
 8000e56:	4b0e      	ldr	r3, [pc, #56]	; (8000e90 <updateDigitBuffer+0x80>)
 8000e58:	fb83 1302 	smull	r1, r3, r3, r2
 8000e5c:	1099      	asrs	r1, r3, #2
 8000e5e:	17d3      	asrs	r3, r2, #31
 8000e60:	1ac9      	subs	r1, r1, r3
 8000e62:	460b      	mov	r3, r1
 8000e64:	009b      	lsls	r3, r3, #2
 8000e66:	440b      	add	r3, r1
 8000e68:	005b      	lsls	r3, r3, #1
 8000e6a:	1ad3      	subs	r3, r2, r3
 8000e6c:	60bb      	str	r3, [r7, #8]

    // Cập nhật fourDigitBuffer
    fourDigitBuffer[0] = tens1;   // Chữ số đầu tiên là hàng chục của duration1
 8000e6e:	4a09      	ldr	r2, [pc, #36]	; (8000e94 <updateDigitBuffer+0x84>)
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	6013      	str	r3, [r2, #0]
    fourDigitBuffer[1] = ones1;   // Chữ số thứ hai là hàng đơn vị của duration1
 8000e74:	4a07      	ldr	r2, [pc, #28]	; (8000e94 <updateDigitBuffer+0x84>)
 8000e76:	693b      	ldr	r3, [r7, #16]
 8000e78:	6053      	str	r3, [r2, #4]
    fourDigitBuffer[2] = tens2;   // Chữ số thứ ba là hàng chục của duration2
 8000e7a:	4a06      	ldr	r2, [pc, #24]	; (8000e94 <updateDigitBuffer+0x84>)
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	6093      	str	r3, [r2, #8]
    fourDigitBuffer[3] = ones2;   // Chữ số thứ tư là hàng đơn vị của duration2
 8000e80:	4a04      	ldr	r2, [pc, #16]	; (8000e94 <updateDigitBuffer+0x84>)
 8000e82:	68bb      	ldr	r3, [r7, #8]
 8000e84:	60d3      	str	r3, [r2, #12]
}
 8000e86:	bf00      	nop
 8000e88:	371c      	adds	r7, #28
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bc80      	pop	{r7}
 8000e8e:	4770      	bx	lr
 8000e90:	66666667 	.word	0x66666667
 8000e94:	20000098 	.word	0x20000098

08000e98 <fsm_change_digit>:

void fsm_change_digit()
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
	display_4_digit(index_digit, fourDigitBuffer[index_digit]);
 8000e9c:	4b0f      	ldr	r3, [pc, #60]	; (8000edc <fsm_change_digit+0x44>)
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	4b0e      	ldr	r3, [pc, #56]	; (8000edc <fsm_change_digit+0x44>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	490e      	ldr	r1, [pc, #56]	; (8000ee0 <fsm_change_digit+0x48>)
 8000ea6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000eaa:	4619      	mov	r1, r3
 8000eac:	4610      	mov	r0, r2
 8000eae:	f7ff ff0b 	bl	8000cc8 <display_4_digit>

	if (flag[2] == 1)
 8000eb2:	4b0c      	ldr	r3, [pc, #48]	; (8000ee4 <fsm_change_digit+0x4c>)
 8000eb4:	689b      	ldr	r3, [r3, #8]
 8000eb6:	2b01      	cmp	r3, #1
 8000eb8:	d10e      	bne.n	8000ed8 <fsm_change_digit+0x40>
	{
		index_digit++;
 8000eba:	4b08      	ldr	r3, [pc, #32]	; (8000edc <fsm_change_digit+0x44>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	3301      	adds	r3, #1
 8000ec0:	4a06      	ldr	r2, [pc, #24]	; (8000edc <fsm_change_digit+0x44>)
 8000ec2:	6013      	str	r3, [r2, #0]
		if (index_digit == 4)
 8000ec4:	4b05      	ldr	r3, [pc, #20]	; (8000edc <fsm_change_digit+0x44>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	2b04      	cmp	r3, #4
 8000eca:	d102      	bne.n	8000ed2 <fsm_change_digit+0x3a>
		{
			index_digit = 0;
 8000ecc:	4b03      	ldr	r3, [pc, #12]	; (8000edc <fsm_change_digit+0x44>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	601a      	str	r2, [r3, #0]
		}
		setTimer_change_digit(5);
 8000ed2:	2005      	movs	r0, #5
 8000ed4:	f000 f8d2 	bl	800107c <setTimer_change_digit>
	}
}
 8000ed8:	bf00      	nop
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	2000006c 	.word	0x2000006c
 8000ee0:	20000098 	.word	0x20000098
 8000ee4:	20000070 	.word	0x20000070

08000ee8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b085      	sub	sp, #20
 8000eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000eee:	4b15      	ldr	r3, [pc, #84]	; (8000f44 <HAL_MspInit+0x5c>)
 8000ef0:	699b      	ldr	r3, [r3, #24]
 8000ef2:	4a14      	ldr	r2, [pc, #80]	; (8000f44 <HAL_MspInit+0x5c>)
 8000ef4:	f043 0301 	orr.w	r3, r3, #1
 8000ef8:	6193      	str	r3, [r2, #24]
 8000efa:	4b12      	ldr	r3, [pc, #72]	; (8000f44 <HAL_MspInit+0x5c>)
 8000efc:	699b      	ldr	r3, [r3, #24]
 8000efe:	f003 0301 	and.w	r3, r3, #1
 8000f02:	60bb      	str	r3, [r7, #8]
 8000f04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f06:	4b0f      	ldr	r3, [pc, #60]	; (8000f44 <HAL_MspInit+0x5c>)
 8000f08:	69db      	ldr	r3, [r3, #28]
 8000f0a:	4a0e      	ldr	r2, [pc, #56]	; (8000f44 <HAL_MspInit+0x5c>)
 8000f0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f10:	61d3      	str	r3, [r2, #28]
 8000f12:	4b0c      	ldr	r3, [pc, #48]	; (8000f44 <HAL_MspInit+0x5c>)
 8000f14:	69db      	ldr	r3, [r3, #28]
 8000f16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f1a:	607b      	str	r3, [r7, #4]
 8000f1c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000f1e:	4b0a      	ldr	r3, [pc, #40]	; (8000f48 <HAL_MspInit+0x60>)
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	60fb      	str	r3, [r7, #12]
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000f2a:	60fb      	str	r3, [r7, #12]
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000f32:	60fb      	str	r3, [r7, #12]
 8000f34:	4a04      	ldr	r2, [pc, #16]	; (8000f48 <HAL_MspInit+0x60>)
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	3714      	adds	r7, #20
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bc80      	pop	{r7}
 8000f42:	4770      	bx	lr
 8000f44:	40021000 	.word	0x40021000
 8000f48:	40010000 	.word	0x40010000

08000f4c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f5c:	d113      	bne.n	8000f86 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f5e:	4b0c      	ldr	r3, [pc, #48]	; (8000f90 <HAL_TIM_Base_MspInit+0x44>)
 8000f60:	69db      	ldr	r3, [r3, #28]
 8000f62:	4a0b      	ldr	r2, [pc, #44]	; (8000f90 <HAL_TIM_Base_MspInit+0x44>)
 8000f64:	f043 0301 	orr.w	r3, r3, #1
 8000f68:	61d3      	str	r3, [r2, #28]
 8000f6a:	4b09      	ldr	r3, [pc, #36]	; (8000f90 <HAL_TIM_Base_MspInit+0x44>)
 8000f6c:	69db      	ldr	r3, [r3, #28]
 8000f6e:	f003 0301 	and.w	r3, r3, #1
 8000f72:	60fb      	str	r3, [r7, #12]
 8000f74:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f76:	2200      	movs	r2, #0
 8000f78:	2100      	movs	r1, #0
 8000f7a:	201c      	movs	r0, #28
 8000f7c:	f000 fb69 	bl	8001652 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f80:	201c      	movs	r0, #28
 8000f82:	f000 fb82 	bl	800168a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000f86:	bf00      	nop
 8000f88:	3710      	adds	r7, #16
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	40021000 	.word	0x40021000

08000f94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f98:	e7fe      	b.n	8000f98 <NMI_Handler+0x4>

08000f9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f9e:	e7fe      	b.n	8000f9e <HardFault_Handler+0x4>

08000fa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fa4:	e7fe      	b.n	8000fa4 <MemManage_Handler+0x4>

08000fa6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000faa:	e7fe      	b.n	8000faa <BusFault_Handler+0x4>

08000fac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fb0:	e7fe      	b.n	8000fb0 <UsageFault_Handler+0x4>

08000fb2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fb6:	bf00      	nop
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bc80      	pop	{r7}
 8000fbc:	4770      	bx	lr

08000fbe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fc2:	bf00      	nop
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bc80      	pop	{r7}
 8000fc8:	4770      	bx	lr

08000fca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fca:	b480      	push	{r7}
 8000fcc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bc80      	pop	{r7}
 8000fd4:	4770      	bx	lr

08000fd6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fda:	f000 fa47 	bl	800146c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fde:	bf00      	nop
 8000fe0:	bd80      	pop	{r7, pc}
	...

08000fe4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000fe8:	4802      	ldr	r0, [pc, #8]	; (8000ff4 <TIM2_IRQHandler+0x10>)
 8000fea:	f001 f9a3 	bl	8002334 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	200000b0 	.word	0x200000b0

08000ff8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ffc:	bf00      	nop
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bc80      	pop	{r7}
 8001002:	4770      	bx	lr

08001004 <setTimer1>:
//counterGreen = 3;
flag[5] = {0};
counterTime[5] = {0 ,0 ,0};

void setTimer1(int duration)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
	counterTime[0] = duration;
 800100c:	4a05      	ldr	r2, [pc, #20]	; (8001024 <setTimer1+0x20>)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6013      	str	r3, [r2, #0]
	flag[0] = 0;
 8001012:	4b05      	ldr	r3, [pc, #20]	; (8001028 <setTimer1+0x24>)
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
}
 8001018:	bf00      	nop
 800101a:	370c      	adds	r7, #12
 800101c:	46bd      	mov	sp, r7
 800101e:	bc80      	pop	{r7}
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	20000084 	.word	0x20000084
 8001028:	20000070 	.word	0x20000070

0800102c <setTimer_increasing_num>:

void setTimer_increasing_num(int duration)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
	counterTime[4] = duration;
 8001034:	4a05      	ldr	r2, [pc, #20]	; (800104c <setTimer_increasing_num+0x20>)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6113      	str	r3, [r2, #16]
	flag[4] = 0;
 800103a:	4b05      	ldr	r3, [pc, #20]	; (8001050 <setTimer_increasing_num+0x24>)
 800103c:	2200      	movs	r2, #0
 800103e:	611a      	str	r2, [r3, #16]
}
 8001040:	bf00      	nop
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	bc80      	pop	{r7}
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	20000084 	.word	0x20000084
 8001050:	20000070 	.word	0x20000070

08001054 <setTimer_blinkly>:

void setTimer_blinkly(int duration)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
	counterTime[1] = duration;
 800105c:	4a05      	ldr	r2, [pc, #20]	; (8001074 <setTimer_blinkly+0x20>)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6053      	str	r3, [r2, #4]
	flag[1] = 0;
 8001062:	4b05      	ldr	r3, [pc, #20]	; (8001078 <setTimer_blinkly+0x24>)
 8001064:	2200      	movs	r2, #0
 8001066:	605a      	str	r2, [r3, #4]
}
 8001068:	bf00      	nop
 800106a:	370c      	adds	r7, #12
 800106c:	46bd      	mov	sp, r7
 800106e:	bc80      	pop	{r7}
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	20000084 	.word	0x20000084
 8001078:	20000070 	.word	0x20000070

0800107c <setTimer_change_digit>:

void setTimer_change_digit(int duration)
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
	counterTime[2] = duration;
 8001084:	4a05      	ldr	r2, [pc, #20]	; (800109c <setTimer_change_digit+0x20>)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6093      	str	r3, [r2, #8]
	flag[2] = 0;
 800108a:	4b05      	ldr	r3, [pc, #20]	; (80010a0 <setTimer_change_digit+0x24>)
 800108c:	2200      	movs	r2, #0
 800108e:	609a      	str	r2, [r3, #8]
}
 8001090:	bf00      	nop
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	bc80      	pop	{r7}
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	20000084 	.word	0x20000084
 80010a0:	20000070 	.word	0x20000070

080010a4 <timerRun>:

void timerRun()
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
	counterTime[0] --;
 80010a8:	4b19      	ldr	r3, [pc, #100]	; (8001110 <timerRun+0x6c>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	3b01      	subs	r3, #1
 80010ae:	4a18      	ldr	r2, [pc, #96]	; (8001110 <timerRun+0x6c>)
 80010b0:	6013      	str	r3, [r2, #0]
	counterTime[1] --;
 80010b2:	4b17      	ldr	r3, [pc, #92]	; (8001110 <timerRun+0x6c>)
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	3b01      	subs	r3, #1
 80010b8:	4a15      	ldr	r2, [pc, #84]	; (8001110 <timerRun+0x6c>)
 80010ba:	6053      	str	r3, [r2, #4]
	counterTime[2] --;
 80010bc:	4b14      	ldr	r3, [pc, #80]	; (8001110 <timerRun+0x6c>)
 80010be:	689b      	ldr	r3, [r3, #8]
 80010c0:	3b01      	subs	r3, #1
 80010c2:	4a13      	ldr	r2, [pc, #76]	; (8001110 <timerRun+0x6c>)
 80010c4:	6093      	str	r3, [r2, #8]
	counterTime[4] --;
 80010c6:	4b12      	ldr	r3, [pc, #72]	; (8001110 <timerRun+0x6c>)
 80010c8:	691b      	ldr	r3, [r3, #16]
 80010ca:	3b01      	subs	r3, #1
 80010cc:	4a10      	ldr	r2, [pc, #64]	; (8001110 <timerRun+0x6c>)
 80010ce:	6113      	str	r3, [r2, #16]
	if (counterTime[0] == 0)
 80010d0:	4b0f      	ldr	r3, [pc, #60]	; (8001110 <timerRun+0x6c>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d102      	bne.n	80010de <timerRun+0x3a>
	{
		flag[0] = 1;
 80010d8:	4b0e      	ldr	r3, [pc, #56]	; (8001114 <timerRun+0x70>)
 80010da:	2201      	movs	r2, #1
 80010dc:	601a      	str	r2, [r3, #0]
	}

	if (counterTime[1] == 0)
 80010de:	4b0c      	ldr	r3, [pc, #48]	; (8001110 <timerRun+0x6c>)
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d102      	bne.n	80010ec <timerRun+0x48>
	{
		flag[1] = 1;
 80010e6:	4b0b      	ldr	r3, [pc, #44]	; (8001114 <timerRun+0x70>)
 80010e8:	2201      	movs	r2, #1
 80010ea:	605a      	str	r2, [r3, #4]
	}

	if (counterTime[2] == 0)
 80010ec:	4b08      	ldr	r3, [pc, #32]	; (8001110 <timerRun+0x6c>)
 80010ee:	689b      	ldr	r3, [r3, #8]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d102      	bne.n	80010fa <timerRun+0x56>
	{
		flag[2] = 1;
 80010f4:	4b07      	ldr	r3, [pc, #28]	; (8001114 <timerRun+0x70>)
 80010f6:	2201      	movs	r2, #1
 80010f8:	609a      	str	r2, [r3, #8]
	}

	if (counterTime[4] == 0)
 80010fa:	4b05      	ldr	r3, [pc, #20]	; (8001110 <timerRun+0x6c>)
 80010fc:	691b      	ldr	r3, [r3, #16]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d102      	bne.n	8001108 <timerRun+0x64>
	{
		flag[4] = 1;
 8001102:	4b04      	ldr	r3, [pc, #16]	; (8001114 <timerRun+0x70>)
 8001104:	2201      	movs	r2, #1
 8001106:	611a      	str	r2, [r3, #16]
	}
}
 8001108:	bf00      	nop
 800110a:	46bd      	mov	sp, r7
 800110c:	bc80      	pop	{r7}
 800110e:	4770      	bx	lr
 8001110:	20000084 	.word	0x20000084
 8001114:	20000070 	.word	0x20000070

08001118 <reset_state>:
int state = 0;
int countTemp = 0;
int index = 1;

void reset_state()
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
	state = 0;
 800111c:	4b06      	ldr	r3, [pc, #24]	; (8001138 <reset_state+0x20>)
 800111e:	2200      	movs	r2, #0
 8001120:	601a      	str	r2, [r3, #0]
	countTemp = 0;
 8001122:	4b06      	ldr	r3, [pc, #24]	; (800113c <reset_state+0x24>)
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
	index = 1;
 8001128:	4b05      	ldr	r3, [pc, #20]	; (8001140 <reset_state+0x28>)
 800112a:	2201      	movs	r2, #1
 800112c:	601a      	str	r2, [r3, #0]
	setTimer1(100);
 800112e:	2064      	movs	r0, #100	; 0x64
 8001130:	f7ff ff68 	bl	8001004 <setTimer1>
}
 8001134:	bf00      	nop
 8001136:	bd80      	pop	{r7, pc}
 8001138:	200000a8 	.word	0x200000a8
 800113c:	200000ac 	.word	0x200000ac
 8001140:	2000001c 	.word	0x2000001c

08001144 <fsm_traffic_light>:

void fsm_traffic_light()
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
	switch (state)
 8001148:	4b8d      	ldr	r3, [pc, #564]	; (8001380 <fsm_traffic_light+0x23c>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2b03      	cmp	r3, #3
 800114e:	f200 8103 	bhi.w	8001358 <fsm_traffic_light+0x214>
 8001152:	a201      	add	r2, pc, #4	; (adr r2, 8001158 <fsm_traffic_light+0x14>)
 8001154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001158:	08001169 	.word	0x08001169
 800115c:	080011e5 	.word	0x080011e5
 8001160:	08001261 	.word	0x08001261
 8001164:	080012dd 	.word	0x080012dd
	{
		case 0:
			HAL_GPIO_WritePin(GPIOB, red1_Pin, 1);
 8001168:	2201      	movs	r2, #1
 800116a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800116e:	4885      	ldr	r0, [pc, #532]	; (8001384 <fsm_traffic_light+0x240>)
 8001170:	f000 fc37 	bl	80019e2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, red2_Pin, 0);
 8001174:	2200      	movs	r2, #0
 8001176:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800117a:	4882      	ldr	r0, [pc, #520]	; (8001384 <fsm_traffic_light+0x240>)
 800117c:	f000 fc31 	bl	80019e2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, yellow1_Pin, 0);
 8001180:	2200      	movs	r2, #0
 8001182:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001186:	487f      	ldr	r0, [pc, #508]	; (8001384 <fsm_traffic_light+0x240>)
 8001188:	f000 fc2b 	bl	80019e2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, yellow2_Pin, 0);
 800118c:	2200      	movs	r2, #0
 800118e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001192:	487c      	ldr	r0, [pc, #496]	; (8001384 <fsm_traffic_light+0x240>)
 8001194:	f000 fc25 	bl	80019e2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, green1_Pin, 0);
 8001198:	2200      	movs	r2, #0
 800119a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800119e:	4879      	ldr	r0, [pc, #484]	; (8001384 <fsm_traffic_light+0x240>)
 80011a0:	f000 fc1f 	bl	80019e2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, green2_Pin, 1);
 80011a4:	2201      	movs	r2, #1
 80011a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011aa:	4876      	ldr	r0, [pc, #472]	; (8001384 <fsm_traffic_light+0x240>)
 80011ac:	f000 fc19 	bl	80019e2 <HAL_GPIO_WritePin>
			if (countTemp == counterLightBuffer[2])
 80011b0:	4b75      	ldr	r3, [pc, #468]	; (8001388 <fsm_traffic_light+0x244>)
 80011b2:	689a      	ldr	r2, [r3, #8]
 80011b4:	4b75      	ldr	r3, [pc, #468]	; (800138c <fsm_traffic_light+0x248>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d105      	bne.n	80011c8 <fsm_traffic_light+0x84>
			{
				state = 1;
 80011bc:	4b70      	ldr	r3, [pc, #448]	; (8001380 <fsm_traffic_light+0x23c>)
 80011be:	2201      	movs	r2, #1
 80011c0:	601a      	str	r2, [r3, #0]
				countTemp = 0;
 80011c2:	4b72      	ldr	r3, [pc, #456]	; (800138c <fsm_traffic_light+0x248>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
			}
			updateDigitBuffer(counterLightBuffer[0] - countTemp, counterLightBuffer[2] - countTemp);
 80011c8:	4b6f      	ldr	r3, [pc, #444]	; (8001388 <fsm_traffic_light+0x244>)
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	4b6f      	ldr	r3, [pc, #444]	; (800138c <fsm_traffic_light+0x248>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	1ad0      	subs	r0, r2, r3
 80011d2:	4b6d      	ldr	r3, [pc, #436]	; (8001388 <fsm_traffic_light+0x244>)
 80011d4:	689a      	ldr	r2, [r3, #8]
 80011d6:	4b6d      	ldr	r3, [pc, #436]	; (800138c <fsm_traffic_light+0x248>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	1ad3      	subs	r3, r2, r3
 80011dc:	4619      	mov	r1, r3
 80011de:	f7ff fe17 	bl	8000e10 <updateDigitBuffer>
			break;
 80011e2:	e0bd      	b.n	8001360 <fsm_traffic_light+0x21c>

		case 1:
			HAL_GPIO_WritePin(GPIOB, red1_Pin, 1);
 80011e4:	2201      	movs	r2, #1
 80011e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011ea:	4866      	ldr	r0, [pc, #408]	; (8001384 <fsm_traffic_light+0x240>)
 80011ec:	f000 fbf9 	bl	80019e2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, red2_Pin, 0);
 80011f0:	2200      	movs	r2, #0
 80011f2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011f6:	4863      	ldr	r0, [pc, #396]	; (8001384 <fsm_traffic_light+0x240>)
 80011f8:	f000 fbf3 	bl	80019e2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, yellow1_Pin, 0);
 80011fc:	2200      	movs	r2, #0
 80011fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001202:	4860      	ldr	r0, [pc, #384]	; (8001384 <fsm_traffic_light+0x240>)
 8001204:	f000 fbed 	bl	80019e2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, yellow2_Pin, 1);
 8001208:	2201      	movs	r2, #1
 800120a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800120e:	485d      	ldr	r0, [pc, #372]	; (8001384 <fsm_traffic_light+0x240>)
 8001210:	f000 fbe7 	bl	80019e2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, green1_Pin, 0);
 8001214:	2200      	movs	r2, #0
 8001216:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800121a:	485a      	ldr	r0, [pc, #360]	; (8001384 <fsm_traffic_light+0x240>)
 800121c:	f000 fbe1 	bl	80019e2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, green2_Pin, 0);
 8001220:	2200      	movs	r2, #0
 8001222:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001226:	4857      	ldr	r0, [pc, #348]	; (8001384 <fsm_traffic_light+0x240>)
 8001228:	f000 fbdb 	bl	80019e2 <HAL_GPIO_WritePin>
			if (countTemp == counterLightBuffer[1])
 800122c:	4b56      	ldr	r3, [pc, #344]	; (8001388 <fsm_traffic_light+0x244>)
 800122e:	685a      	ldr	r2, [r3, #4]
 8001230:	4b56      	ldr	r3, [pc, #344]	; (800138c <fsm_traffic_light+0x248>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	429a      	cmp	r2, r3
 8001236:	d105      	bne.n	8001244 <fsm_traffic_light+0x100>
			{
				state = 2;
 8001238:	4b51      	ldr	r3, [pc, #324]	; (8001380 <fsm_traffic_light+0x23c>)
 800123a:	2202      	movs	r2, #2
 800123c:	601a      	str	r2, [r3, #0]
				countTemp = 0;
 800123e:	4b53      	ldr	r3, [pc, #332]	; (800138c <fsm_traffic_light+0x248>)
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
			}
			updateDigitBuffer(counterLightBuffer[1] - countTemp, counterLightBuffer[1] - countTemp);
 8001244:	4b50      	ldr	r3, [pc, #320]	; (8001388 <fsm_traffic_light+0x244>)
 8001246:	685a      	ldr	r2, [r3, #4]
 8001248:	4b50      	ldr	r3, [pc, #320]	; (800138c <fsm_traffic_light+0x248>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	1ad0      	subs	r0, r2, r3
 800124e:	4b4e      	ldr	r3, [pc, #312]	; (8001388 <fsm_traffic_light+0x244>)
 8001250:	685a      	ldr	r2, [r3, #4]
 8001252:	4b4e      	ldr	r3, [pc, #312]	; (800138c <fsm_traffic_light+0x248>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	1ad3      	subs	r3, r2, r3
 8001258:	4619      	mov	r1, r3
 800125a:	f7ff fdd9 	bl	8000e10 <updateDigitBuffer>
			break;
 800125e:	e07f      	b.n	8001360 <fsm_traffic_light+0x21c>

		case 2:
			HAL_GPIO_WritePin(GPIOB, red1_Pin, 0);
 8001260:	2200      	movs	r2, #0
 8001262:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001266:	4847      	ldr	r0, [pc, #284]	; (8001384 <fsm_traffic_light+0x240>)
 8001268:	f000 fbbb 	bl	80019e2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, red2_Pin, 1);
 800126c:	2201      	movs	r2, #1
 800126e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001272:	4844      	ldr	r0, [pc, #272]	; (8001384 <fsm_traffic_light+0x240>)
 8001274:	f000 fbb5 	bl	80019e2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, yellow1_Pin, 0);
 8001278:	2200      	movs	r2, #0
 800127a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800127e:	4841      	ldr	r0, [pc, #260]	; (8001384 <fsm_traffic_light+0x240>)
 8001280:	f000 fbaf 	bl	80019e2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, yellow2_Pin, 0);
 8001284:	2200      	movs	r2, #0
 8001286:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800128a:	483e      	ldr	r0, [pc, #248]	; (8001384 <fsm_traffic_light+0x240>)
 800128c:	f000 fba9 	bl	80019e2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, green1_Pin, 1);
 8001290:	2201      	movs	r2, #1
 8001292:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001296:	483b      	ldr	r0, [pc, #236]	; (8001384 <fsm_traffic_light+0x240>)
 8001298:	f000 fba3 	bl	80019e2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, green2_Pin, 0);
 800129c:	2200      	movs	r2, #0
 800129e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012a2:	4838      	ldr	r0, [pc, #224]	; (8001384 <fsm_traffic_light+0x240>)
 80012a4:	f000 fb9d 	bl	80019e2 <HAL_GPIO_WritePin>
			if (countTemp == counterLightBuffer[2])
 80012a8:	4b37      	ldr	r3, [pc, #220]	; (8001388 <fsm_traffic_light+0x244>)
 80012aa:	689a      	ldr	r2, [r3, #8]
 80012ac:	4b37      	ldr	r3, [pc, #220]	; (800138c <fsm_traffic_light+0x248>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d105      	bne.n	80012c0 <fsm_traffic_light+0x17c>
			{
				state = 3;
 80012b4:	4b32      	ldr	r3, [pc, #200]	; (8001380 <fsm_traffic_light+0x23c>)
 80012b6:	2203      	movs	r2, #3
 80012b8:	601a      	str	r2, [r3, #0]
				countTemp = 0;
 80012ba:	4b34      	ldr	r3, [pc, #208]	; (800138c <fsm_traffic_light+0x248>)
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
			}
			updateDigitBuffer(counterLightBuffer[2] - countTemp, counterLightBuffer[0] - countTemp);
 80012c0:	4b31      	ldr	r3, [pc, #196]	; (8001388 <fsm_traffic_light+0x244>)
 80012c2:	689a      	ldr	r2, [r3, #8]
 80012c4:	4b31      	ldr	r3, [pc, #196]	; (800138c <fsm_traffic_light+0x248>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	1ad0      	subs	r0, r2, r3
 80012ca:	4b2f      	ldr	r3, [pc, #188]	; (8001388 <fsm_traffic_light+0x244>)
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	4b2f      	ldr	r3, [pc, #188]	; (800138c <fsm_traffic_light+0x248>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	1ad3      	subs	r3, r2, r3
 80012d4:	4619      	mov	r1, r3
 80012d6:	f7ff fd9b 	bl	8000e10 <updateDigitBuffer>
			break;
 80012da:	e041      	b.n	8001360 <fsm_traffic_light+0x21c>

		case 3:
			HAL_GPIO_WritePin(GPIOB, red1_Pin, 0);
 80012dc:	2200      	movs	r2, #0
 80012de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012e2:	4828      	ldr	r0, [pc, #160]	; (8001384 <fsm_traffic_light+0x240>)
 80012e4:	f000 fb7d 	bl	80019e2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, red2_Pin, 1);
 80012e8:	2201      	movs	r2, #1
 80012ea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012ee:	4825      	ldr	r0, [pc, #148]	; (8001384 <fsm_traffic_light+0x240>)
 80012f0:	f000 fb77 	bl	80019e2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, yellow1_Pin, 1);
 80012f4:	2201      	movs	r2, #1
 80012f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012fa:	4822      	ldr	r0, [pc, #136]	; (8001384 <fsm_traffic_light+0x240>)
 80012fc:	f000 fb71 	bl	80019e2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, yellow2_Pin, 0);
 8001300:	2200      	movs	r2, #0
 8001302:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001306:	481f      	ldr	r0, [pc, #124]	; (8001384 <fsm_traffic_light+0x240>)
 8001308:	f000 fb6b 	bl	80019e2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, green1_Pin, 0);
 800130c:	2200      	movs	r2, #0
 800130e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001312:	481c      	ldr	r0, [pc, #112]	; (8001384 <fsm_traffic_light+0x240>)
 8001314:	f000 fb65 	bl	80019e2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, green2_Pin, 0);
 8001318:	2200      	movs	r2, #0
 800131a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800131e:	4819      	ldr	r0, [pc, #100]	; (8001384 <fsm_traffic_light+0x240>)
 8001320:	f000 fb5f 	bl	80019e2 <HAL_GPIO_WritePin>
			if (countTemp == counterLightBuffer[1])
 8001324:	4b18      	ldr	r3, [pc, #96]	; (8001388 <fsm_traffic_light+0x244>)
 8001326:	685a      	ldr	r2, [r3, #4]
 8001328:	4b18      	ldr	r3, [pc, #96]	; (800138c <fsm_traffic_light+0x248>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	429a      	cmp	r2, r3
 800132e:	d105      	bne.n	800133c <fsm_traffic_light+0x1f8>
			{
				state = 0;
 8001330:	4b13      	ldr	r3, [pc, #76]	; (8001380 <fsm_traffic_light+0x23c>)
 8001332:	2200      	movs	r2, #0
 8001334:	601a      	str	r2, [r3, #0]
				countTemp = 0;
 8001336:	4b15      	ldr	r3, [pc, #84]	; (800138c <fsm_traffic_light+0x248>)
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]
			}
			updateDigitBuffer(counterLightBuffer[1] - countTemp, counterLightBuffer[1] - countTemp);
 800133c:	4b12      	ldr	r3, [pc, #72]	; (8001388 <fsm_traffic_light+0x244>)
 800133e:	685a      	ldr	r2, [r3, #4]
 8001340:	4b12      	ldr	r3, [pc, #72]	; (800138c <fsm_traffic_light+0x248>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	1ad0      	subs	r0, r2, r3
 8001346:	4b10      	ldr	r3, [pc, #64]	; (8001388 <fsm_traffic_light+0x244>)
 8001348:	685a      	ldr	r2, [r3, #4]
 800134a:	4b10      	ldr	r3, [pc, #64]	; (800138c <fsm_traffic_light+0x248>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	1ad3      	subs	r3, r2, r3
 8001350:	4619      	mov	r1, r3
 8001352:	f7ff fd5d 	bl	8000e10 <updateDigitBuffer>
			break;
 8001356:	e003      	b.n	8001360 <fsm_traffic_light+0x21c>

		default:
			state = 0;
 8001358:	4b09      	ldr	r3, [pc, #36]	; (8001380 <fsm_traffic_light+0x23c>)
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
			break;
 800135e:	bf00      	nop
	}

	if (flag[0] == 1)
 8001360:	4b0b      	ldr	r3, [pc, #44]	; (8001390 <fsm_traffic_light+0x24c>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2b01      	cmp	r3, #1
 8001366:	d108      	bne.n	800137a <fsm_traffic_light+0x236>
	{
		countTemp ++;
 8001368:	4b08      	ldr	r3, [pc, #32]	; (800138c <fsm_traffic_light+0x248>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	3301      	adds	r3, #1
 800136e:	4a07      	ldr	r2, [pc, #28]	; (800138c <fsm_traffic_light+0x248>)
 8001370:	6013      	str	r3, [r2, #0]
		setTimer1(100);
 8001372:	2064      	movs	r0, #100	; 0x64
 8001374:	f7ff fe46 	bl	8001004 <setTimer1>
	}

	return;
 8001378:	bf00      	nop
 800137a:	bf00      	nop
}
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	200000a8 	.word	0x200000a8
 8001384:	40010c00 	.word	0x40010c00
 8001388:	20000010 	.word	0x20000010
 800138c:	200000ac 	.word	0x200000ac
 8001390:	20000070 	.word	0x20000070

08001394 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001394:	f7ff fe30 	bl	8000ff8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001398:	480b      	ldr	r0, [pc, #44]	; (80013c8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800139a:	490c      	ldr	r1, [pc, #48]	; (80013cc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800139c:	4a0c      	ldr	r2, [pc, #48]	; (80013d0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800139e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013a0:	e002      	b.n	80013a8 <LoopCopyDataInit>

080013a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013a6:	3304      	adds	r3, #4

080013a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013ac:	d3f9      	bcc.n	80013a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ae:	4a09      	ldr	r2, [pc, #36]	; (80013d4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80013b0:	4c09      	ldr	r4, [pc, #36]	; (80013d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013b4:	e001      	b.n	80013ba <LoopFillZerobss>

080013b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013b8:	3204      	adds	r2, #4

080013ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013bc:	d3fb      	bcc.n	80013b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013be:	f001 faf9 	bl	80029b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013c2:	f7ff f9b1 	bl	8000728 <main>
  bx lr
 80013c6:	4770      	bx	lr
  ldr r0, =_sdata
 80013c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013cc:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 80013d0:	08002a50 	.word	0x08002a50
  ldr r2, =_sbss
 80013d4:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 80013d8:	200000fc 	.word	0x200000fc

080013dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013dc:	e7fe      	b.n	80013dc <ADC1_2_IRQHandler>
	...

080013e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013e4:	4b08      	ldr	r3, [pc, #32]	; (8001408 <HAL_Init+0x28>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a07      	ldr	r2, [pc, #28]	; (8001408 <HAL_Init+0x28>)
 80013ea:	f043 0310 	orr.w	r3, r3, #16
 80013ee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013f0:	2003      	movs	r0, #3
 80013f2:	f000 f923 	bl	800163c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013f6:	200f      	movs	r0, #15
 80013f8:	f000 f808 	bl	800140c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013fc:	f7ff fd74 	bl	8000ee8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001400:	2300      	movs	r3, #0
}
 8001402:	4618      	mov	r0, r3
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	40022000 	.word	0x40022000

0800140c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001414:	4b12      	ldr	r3, [pc, #72]	; (8001460 <HAL_InitTick+0x54>)
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	4b12      	ldr	r3, [pc, #72]	; (8001464 <HAL_InitTick+0x58>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	4619      	mov	r1, r3
 800141e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001422:	fbb3 f3f1 	udiv	r3, r3, r1
 8001426:	fbb2 f3f3 	udiv	r3, r2, r3
 800142a:	4618      	mov	r0, r3
 800142c:	f000 f93b 	bl	80016a6 <HAL_SYSTICK_Config>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e00e      	b.n	8001458 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2b0f      	cmp	r3, #15
 800143e:	d80a      	bhi.n	8001456 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001440:	2200      	movs	r2, #0
 8001442:	6879      	ldr	r1, [r7, #4]
 8001444:	f04f 30ff 	mov.w	r0, #4294967295
 8001448:	f000 f903 	bl	8001652 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800144c:	4a06      	ldr	r2, [pc, #24]	; (8001468 <HAL_InitTick+0x5c>)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001452:	2300      	movs	r3, #0
 8001454:	e000      	b.n	8001458 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
}
 8001458:	4618      	mov	r0, r3
 800145a:	3708      	adds	r7, #8
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	2000000c 	.word	0x2000000c
 8001464:	20000024 	.word	0x20000024
 8001468:	20000020 	.word	0x20000020

0800146c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001470:	4b05      	ldr	r3, [pc, #20]	; (8001488 <HAL_IncTick+0x1c>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	461a      	mov	r2, r3
 8001476:	4b05      	ldr	r3, [pc, #20]	; (800148c <HAL_IncTick+0x20>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4413      	add	r3, r2
 800147c:	4a03      	ldr	r2, [pc, #12]	; (800148c <HAL_IncTick+0x20>)
 800147e:	6013      	str	r3, [r2, #0]
}
 8001480:	bf00      	nop
 8001482:	46bd      	mov	sp, r7
 8001484:	bc80      	pop	{r7}
 8001486:	4770      	bx	lr
 8001488:	20000024 	.word	0x20000024
 800148c:	200000f8 	.word	0x200000f8

08001490 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  return uwTick;
 8001494:	4b02      	ldr	r3, [pc, #8]	; (80014a0 <HAL_GetTick+0x10>)
 8001496:	681b      	ldr	r3, [r3, #0]
}
 8001498:	4618      	mov	r0, r3
 800149a:	46bd      	mov	sp, r7
 800149c:	bc80      	pop	{r7}
 800149e:	4770      	bx	lr
 80014a0:	200000f8 	.word	0x200000f8

080014a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b085      	sub	sp, #20
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	f003 0307 	and.w	r3, r3, #7
 80014b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014b4:	4b0c      	ldr	r3, [pc, #48]	; (80014e8 <__NVIC_SetPriorityGrouping+0x44>)
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014ba:	68ba      	ldr	r2, [r7, #8]
 80014bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014c0:	4013      	ands	r3, r2
 80014c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014d6:	4a04      	ldr	r2, [pc, #16]	; (80014e8 <__NVIC_SetPriorityGrouping+0x44>)
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	60d3      	str	r3, [r2, #12]
}
 80014dc:	bf00      	nop
 80014de:	3714      	adds	r7, #20
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bc80      	pop	{r7}
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	e000ed00 	.word	0xe000ed00

080014ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014f0:	4b04      	ldr	r3, [pc, #16]	; (8001504 <__NVIC_GetPriorityGrouping+0x18>)
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	0a1b      	lsrs	r3, r3, #8
 80014f6:	f003 0307 	and.w	r3, r3, #7
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bc80      	pop	{r7}
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	e000ed00 	.word	0xe000ed00

08001508 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	4603      	mov	r3, r0
 8001510:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001516:	2b00      	cmp	r3, #0
 8001518:	db0b      	blt.n	8001532 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800151a:	79fb      	ldrb	r3, [r7, #7]
 800151c:	f003 021f 	and.w	r2, r3, #31
 8001520:	4906      	ldr	r1, [pc, #24]	; (800153c <__NVIC_EnableIRQ+0x34>)
 8001522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001526:	095b      	lsrs	r3, r3, #5
 8001528:	2001      	movs	r0, #1
 800152a:	fa00 f202 	lsl.w	r2, r0, r2
 800152e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001532:	bf00      	nop
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	bc80      	pop	{r7}
 800153a:	4770      	bx	lr
 800153c:	e000e100 	.word	0xe000e100

08001540 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	4603      	mov	r3, r0
 8001548:	6039      	str	r1, [r7, #0]
 800154a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800154c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001550:	2b00      	cmp	r3, #0
 8001552:	db0a      	blt.n	800156a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	b2da      	uxtb	r2, r3
 8001558:	490c      	ldr	r1, [pc, #48]	; (800158c <__NVIC_SetPriority+0x4c>)
 800155a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155e:	0112      	lsls	r2, r2, #4
 8001560:	b2d2      	uxtb	r2, r2
 8001562:	440b      	add	r3, r1
 8001564:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001568:	e00a      	b.n	8001580 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	b2da      	uxtb	r2, r3
 800156e:	4908      	ldr	r1, [pc, #32]	; (8001590 <__NVIC_SetPriority+0x50>)
 8001570:	79fb      	ldrb	r3, [r7, #7]
 8001572:	f003 030f 	and.w	r3, r3, #15
 8001576:	3b04      	subs	r3, #4
 8001578:	0112      	lsls	r2, r2, #4
 800157a:	b2d2      	uxtb	r2, r2
 800157c:	440b      	add	r3, r1
 800157e:	761a      	strb	r2, [r3, #24]
}
 8001580:	bf00      	nop
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	bc80      	pop	{r7}
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	e000e100 	.word	0xe000e100
 8001590:	e000ed00 	.word	0xe000ed00

08001594 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001594:	b480      	push	{r7}
 8001596:	b089      	sub	sp, #36	; 0x24
 8001598:	af00      	add	r7, sp, #0
 800159a:	60f8      	str	r0, [r7, #12]
 800159c:	60b9      	str	r1, [r7, #8]
 800159e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	f003 0307 	and.w	r3, r3, #7
 80015a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015a8:	69fb      	ldr	r3, [r7, #28]
 80015aa:	f1c3 0307 	rsb	r3, r3, #7
 80015ae:	2b04      	cmp	r3, #4
 80015b0:	bf28      	it	cs
 80015b2:	2304      	movcs	r3, #4
 80015b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	3304      	adds	r3, #4
 80015ba:	2b06      	cmp	r3, #6
 80015bc:	d902      	bls.n	80015c4 <NVIC_EncodePriority+0x30>
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	3b03      	subs	r3, #3
 80015c2:	e000      	b.n	80015c6 <NVIC_EncodePriority+0x32>
 80015c4:	2300      	movs	r3, #0
 80015c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015c8:	f04f 32ff 	mov.w	r2, #4294967295
 80015cc:	69bb      	ldr	r3, [r7, #24]
 80015ce:	fa02 f303 	lsl.w	r3, r2, r3
 80015d2:	43da      	mvns	r2, r3
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	401a      	ands	r2, r3
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015dc:	f04f 31ff 	mov.w	r1, #4294967295
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	fa01 f303 	lsl.w	r3, r1, r3
 80015e6:	43d9      	mvns	r1, r3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015ec:	4313      	orrs	r3, r2
         );
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3724      	adds	r7, #36	; 0x24
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bc80      	pop	{r7}
 80015f6:	4770      	bx	lr

080015f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	3b01      	subs	r3, #1
 8001604:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001608:	d301      	bcc.n	800160e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800160a:	2301      	movs	r3, #1
 800160c:	e00f      	b.n	800162e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800160e:	4a0a      	ldr	r2, [pc, #40]	; (8001638 <SysTick_Config+0x40>)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	3b01      	subs	r3, #1
 8001614:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001616:	210f      	movs	r1, #15
 8001618:	f04f 30ff 	mov.w	r0, #4294967295
 800161c:	f7ff ff90 	bl	8001540 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001620:	4b05      	ldr	r3, [pc, #20]	; (8001638 <SysTick_Config+0x40>)
 8001622:	2200      	movs	r2, #0
 8001624:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001626:	4b04      	ldr	r3, [pc, #16]	; (8001638 <SysTick_Config+0x40>)
 8001628:	2207      	movs	r2, #7
 800162a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800162c:	2300      	movs	r3, #0
}
 800162e:	4618      	mov	r0, r3
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	e000e010 	.word	0xe000e010

0800163c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	f7ff ff2d 	bl	80014a4 <__NVIC_SetPriorityGrouping>
}
 800164a:	bf00      	nop
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}

08001652 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001652:	b580      	push	{r7, lr}
 8001654:	b086      	sub	sp, #24
 8001656:	af00      	add	r7, sp, #0
 8001658:	4603      	mov	r3, r0
 800165a:	60b9      	str	r1, [r7, #8]
 800165c:	607a      	str	r2, [r7, #4]
 800165e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001660:	2300      	movs	r3, #0
 8001662:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001664:	f7ff ff42 	bl	80014ec <__NVIC_GetPriorityGrouping>
 8001668:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800166a:	687a      	ldr	r2, [r7, #4]
 800166c:	68b9      	ldr	r1, [r7, #8]
 800166e:	6978      	ldr	r0, [r7, #20]
 8001670:	f7ff ff90 	bl	8001594 <NVIC_EncodePriority>
 8001674:	4602      	mov	r2, r0
 8001676:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800167a:	4611      	mov	r1, r2
 800167c:	4618      	mov	r0, r3
 800167e:	f7ff ff5f 	bl	8001540 <__NVIC_SetPriority>
}
 8001682:	bf00      	nop
 8001684:	3718      	adds	r7, #24
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}

0800168a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800168a:	b580      	push	{r7, lr}
 800168c:	b082      	sub	sp, #8
 800168e:	af00      	add	r7, sp, #0
 8001690:	4603      	mov	r3, r0
 8001692:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001694:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001698:	4618      	mov	r0, r3
 800169a:	f7ff ff35 	bl	8001508 <__NVIC_EnableIRQ>
}
 800169e:	bf00      	nop
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}

080016a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016a6:	b580      	push	{r7, lr}
 80016a8:	b082      	sub	sp, #8
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f7ff ffa2 	bl	80015f8 <SysTick_Config>
 80016b4:	4603      	mov	r3, r0
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
	...

080016c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b08b      	sub	sp, #44	; 0x2c
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016ca:	2300      	movs	r3, #0
 80016cc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80016ce:	2300      	movs	r3, #0
 80016d0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016d2:	e148      	b.n	8001966 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80016d4:	2201      	movs	r2, #1
 80016d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d8:	fa02 f303 	lsl.w	r3, r2, r3
 80016dc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	69fa      	ldr	r2, [r7, #28]
 80016e4:	4013      	ands	r3, r2
 80016e6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80016e8:	69ba      	ldr	r2, [r7, #24]
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	f040 8137 	bne.w	8001960 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	4aa3      	ldr	r2, [pc, #652]	; (8001984 <HAL_GPIO_Init+0x2c4>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d05e      	beq.n	80017ba <HAL_GPIO_Init+0xfa>
 80016fc:	4aa1      	ldr	r2, [pc, #644]	; (8001984 <HAL_GPIO_Init+0x2c4>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d875      	bhi.n	80017ee <HAL_GPIO_Init+0x12e>
 8001702:	4aa1      	ldr	r2, [pc, #644]	; (8001988 <HAL_GPIO_Init+0x2c8>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d058      	beq.n	80017ba <HAL_GPIO_Init+0xfa>
 8001708:	4a9f      	ldr	r2, [pc, #636]	; (8001988 <HAL_GPIO_Init+0x2c8>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d86f      	bhi.n	80017ee <HAL_GPIO_Init+0x12e>
 800170e:	4a9f      	ldr	r2, [pc, #636]	; (800198c <HAL_GPIO_Init+0x2cc>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d052      	beq.n	80017ba <HAL_GPIO_Init+0xfa>
 8001714:	4a9d      	ldr	r2, [pc, #628]	; (800198c <HAL_GPIO_Init+0x2cc>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d869      	bhi.n	80017ee <HAL_GPIO_Init+0x12e>
 800171a:	4a9d      	ldr	r2, [pc, #628]	; (8001990 <HAL_GPIO_Init+0x2d0>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d04c      	beq.n	80017ba <HAL_GPIO_Init+0xfa>
 8001720:	4a9b      	ldr	r2, [pc, #620]	; (8001990 <HAL_GPIO_Init+0x2d0>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d863      	bhi.n	80017ee <HAL_GPIO_Init+0x12e>
 8001726:	4a9b      	ldr	r2, [pc, #620]	; (8001994 <HAL_GPIO_Init+0x2d4>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d046      	beq.n	80017ba <HAL_GPIO_Init+0xfa>
 800172c:	4a99      	ldr	r2, [pc, #612]	; (8001994 <HAL_GPIO_Init+0x2d4>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d85d      	bhi.n	80017ee <HAL_GPIO_Init+0x12e>
 8001732:	2b12      	cmp	r3, #18
 8001734:	d82a      	bhi.n	800178c <HAL_GPIO_Init+0xcc>
 8001736:	2b12      	cmp	r3, #18
 8001738:	d859      	bhi.n	80017ee <HAL_GPIO_Init+0x12e>
 800173a:	a201      	add	r2, pc, #4	; (adr r2, 8001740 <HAL_GPIO_Init+0x80>)
 800173c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001740:	080017bb 	.word	0x080017bb
 8001744:	08001795 	.word	0x08001795
 8001748:	080017a7 	.word	0x080017a7
 800174c:	080017e9 	.word	0x080017e9
 8001750:	080017ef 	.word	0x080017ef
 8001754:	080017ef 	.word	0x080017ef
 8001758:	080017ef 	.word	0x080017ef
 800175c:	080017ef 	.word	0x080017ef
 8001760:	080017ef 	.word	0x080017ef
 8001764:	080017ef 	.word	0x080017ef
 8001768:	080017ef 	.word	0x080017ef
 800176c:	080017ef 	.word	0x080017ef
 8001770:	080017ef 	.word	0x080017ef
 8001774:	080017ef 	.word	0x080017ef
 8001778:	080017ef 	.word	0x080017ef
 800177c:	080017ef 	.word	0x080017ef
 8001780:	080017ef 	.word	0x080017ef
 8001784:	0800179d 	.word	0x0800179d
 8001788:	080017b1 	.word	0x080017b1
 800178c:	4a82      	ldr	r2, [pc, #520]	; (8001998 <HAL_GPIO_Init+0x2d8>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d013      	beq.n	80017ba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001792:	e02c      	b.n	80017ee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	623b      	str	r3, [r7, #32]
          break;
 800179a:	e029      	b.n	80017f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	3304      	adds	r3, #4
 80017a2:	623b      	str	r3, [r7, #32]
          break;
 80017a4:	e024      	b.n	80017f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	68db      	ldr	r3, [r3, #12]
 80017aa:	3308      	adds	r3, #8
 80017ac:	623b      	str	r3, [r7, #32]
          break;
 80017ae:	e01f      	b.n	80017f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	330c      	adds	r3, #12
 80017b6:	623b      	str	r3, [r7, #32]
          break;
 80017b8:	e01a      	b.n	80017f0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d102      	bne.n	80017c8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80017c2:	2304      	movs	r3, #4
 80017c4:	623b      	str	r3, [r7, #32]
          break;
 80017c6:	e013      	b.n	80017f0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d105      	bne.n	80017dc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017d0:	2308      	movs	r3, #8
 80017d2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	69fa      	ldr	r2, [r7, #28]
 80017d8:	611a      	str	r2, [r3, #16]
          break;
 80017da:	e009      	b.n	80017f0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017dc:	2308      	movs	r3, #8
 80017de:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	69fa      	ldr	r2, [r7, #28]
 80017e4:	615a      	str	r2, [r3, #20]
          break;
 80017e6:	e003      	b.n	80017f0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80017e8:	2300      	movs	r3, #0
 80017ea:	623b      	str	r3, [r7, #32]
          break;
 80017ec:	e000      	b.n	80017f0 <HAL_GPIO_Init+0x130>
          break;
 80017ee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80017f0:	69bb      	ldr	r3, [r7, #24]
 80017f2:	2bff      	cmp	r3, #255	; 0xff
 80017f4:	d801      	bhi.n	80017fa <HAL_GPIO_Init+0x13a>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	e001      	b.n	80017fe <HAL_GPIO_Init+0x13e>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	3304      	adds	r3, #4
 80017fe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001800:	69bb      	ldr	r3, [r7, #24]
 8001802:	2bff      	cmp	r3, #255	; 0xff
 8001804:	d802      	bhi.n	800180c <HAL_GPIO_Init+0x14c>
 8001806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	e002      	b.n	8001812 <HAL_GPIO_Init+0x152>
 800180c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180e:	3b08      	subs	r3, #8
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	210f      	movs	r1, #15
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	fa01 f303 	lsl.w	r3, r1, r3
 8001820:	43db      	mvns	r3, r3
 8001822:	401a      	ands	r2, r3
 8001824:	6a39      	ldr	r1, [r7, #32]
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	fa01 f303 	lsl.w	r3, r1, r3
 800182c:	431a      	orrs	r2, r3
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800183a:	2b00      	cmp	r3, #0
 800183c:	f000 8090 	beq.w	8001960 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001840:	4b56      	ldr	r3, [pc, #344]	; (800199c <HAL_GPIO_Init+0x2dc>)
 8001842:	699b      	ldr	r3, [r3, #24]
 8001844:	4a55      	ldr	r2, [pc, #340]	; (800199c <HAL_GPIO_Init+0x2dc>)
 8001846:	f043 0301 	orr.w	r3, r3, #1
 800184a:	6193      	str	r3, [r2, #24]
 800184c:	4b53      	ldr	r3, [pc, #332]	; (800199c <HAL_GPIO_Init+0x2dc>)
 800184e:	699b      	ldr	r3, [r3, #24]
 8001850:	f003 0301 	and.w	r3, r3, #1
 8001854:	60bb      	str	r3, [r7, #8]
 8001856:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001858:	4a51      	ldr	r2, [pc, #324]	; (80019a0 <HAL_GPIO_Init+0x2e0>)
 800185a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185c:	089b      	lsrs	r3, r3, #2
 800185e:	3302      	adds	r3, #2
 8001860:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001864:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001868:	f003 0303 	and.w	r3, r3, #3
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	220f      	movs	r2, #15
 8001870:	fa02 f303 	lsl.w	r3, r2, r3
 8001874:	43db      	mvns	r3, r3
 8001876:	68fa      	ldr	r2, [r7, #12]
 8001878:	4013      	ands	r3, r2
 800187a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	4a49      	ldr	r2, [pc, #292]	; (80019a4 <HAL_GPIO_Init+0x2e4>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d00d      	beq.n	80018a0 <HAL_GPIO_Init+0x1e0>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	4a48      	ldr	r2, [pc, #288]	; (80019a8 <HAL_GPIO_Init+0x2e8>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d007      	beq.n	800189c <HAL_GPIO_Init+0x1dc>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	4a47      	ldr	r2, [pc, #284]	; (80019ac <HAL_GPIO_Init+0x2ec>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d101      	bne.n	8001898 <HAL_GPIO_Init+0x1d8>
 8001894:	2302      	movs	r3, #2
 8001896:	e004      	b.n	80018a2 <HAL_GPIO_Init+0x1e2>
 8001898:	2303      	movs	r3, #3
 800189a:	e002      	b.n	80018a2 <HAL_GPIO_Init+0x1e2>
 800189c:	2301      	movs	r3, #1
 800189e:	e000      	b.n	80018a2 <HAL_GPIO_Init+0x1e2>
 80018a0:	2300      	movs	r3, #0
 80018a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018a4:	f002 0203 	and.w	r2, r2, #3
 80018a8:	0092      	lsls	r2, r2, #2
 80018aa:	4093      	lsls	r3, r2
 80018ac:	68fa      	ldr	r2, [r7, #12]
 80018ae:	4313      	orrs	r3, r2
 80018b0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80018b2:	493b      	ldr	r1, [pc, #236]	; (80019a0 <HAL_GPIO_Init+0x2e0>)
 80018b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b6:	089b      	lsrs	r3, r3, #2
 80018b8:	3302      	adds	r3, #2
 80018ba:	68fa      	ldr	r2, [r7, #12]
 80018bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d006      	beq.n	80018da <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80018cc:	4b38      	ldr	r3, [pc, #224]	; (80019b0 <HAL_GPIO_Init+0x2f0>)
 80018ce:	689a      	ldr	r2, [r3, #8]
 80018d0:	4937      	ldr	r1, [pc, #220]	; (80019b0 <HAL_GPIO_Init+0x2f0>)
 80018d2:	69bb      	ldr	r3, [r7, #24]
 80018d4:	4313      	orrs	r3, r2
 80018d6:	608b      	str	r3, [r1, #8]
 80018d8:	e006      	b.n	80018e8 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80018da:	4b35      	ldr	r3, [pc, #212]	; (80019b0 <HAL_GPIO_Init+0x2f0>)
 80018dc:	689a      	ldr	r2, [r3, #8]
 80018de:	69bb      	ldr	r3, [r7, #24]
 80018e0:	43db      	mvns	r3, r3
 80018e2:	4933      	ldr	r1, [pc, #204]	; (80019b0 <HAL_GPIO_Init+0x2f0>)
 80018e4:	4013      	ands	r3, r2
 80018e6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d006      	beq.n	8001902 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80018f4:	4b2e      	ldr	r3, [pc, #184]	; (80019b0 <HAL_GPIO_Init+0x2f0>)
 80018f6:	68da      	ldr	r2, [r3, #12]
 80018f8:	492d      	ldr	r1, [pc, #180]	; (80019b0 <HAL_GPIO_Init+0x2f0>)
 80018fa:	69bb      	ldr	r3, [r7, #24]
 80018fc:	4313      	orrs	r3, r2
 80018fe:	60cb      	str	r3, [r1, #12]
 8001900:	e006      	b.n	8001910 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001902:	4b2b      	ldr	r3, [pc, #172]	; (80019b0 <HAL_GPIO_Init+0x2f0>)
 8001904:	68da      	ldr	r2, [r3, #12]
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	43db      	mvns	r3, r3
 800190a:	4929      	ldr	r1, [pc, #164]	; (80019b0 <HAL_GPIO_Init+0x2f0>)
 800190c:	4013      	ands	r3, r2
 800190e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001918:	2b00      	cmp	r3, #0
 800191a:	d006      	beq.n	800192a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800191c:	4b24      	ldr	r3, [pc, #144]	; (80019b0 <HAL_GPIO_Init+0x2f0>)
 800191e:	685a      	ldr	r2, [r3, #4]
 8001920:	4923      	ldr	r1, [pc, #140]	; (80019b0 <HAL_GPIO_Init+0x2f0>)
 8001922:	69bb      	ldr	r3, [r7, #24]
 8001924:	4313      	orrs	r3, r2
 8001926:	604b      	str	r3, [r1, #4]
 8001928:	e006      	b.n	8001938 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800192a:	4b21      	ldr	r3, [pc, #132]	; (80019b0 <HAL_GPIO_Init+0x2f0>)
 800192c:	685a      	ldr	r2, [r3, #4]
 800192e:	69bb      	ldr	r3, [r7, #24]
 8001930:	43db      	mvns	r3, r3
 8001932:	491f      	ldr	r1, [pc, #124]	; (80019b0 <HAL_GPIO_Init+0x2f0>)
 8001934:	4013      	ands	r3, r2
 8001936:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001940:	2b00      	cmp	r3, #0
 8001942:	d006      	beq.n	8001952 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001944:	4b1a      	ldr	r3, [pc, #104]	; (80019b0 <HAL_GPIO_Init+0x2f0>)
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	4919      	ldr	r1, [pc, #100]	; (80019b0 <HAL_GPIO_Init+0x2f0>)
 800194a:	69bb      	ldr	r3, [r7, #24]
 800194c:	4313      	orrs	r3, r2
 800194e:	600b      	str	r3, [r1, #0]
 8001950:	e006      	b.n	8001960 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001952:	4b17      	ldr	r3, [pc, #92]	; (80019b0 <HAL_GPIO_Init+0x2f0>)
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	43db      	mvns	r3, r3
 800195a:	4915      	ldr	r1, [pc, #84]	; (80019b0 <HAL_GPIO_Init+0x2f0>)
 800195c:	4013      	ands	r3, r2
 800195e:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001962:	3301      	adds	r3, #1
 8001964:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196c:	fa22 f303 	lsr.w	r3, r2, r3
 8001970:	2b00      	cmp	r3, #0
 8001972:	f47f aeaf 	bne.w	80016d4 <HAL_GPIO_Init+0x14>
  }
}
 8001976:	bf00      	nop
 8001978:	bf00      	nop
 800197a:	372c      	adds	r7, #44	; 0x2c
 800197c:	46bd      	mov	sp, r7
 800197e:	bc80      	pop	{r7}
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	10320000 	.word	0x10320000
 8001988:	10310000 	.word	0x10310000
 800198c:	10220000 	.word	0x10220000
 8001990:	10210000 	.word	0x10210000
 8001994:	10120000 	.word	0x10120000
 8001998:	10110000 	.word	0x10110000
 800199c:	40021000 	.word	0x40021000
 80019a0:	40010000 	.word	0x40010000
 80019a4:	40010800 	.word	0x40010800
 80019a8:	40010c00 	.word	0x40010c00
 80019ac:	40011000 	.word	0x40011000
 80019b0:	40010400 	.word	0x40010400

080019b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b085      	sub	sp, #20
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	460b      	mov	r3, r1
 80019be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	689a      	ldr	r2, [r3, #8]
 80019c4:	887b      	ldrh	r3, [r7, #2]
 80019c6:	4013      	ands	r3, r2
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d002      	beq.n	80019d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80019cc:	2301      	movs	r3, #1
 80019ce:	73fb      	strb	r3, [r7, #15]
 80019d0:	e001      	b.n	80019d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80019d2:	2300      	movs	r3, #0
 80019d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80019d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3714      	adds	r7, #20
 80019dc:	46bd      	mov	sp, r7
 80019de:	bc80      	pop	{r7}
 80019e0:	4770      	bx	lr

080019e2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019e2:	b480      	push	{r7}
 80019e4:	b083      	sub	sp, #12
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	6078      	str	r0, [r7, #4]
 80019ea:	460b      	mov	r3, r1
 80019ec:	807b      	strh	r3, [r7, #2]
 80019ee:	4613      	mov	r3, r2
 80019f0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019f2:	787b      	ldrb	r3, [r7, #1]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d003      	beq.n	8001a00 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019f8:	887a      	ldrh	r2, [r7, #2]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80019fe:	e003      	b.n	8001a08 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a00:	887b      	ldrh	r3, [r7, #2]
 8001a02:	041a      	lsls	r2, r3, #16
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	611a      	str	r2, [r3, #16]
}
 8001a08:	bf00      	nop
 8001a0a:	370c      	adds	r7, #12
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bc80      	pop	{r7}
 8001a10:	4770      	bx	lr

08001a12 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a12:	b480      	push	{r7}
 8001a14:	b085      	sub	sp, #20
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	6078      	str	r0, [r7, #4]
 8001a1a:	460b      	mov	r3, r1
 8001a1c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	68db      	ldr	r3, [r3, #12]
 8001a22:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a24:	887a      	ldrh	r2, [r7, #2]
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	4013      	ands	r3, r2
 8001a2a:	041a      	lsls	r2, r3, #16
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	43d9      	mvns	r1, r3
 8001a30:	887b      	ldrh	r3, [r7, #2]
 8001a32:	400b      	ands	r3, r1
 8001a34:	431a      	orrs	r2, r3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	611a      	str	r2, [r3, #16]
}
 8001a3a:	bf00      	nop
 8001a3c:	3714      	adds	r7, #20
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bc80      	pop	{r7}
 8001a42:	4770      	bx	lr

08001a44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b086      	sub	sp, #24
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d101      	bne.n	8001a56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e26c      	b.n	8001f30 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0301 	and.w	r3, r3, #1
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	f000 8087 	beq.w	8001b72 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a64:	4b92      	ldr	r3, [pc, #584]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f003 030c 	and.w	r3, r3, #12
 8001a6c:	2b04      	cmp	r3, #4
 8001a6e:	d00c      	beq.n	8001a8a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a70:	4b8f      	ldr	r3, [pc, #572]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f003 030c 	and.w	r3, r3, #12
 8001a78:	2b08      	cmp	r3, #8
 8001a7a:	d112      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x5e>
 8001a7c:	4b8c      	ldr	r3, [pc, #560]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a88:	d10b      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a8a:	4b89      	ldr	r3, [pc, #548]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d06c      	beq.n	8001b70 <HAL_RCC_OscConfig+0x12c>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d168      	bne.n	8001b70 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e246      	b.n	8001f30 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aaa:	d106      	bne.n	8001aba <HAL_RCC_OscConfig+0x76>
 8001aac:	4b80      	ldr	r3, [pc, #512]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a7f      	ldr	r2, [pc, #508]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001ab2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ab6:	6013      	str	r3, [r2, #0]
 8001ab8:	e02e      	b.n	8001b18 <HAL_RCC_OscConfig+0xd4>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d10c      	bne.n	8001adc <HAL_RCC_OscConfig+0x98>
 8001ac2:	4b7b      	ldr	r3, [pc, #492]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a7a      	ldr	r2, [pc, #488]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001ac8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001acc:	6013      	str	r3, [r2, #0]
 8001ace:	4b78      	ldr	r3, [pc, #480]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a77      	ldr	r2, [pc, #476]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001ad4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ad8:	6013      	str	r3, [r2, #0]
 8001ada:	e01d      	b.n	8001b18 <HAL_RCC_OscConfig+0xd4>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ae4:	d10c      	bne.n	8001b00 <HAL_RCC_OscConfig+0xbc>
 8001ae6:	4b72      	ldr	r3, [pc, #456]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a71      	ldr	r2, [pc, #452]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001aec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001af0:	6013      	str	r3, [r2, #0]
 8001af2:	4b6f      	ldr	r3, [pc, #444]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a6e      	ldr	r2, [pc, #440]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001af8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001afc:	6013      	str	r3, [r2, #0]
 8001afe:	e00b      	b.n	8001b18 <HAL_RCC_OscConfig+0xd4>
 8001b00:	4b6b      	ldr	r3, [pc, #428]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a6a      	ldr	r2, [pc, #424]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001b06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b0a:	6013      	str	r3, [r2, #0]
 8001b0c:	4b68      	ldr	r3, [pc, #416]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a67      	ldr	r2, [pc, #412]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001b12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b16:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d013      	beq.n	8001b48 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b20:	f7ff fcb6 	bl	8001490 <HAL_GetTick>
 8001b24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b26:	e008      	b.n	8001b3a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b28:	f7ff fcb2 	bl	8001490 <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	2b64      	cmp	r3, #100	; 0x64
 8001b34:	d901      	bls.n	8001b3a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e1fa      	b.n	8001f30 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b3a:	4b5d      	ldr	r3, [pc, #372]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d0f0      	beq.n	8001b28 <HAL_RCC_OscConfig+0xe4>
 8001b46:	e014      	b.n	8001b72 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b48:	f7ff fca2 	bl	8001490 <HAL_GetTick>
 8001b4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b4e:	e008      	b.n	8001b62 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b50:	f7ff fc9e 	bl	8001490 <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	2b64      	cmp	r3, #100	; 0x64
 8001b5c:	d901      	bls.n	8001b62 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e1e6      	b.n	8001f30 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b62:	4b53      	ldr	r3, [pc, #332]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d1f0      	bne.n	8001b50 <HAL_RCC_OscConfig+0x10c>
 8001b6e:	e000      	b.n	8001b72 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0302 	and.w	r3, r3, #2
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d063      	beq.n	8001c46 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b7e:	4b4c      	ldr	r3, [pc, #304]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f003 030c 	and.w	r3, r3, #12
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d00b      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b8a:	4b49      	ldr	r3, [pc, #292]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f003 030c 	and.w	r3, r3, #12
 8001b92:	2b08      	cmp	r3, #8
 8001b94:	d11c      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x18c>
 8001b96:	4b46      	ldr	r3, [pc, #280]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d116      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ba2:	4b43      	ldr	r3, [pc, #268]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0302 	and.w	r3, r3, #2
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d005      	beq.n	8001bba <HAL_RCC_OscConfig+0x176>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	691b      	ldr	r3, [r3, #16]
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d001      	beq.n	8001bba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e1ba      	b.n	8001f30 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bba:	4b3d      	ldr	r3, [pc, #244]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	695b      	ldr	r3, [r3, #20]
 8001bc6:	00db      	lsls	r3, r3, #3
 8001bc8:	4939      	ldr	r1, [pc, #228]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bce:	e03a      	b.n	8001c46 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	691b      	ldr	r3, [r3, #16]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d020      	beq.n	8001c1a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bd8:	4b36      	ldr	r3, [pc, #216]	; (8001cb4 <HAL_RCC_OscConfig+0x270>)
 8001bda:	2201      	movs	r2, #1
 8001bdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bde:	f7ff fc57 	bl	8001490 <HAL_GetTick>
 8001be2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001be4:	e008      	b.n	8001bf8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001be6:	f7ff fc53 	bl	8001490 <HAL_GetTick>
 8001bea:	4602      	mov	r2, r0
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d901      	bls.n	8001bf8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	e19b      	b.n	8001f30 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bf8:	4b2d      	ldr	r3, [pc, #180]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 0302 	and.w	r3, r3, #2
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d0f0      	beq.n	8001be6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c04:	4b2a      	ldr	r3, [pc, #168]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	695b      	ldr	r3, [r3, #20]
 8001c10:	00db      	lsls	r3, r3, #3
 8001c12:	4927      	ldr	r1, [pc, #156]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001c14:	4313      	orrs	r3, r2
 8001c16:	600b      	str	r3, [r1, #0]
 8001c18:	e015      	b.n	8001c46 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c1a:	4b26      	ldr	r3, [pc, #152]	; (8001cb4 <HAL_RCC_OscConfig+0x270>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c20:	f7ff fc36 	bl	8001490 <HAL_GetTick>
 8001c24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c26:	e008      	b.n	8001c3a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c28:	f7ff fc32 	bl	8001490 <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d901      	bls.n	8001c3a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e17a      	b.n	8001f30 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c3a:	4b1d      	ldr	r3, [pc, #116]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0302 	and.w	r3, r3, #2
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d1f0      	bne.n	8001c28 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0308 	and.w	r3, r3, #8
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d03a      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	699b      	ldr	r3, [r3, #24]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d019      	beq.n	8001c8e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c5a:	4b17      	ldr	r3, [pc, #92]	; (8001cb8 <HAL_RCC_OscConfig+0x274>)
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c60:	f7ff fc16 	bl	8001490 <HAL_GetTick>
 8001c64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c66:	e008      	b.n	8001c7a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c68:	f7ff fc12 	bl	8001490 <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	d901      	bls.n	8001c7a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c76:	2303      	movs	r3, #3
 8001c78:	e15a      	b.n	8001f30 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c7a:	4b0d      	ldr	r3, [pc, #52]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7e:	f003 0302 	and.w	r3, r3, #2
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d0f0      	beq.n	8001c68 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001c86:	2001      	movs	r0, #1
 8001c88:	f000 fa9a 	bl	80021c0 <RCC_Delay>
 8001c8c:	e01c      	b.n	8001cc8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c8e:	4b0a      	ldr	r3, [pc, #40]	; (8001cb8 <HAL_RCC_OscConfig+0x274>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c94:	f7ff fbfc 	bl	8001490 <HAL_GetTick>
 8001c98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c9a:	e00f      	b.n	8001cbc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c9c:	f7ff fbf8 	bl	8001490 <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d908      	bls.n	8001cbc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e140      	b.n	8001f30 <HAL_RCC_OscConfig+0x4ec>
 8001cae:	bf00      	nop
 8001cb0:	40021000 	.word	0x40021000
 8001cb4:	42420000 	.word	0x42420000
 8001cb8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cbc:	4b9e      	ldr	r3, [pc, #632]	; (8001f38 <HAL_RCC_OscConfig+0x4f4>)
 8001cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc0:	f003 0302 	and.w	r3, r3, #2
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d1e9      	bne.n	8001c9c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 0304 	and.w	r3, r3, #4
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	f000 80a6 	beq.w	8001e22 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cda:	4b97      	ldr	r3, [pc, #604]	; (8001f38 <HAL_RCC_OscConfig+0x4f4>)
 8001cdc:	69db      	ldr	r3, [r3, #28]
 8001cde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d10d      	bne.n	8001d02 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ce6:	4b94      	ldr	r3, [pc, #592]	; (8001f38 <HAL_RCC_OscConfig+0x4f4>)
 8001ce8:	69db      	ldr	r3, [r3, #28]
 8001cea:	4a93      	ldr	r2, [pc, #588]	; (8001f38 <HAL_RCC_OscConfig+0x4f4>)
 8001cec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cf0:	61d3      	str	r3, [r2, #28]
 8001cf2:	4b91      	ldr	r3, [pc, #580]	; (8001f38 <HAL_RCC_OscConfig+0x4f4>)
 8001cf4:	69db      	ldr	r3, [r3, #28]
 8001cf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cfa:	60bb      	str	r3, [r7, #8]
 8001cfc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d02:	4b8e      	ldr	r3, [pc, #568]	; (8001f3c <HAL_RCC_OscConfig+0x4f8>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d118      	bne.n	8001d40 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d0e:	4b8b      	ldr	r3, [pc, #556]	; (8001f3c <HAL_RCC_OscConfig+0x4f8>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a8a      	ldr	r2, [pc, #552]	; (8001f3c <HAL_RCC_OscConfig+0x4f8>)
 8001d14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d1a:	f7ff fbb9 	bl	8001490 <HAL_GetTick>
 8001d1e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d20:	e008      	b.n	8001d34 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d22:	f7ff fbb5 	bl	8001490 <HAL_GetTick>
 8001d26:	4602      	mov	r2, r0
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	1ad3      	subs	r3, r2, r3
 8001d2c:	2b64      	cmp	r3, #100	; 0x64
 8001d2e:	d901      	bls.n	8001d34 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d30:	2303      	movs	r3, #3
 8001d32:	e0fd      	b.n	8001f30 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d34:	4b81      	ldr	r3, [pc, #516]	; (8001f3c <HAL_RCC_OscConfig+0x4f8>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d0f0      	beq.n	8001d22 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d106      	bne.n	8001d56 <HAL_RCC_OscConfig+0x312>
 8001d48:	4b7b      	ldr	r3, [pc, #492]	; (8001f38 <HAL_RCC_OscConfig+0x4f4>)
 8001d4a:	6a1b      	ldr	r3, [r3, #32]
 8001d4c:	4a7a      	ldr	r2, [pc, #488]	; (8001f38 <HAL_RCC_OscConfig+0x4f4>)
 8001d4e:	f043 0301 	orr.w	r3, r3, #1
 8001d52:	6213      	str	r3, [r2, #32]
 8001d54:	e02d      	b.n	8001db2 <HAL_RCC_OscConfig+0x36e>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	68db      	ldr	r3, [r3, #12]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d10c      	bne.n	8001d78 <HAL_RCC_OscConfig+0x334>
 8001d5e:	4b76      	ldr	r3, [pc, #472]	; (8001f38 <HAL_RCC_OscConfig+0x4f4>)
 8001d60:	6a1b      	ldr	r3, [r3, #32]
 8001d62:	4a75      	ldr	r2, [pc, #468]	; (8001f38 <HAL_RCC_OscConfig+0x4f4>)
 8001d64:	f023 0301 	bic.w	r3, r3, #1
 8001d68:	6213      	str	r3, [r2, #32]
 8001d6a:	4b73      	ldr	r3, [pc, #460]	; (8001f38 <HAL_RCC_OscConfig+0x4f4>)
 8001d6c:	6a1b      	ldr	r3, [r3, #32]
 8001d6e:	4a72      	ldr	r2, [pc, #456]	; (8001f38 <HAL_RCC_OscConfig+0x4f4>)
 8001d70:	f023 0304 	bic.w	r3, r3, #4
 8001d74:	6213      	str	r3, [r2, #32]
 8001d76:	e01c      	b.n	8001db2 <HAL_RCC_OscConfig+0x36e>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	2b05      	cmp	r3, #5
 8001d7e:	d10c      	bne.n	8001d9a <HAL_RCC_OscConfig+0x356>
 8001d80:	4b6d      	ldr	r3, [pc, #436]	; (8001f38 <HAL_RCC_OscConfig+0x4f4>)
 8001d82:	6a1b      	ldr	r3, [r3, #32]
 8001d84:	4a6c      	ldr	r2, [pc, #432]	; (8001f38 <HAL_RCC_OscConfig+0x4f4>)
 8001d86:	f043 0304 	orr.w	r3, r3, #4
 8001d8a:	6213      	str	r3, [r2, #32]
 8001d8c:	4b6a      	ldr	r3, [pc, #424]	; (8001f38 <HAL_RCC_OscConfig+0x4f4>)
 8001d8e:	6a1b      	ldr	r3, [r3, #32]
 8001d90:	4a69      	ldr	r2, [pc, #420]	; (8001f38 <HAL_RCC_OscConfig+0x4f4>)
 8001d92:	f043 0301 	orr.w	r3, r3, #1
 8001d96:	6213      	str	r3, [r2, #32]
 8001d98:	e00b      	b.n	8001db2 <HAL_RCC_OscConfig+0x36e>
 8001d9a:	4b67      	ldr	r3, [pc, #412]	; (8001f38 <HAL_RCC_OscConfig+0x4f4>)
 8001d9c:	6a1b      	ldr	r3, [r3, #32]
 8001d9e:	4a66      	ldr	r2, [pc, #408]	; (8001f38 <HAL_RCC_OscConfig+0x4f4>)
 8001da0:	f023 0301 	bic.w	r3, r3, #1
 8001da4:	6213      	str	r3, [r2, #32]
 8001da6:	4b64      	ldr	r3, [pc, #400]	; (8001f38 <HAL_RCC_OscConfig+0x4f4>)
 8001da8:	6a1b      	ldr	r3, [r3, #32]
 8001daa:	4a63      	ldr	r2, [pc, #396]	; (8001f38 <HAL_RCC_OscConfig+0x4f4>)
 8001dac:	f023 0304 	bic.w	r3, r3, #4
 8001db0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	68db      	ldr	r3, [r3, #12]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d015      	beq.n	8001de6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dba:	f7ff fb69 	bl	8001490 <HAL_GetTick>
 8001dbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dc0:	e00a      	b.n	8001dd8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dc2:	f7ff fb65 	bl	8001490 <HAL_GetTick>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d901      	bls.n	8001dd8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	e0ab      	b.n	8001f30 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dd8:	4b57      	ldr	r3, [pc, #348]	; (8001f38 <HAL_RCC_OscConfig+0x4f4>)
 8001dda:	6a1b      	ldr	r3, [r3, #32]
 8001ddc:	f003 0302 	and.w	r3, r3, #2
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d0ee      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x37e>
 8001de4:	e014      	b.n	8001e10 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001de6:	f7ff fb53 	bl	8001490 <HAL_GetTick>
 8001dea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dec:	e00a      	b.n	8001e04 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dee:	f7ff fb4f 	bl	8001490 <HAL_GetTick>
 8001df2:	4602      	mov	r2, r0
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d901      	bls.n	8001e04 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e00:	2303      	movs	r3, #3
 8001e02:	e095      	b.n	8001f30 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e04:	4b4c      	ldr	r3, [pc, #304]	; (8001f38 <HAL_RCC_OscConfig+0x4f4>)
 8001e06:	6a1b      	ldr	r3, [r3, #32]
 8001e08:	f003 0302 	and.w	r3, r3, #2
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d1ee      	bne.n	8001dee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e10:	7dfb      	ldrb	r3, [r7, #23]
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d105      	bne.n	8001e22 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e16:	4b48      	ldr	r3, [pc, #288]	; (8001f38 <HAL_RCC_OscConfig+0x4f4>)
 8001e18:	69db      	ldr	r3, [r3, #28]
 8001e1a:	4a47      	ldr	r2, [pc, #284]	; (8001f38 <HAL_RCC_OscConfig+0x4f4>)
 8001e1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e20:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	69db      	ldr	r3, [r3, #28]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	f000 8081 	beq.w	8001f2e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e2c:	4b42      	ldr	r3, [pc, #264]	; (8001f38 <HAL_RCC_OscConfig+0x4f4>)
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f003 030c 	and.w	r3, r3, #12
 8001e34:	2b08      	cmp	r3, #8
 8001e36:	d061      	beq.n	8001efc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	69db      	ldr	r3, [r3, #28]
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	d146      	bne.n	8001ece <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e40:	4b3f      	ldr	r3, [pc, #252]	; (8001f40 <HAL_RCC_OscConfig+0x4fc>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e46:	f7ff fb23 	bl	8001490 <HAL_GetTick>
 8001e4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e4c:	e008      	b.n	8001e60 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e4e:	f7ff fb1f 	bl	8001490 <HAL_GetTick>
 8001e52:	4602      	mov	r2, r0
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	2b02      	cmp	r3, #2
 8001e5a:	d901      	bls.n	8001e60 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	e067      	b.n	8001f30 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e60:	4b35      	ldr	r3, [pc, #212]	; (8001f38 <HAL_RCC_OscConfig+0x4f4>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d1f0      	bne.n	8001e4e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6a1b      	ldr	r3, [r3, #32]
 8001e70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e74:	d108      	bne.n	8001e88 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e76:	4b30      	ldr	r3, [pc, #192]	; (8001f38 <HAL_RCC_OscConfig+0x4f4>)
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	492d      	ldr	r1, [pc, #180]	; (8001f38 <HAL_RCC_OscConfig+0x4f4>)
 8001e84:	4313      	orrs	r3, r2
 8001e86:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e88:	4b2b      	ldr	r3, [pc, #172]	; (8001f38 <HAL_RCC_OscConfig+0x4f4>)
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6a19      	ldr	r1, [r3, #32]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e98:	430b      	orrs	r3, r1
 8001e9a:	4927      	ldr	r1, [pc, #156]	; (8001f38 <HAL_RCC_OscConfig+0x4f4>)
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ea0:	4b27      	ldr	r3, [pc, #156]	; (8001f40 <HAL_RCC_OscConfig+0x4fc>)
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea6:	f7ff faf3 	bl	8001490 <HAL_GetTick>
 8001eaa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001eac:	e008      	b.n	8001ec0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eae:	f7ff faef 	bl	8001490 <HAL_GetTick>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	2b02      	cmp	r3, #2
 8001eba:	d901      	bls.n	8001ec0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	e037      	b.n	8001f30 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ec0:	4b1d      	ldr	r3, [pc, #116]	; (8001f38 <HAL_RCC_OscConfig+0x4f4>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d0f0      	beq.n	8001eae <HAL_RCC_OscConfig+0x46a>
 8001ecc:	e02f      	b.n	8001f2e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ece:	4b1c      	ldr	r3, [pc, #112]	; (8001f40 <HAL_RCC_OscConfig+0x4fc>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed4:	f7ff fadc 	bl	8001490 <HAL_GetTick>
 8001ed8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eda:	e008      	b.n	8001eee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001edc:	f7ff fad8 	bl	8001490 <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d901      	bls.n	8001eee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e020      	b.n	8001f30 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eee:	4b12      	ldr	r3, [pc, #72]	; (8001f38 <HAL_RCC_OscConfig+0x4f4>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d1f0      	bne.n	8001edc <HAL_RCC_OscConfig+0x498>
 8001efa:	e018      	b.n	8001f2e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	69db      	ldr	r3, [r3, #28]
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d101      	bne.n	8001f08 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e013      	b.n	8001f30 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f08:	4b0b      	ldr	r3, [pc, #44]	; (8001f38 <HAL_RCC_OscConfig+0x4f4>)
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6a1b      	ldr	r3, [r3, #32]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d106      	bne.n	8001f2a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d001      	beq.n	8001f2e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e000      	b.n	8001f30 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001f2e:	2300      	movs	r3, #0
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3718      	adds	r7, #24
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	40021000 	.word	0x40021000
 8001f3c:	40007000 	.word	0x40007000
 8001f40:	42420060 	.word	0x42420060

08001f44 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d101      	bne.n	8001f58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e0d0      	b.n	80020fa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f58:	4b6a      	ldr	r3, [pc, #424]	; (8002104 <HAL_RCC_ClockConfig+0x1c0>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 0307 	and.w	r3, r3, #7
 8001f60:	683a      	ldr	r2, [r7, #0]
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d910      	bls.n	8001f88 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f66:	4b67      	ldr	r3, [pc, #412]	; (8002104 <HAL_RCC_ClockConfig+0x1c0>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f023 0207 	bic.w	r2, r3, #7
 8001f6e:	4965      	ldr	r1, [pc, #404]	; (8002104 <HAL_RCC_ClockConfig+0x1c0>)
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f76:	4b63      	ldr	r3, [pc, #396]	; (8002104 <HAL_RCC_ClockConfig+0x1c0>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0307 	and.w	r3, r3, #7
 8001f7e:	683a      	ldr	r2, [r7, #0]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d001      	beq.n	8001f88 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e0b8      	b.n	80020fa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0302 	and.w	r3, r3, #2
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d020      	beq.n	8001fd6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0304 	and.w	r3, r3, #4
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d005      	beq.n	8001fac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fa0:	4b59      	ldr	r3, [pc, #356]	; (8002108 <HAL_RCC_ClockConfig+0x1c4>)
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	4a58      	ldr	r2, [pc, #352]	; (8002108 <HAL_RCC_ClockConfig+0x1c4>)
 8001fa6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001faa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0308 	and.w	r3, r3, #8
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d005      	beq.n	8001fc4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fb8:	4b53      	ldr	r3, [pc, #332]	; (8002108 <HAL_RCC_ClockConfig+0x1c4>)
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	4a52      	ldr	r2, [pc, #328]	; (8002108 <HAL_RCC_ClockConfig+0x1c4>)
 8001fbe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001fc2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fc4:	4b50      	ldr	r3, [pc, #320]	; (8002108 <HAL_RCC_ClockConfig+0x1c4>)
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	494d      	ldr	r1, [pc, #308]	; (8002108 <HAL_RCC_ClockConfig+0x1c4>)
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0301 	and.w	r3, r3, #1
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d040      	beq.n	8002064 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d107      	bne.n	8001ffa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fea:	4b47      	ldr	r3, [pc, #284]	; (8002108 <HAL_RCC_ClockConfig+0x1c4>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d115      	bne.n	8002022 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e07f      	b.n	80020fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d107      	bne.n	8002012 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002002:	4b41      	ldr	r3, [pc, #260]	; (8002108 <HAL_RCC_ClockConfig+0x1c4>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d109      	bne.n	8002022 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e073      	b.n	80020fa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002012:	4b3d      	ldr	r3, [pc, #244]	; (8002108 <HAL_RCC_ClockConfig+0x1c4>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0302 	and.w	r3, r3, #2
 800201a:	2b00      	cmp	r3, #0
 800201c:	d101      	bne.n	8002022 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e06b      	b.n	80020fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002022:	4b39      	ldr	r3, [pc, #228]	; (8002108 <HAL_RCC_ClockConfig+0x1c4>)
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f023 0203 	bic.w	r2, r3, #3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	4936      	ldr	r1, [pc, #216]	; (8002108 <HAL_RCC_ClockConfig+0x1c4>)
 8002030:	4313      	orrs	r3, r2
 8002032:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002034:	f7ff fa2c 	bl	8001490 <HAL_GetTick>
 8002038:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800203a:	e00a      	b.n	8002052 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800203c:	f7ff fa28 	bl	8001490 <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	f241 3288 	movw	r2, #5000	; 0x1388
 800204a:	4293      	cmp	r3, r2
 800204c:	d901      	bls.n	8002052 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e053      	b.n	80020fa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002052:	4b2d      	ldr	r3, [pc, #180]	; (8002108 <HAL_RCC_ClockConfig+0x1c4>)
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	f003 020c 	and.w	r2, r3, #12
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	429a      	cmp	r2, r3
 8002062:	d1eb      	bne.n	800203c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002064:	4b27      	ldr	r3, [pc, #156]	; (8002104 <HAL_RCC_ClockConfig+0x1c0>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0307 	and.w	r3, r3, #7
 800206c:	683a      	ldr	r2, [r7, #0]
 800206e:	429a      	cmp	r2, r3
 8002070:	d210      	bcs.n	8002094 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002072:	4b24      	ldr	r3, [pc, #144]	; (8002104 <HAL_RCC_ClockConfig+0x1c0>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f023 0207 	bic.w	r2, r3, #7
 800207a:	4922      	ldr	r1, [pc, #136]	; (8002104 <HAL_RCC_ClockConfig+0x1c0>)
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	4313      	orrs	r3, r2
 8002080:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002082:	4b20      	ldr	r3, [pc, #128]	; (8002104 <HAL_RCC_ClockConfig+0x1c0>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0307 	and.w	r3, r3, #7
 800208a:	683a      	ldr	r2, [r7, #0]
 800208c:	429a      	cmp	r2, r3
 800208e:	d001      	beq.n	8002094 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e032      	b.n	80020fa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0304 	and.w	r3, r3, #4
 800209c:	2b00      	cmp	r3, #0
 800209e:	d008      	beq.n	80020b2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020a0:	4b19      	ldr	r3, [pc, #100]	; (8002108 <HAL_RCC_ClockConfig+0x1c4>)
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	4916      	ldr	r1, [pc, #88]	; (8002108 <HAL_RCC_ClockConfig+0x1c4>)
 80020ae:	4313      	orrs	r3, r2
 80020b0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0308 	and.w	r3, r3, #8
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d009      	beq.n	80020d2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80020be:	4b12      	ldr	r3, [pc, #72]	; (8002108 <HAL_RCC_ClockConfig+0x1c4>)
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	691b      	ldr	r3, [r3, #16]
 80020ca:	00db      	lsls	r3, r3, #3
 80020cc:	490e      	ldr	r1, [pc, #56]	; (8002108 <HAL_RCC_ClockConfig+0x1c4>)
 80020ce:	4313      	orrs	r3, r2
 80020d0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80020d2:	f000 f821 	bl	8002118 <HAL_RCC_GetSysClockFreq>
 80020d6:	4602      	mov	r2, r0
 80020d8:	4b0b      	ldr	r3, [pc, #44]	; (8002108 <HAL_RCC_ClockConfig+0x1c4>)
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	091b      	lsrs	r3, r3, #4
 80020de:	f003 030f 	and.w	r3, r3, #15
 80020e2:	490a      	ldr	r1, [pc, #40]	; (800210c <HAL_RCC_ClockConfig+0x1c8>)
 80020e4:	5ccb      	ldrb	r3, [r1, r3]
 80020e6:	fa22 f303 	lsr.w	r3, r2, r3
 80020ea:	4a09      	ldr	r2, [pc, #36]	; (8002110 <HAL_RCC_ClockConfig+0x1cc>)
 80020ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80020ee:	4b09      	ldr	r3, [pc, #36]	; (8002114 <HAL_RCC_ClockConfig+0x1d0>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7ff f98a 	bl	800140c <HAL_InitTick>

  return HAL_OK;
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3710      	adds	r7, #16
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	40022000 	.word	0x40022000
 8002108:	40021000 	.word	0x40021000
 800210c:	08002a24 	.word	0x08002a24
 8002110:	2000000c 	.word	0x2000000c
 8002114:	20000020 	.word	0x20000020

08002118 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002118:	b480      	push	{r7}
 800211a:	b087      	sub	sp, #28
 800211c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800211e:	2300      	movs	r3, #0
 8002120:	60fb      	str	r3, [r7, #12]
 8002122:	2300      	movs	r3, #0
 8002124:	60bb      	str	r3, [r7, #8]
 8002126:	2300      	movs	r3, #0
 8002128:	617b      	str	r3, [r7, #20]
 800212a:	2300      	movs	r3, #0
 800212c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800212e:	2300      	movs	r3, #0
 8002130:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002132:	4b1e      	ldr	r3, [pc, #120]	; (80021ac <HAL_RCC_GetSysClockFreq+0x94>)
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	f003 030c 	and.w	r3, r3, #12
 800213e:	2b04      	cmp	r3, #4
 8002140:	d002      	beq.n	8002148 <HAL_RCC_GetSysClockFreq+0x30>
 8002142:	2b08      	cmp	r3, #8
 8002144:	d003      	beq.n	800214e <HAL_RCC_GetSysClockFreq+0x36>
 8002146:	e027      	b.n	8002198 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002148:	4b19      	ldr	r3, [pc, #100]	; (80021b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800214a:	613b      	str	r3, [r7, #16]
      break;
 800214c:	e027      	b.n	800219e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	0c9b      	lsrs	r3, r3, #18
 8002152:	f003 030f 	and.w	r3, r3, #15
 8002156:	4a17      	ldr	r2, [pc, #92]	; (80021b4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002158:	5cd3      	ldrb	r3, [r2, r3]
 800215a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d010      	beq.n	8002188 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002166:	4b11      	ldr	r3, [pc, #68]	; (80021ac <HAL_RCC_GetSysClockFreq+0x94>)
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	0c5b      	lsrs	r3, r3, #17
 800216c:	f003 0301 	and.w	r3, r3, #1
 8002170:	4a11      	ldr	r2, [pc, #68]	; (80021b8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002172:	5cd3      	ldrb	r3, [r2, r3]
 8002174:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a0d      	ldr	r2, [pc, #52]	; (80021b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800217a:	fb02 f203 	mul.w	r2, r2, r3
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	fbb2 f3f3 	udiv	r3, r2, r3
 8002184:	617b      	str	r3, [r7, #20]
 8002186:	e004      	b.n	8002192 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	4a0c      	ldr	r2, [pc, #48]	; (80021bc <HAL_RCC_GetSysClockFreq+0xa4>)
 800218c:	fb02 f303 	mul.w	r3, r2, r3
 8002190:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	613b      	str	r3, [r7, #16]
      break;
 8002196:	e002      	b.n	800219e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002198:	4b05      	ldr	r3, [pc, #20]	; (80021b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800219a:	613b      	str	r3, [r7, #16]
      break;
 800219c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800219e:	693b      	ldr	r3, [r7, #16]
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	371c      	adds	r7, #28
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bc80      	pop	{r7}
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	40021000 	.word	0x40021000
 80021b0:	007a1200 	.word	0x007a1200
 80021b4:	08002a34 	.word	0x08002a34
 80021b8:	08002a44 	.word	0x08002a44
 80021bc:	003d0900 	.word	0x003d0900

080021c0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b085      	sub	sp, #20
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80021c8:	4b0a      	ldr	r3, [pc, #40]	; (80021f4 <RCC_Delay+0x34>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a0a      	ldr	r2, [pc, #40]	; (80021f8 <RCC_Delay+0x38>)
 80021ce:	fba2 2303 	umull	r2, r3, r2, r3
 80021d2:	0a5b      	lsrs	r3, r3, #9
 80021d4:	687a      	ldr	r2, [r7, #4]
 80021d6:	fb02 f303 	mul.w	r3, r2, r3
 80021da:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80021dc:	bf00      	nop
  }
  while (Delay --);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	1e5a      	subs	r2, r3, #1
 80021e2:	60fa      	str	r2, [r7, #12]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d1f9      	bne.n	80021dc <RCC_Delay+0x1c>
}
 80021e8:	bf00      	nop
 80021ea:	bf00      	nop
 80021ec:	3714      	adds	r7, #20
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bc80      	pop	{r7}
 80021f2:	4770      	bx	lr
 80021f4:	2000000c 	.word	0x2000000c
 80021f8:	10624dd3 	.word	0x10624dd3

080021fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d101      	bne.n	800220e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e041      	b.n	8002292 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002214:	b2db      	uxtb	r3, r3
 8002216:	2b00      	cmp	r3, #0
 8002218:	d106      	bne.n	8002228 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2200      	movs	r2, #0
 800221e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f7fe fe92 	bl	8000f4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2202      	movs	r2, #2
 800222c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	3304      	adds	r3, #4
 8002238:	4619      	mov	r1, r3
 800223a:	4610      	mov	r0, r2
 800223c:	f000 fa56 	bl	80026ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2201      	movs	r2, #1
 8002244:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2201      	movs	r2, #1
 800224c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2201      	movs	r2, #1
 8002254:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2201      	movs	r2, #1
 800225c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2201      	movs	r2, #1
 8002264:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2201      	movs	r2, #1
 800226c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2201      	movs	r2, #1
 8002274:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2201      	movs	r2, #1
 800227c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2201      	movs	r2, #1
 8002284:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2201      	movs	r2, #1
 800228c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002290:	2300      	movs	r3, #0
}
 8002292:	4618      	mov	r0, r3
 8002294:	3708      	adds	r7, #8
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
	...

0800229c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800229c:	b480      	push	{r7}
 800229e:	b085      	sub	sp, #20
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d001      	beq.n	80022b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e035      	b.n	8002320 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2202      	movs	r2, #2
 80022b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	68da      	ldr	r2, [r3, #12]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f042 0201 	orr.w	r2, r2, #1
 80022ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a16      	ldr	r2, [pc, #88]	; (800232c <HAL_TIM_Base_Start_IT+0x90>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d009      	beq.n	80022ea <HAL_TIM_Base_Start_IT+0x4e>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022de:	d004      	beq.n	80022ea <HAL_TIM_Base_Start_IT+0x4e>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a12      	ldr	r2, [pc, #72]	; (8002330 <HAL_TIM_Base_Start_IT+0x94>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d111      	bne.n	800230e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	f003 0307 	and.w	r3, r3, #7
 80022f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2b06      	cmp	r3, #6
 80022fa:	d010      	beq.n	800231e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f042 0201 	orr.w	r2, r2, #1
 800230a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800230c:	e007      	b.n	800231e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f042 0201 	orr.w	r2, r2, #1
 800231c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800231e:	2300      	movs	r3, #0
}
 8002320:	4618      	mov	r0, r3
 8002322:	3714      	adds	r7, #20
 8002324:	46bd      	mov	sp, r7
 8002326:	bc80      	pop	{r7}
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	40012c00 	.word	0x40012c00
 8002330:	40000400 	.word	0x40000400

08002334 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	68db      	ldr	r3, [r3, #12]
 8002342:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	691b      	ldr	r3, [r3, #16]
 800234a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	f003 0302 	and.w	r3, r3, #2
 8002352:	2b00      	cmp	r3, #0
 8002354:	d020      	beq.n	8002398 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	f003 0302 	and.w	r3, r3, #2
 800235c:	2b00      	cmp	r3, #0
 800235e:	d01b      	beq.n	8002398 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f06f 0202 	mvn.w	r2, #2
 8002368:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2201      	movs	r2, #1
 800236e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	699b      	ldr	r3, [r3, #24]
 8002376:	f003 0303 	and.w	r3, r3, #3
 800237a:	2b00      	cmp	r3, #0
 800237c:	d003      	beq.n	8002386 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f000 f998 	bl	80026b4 <HAL_TIM_IC_CaptureCallback>
 8002384:	e005      	b.n	8002392 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f000 f98b 	bl	80026a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	f000 f99a 	bl	80026c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2200      	movs	r2, #0
 8002396:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	f003 0304 	and.w	r3, r3, #4
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d020      	beq.n	80023e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	f003 0304 	and.w	r3, r3, #4
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d01b      	beq.n	80023e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f06f 0204 	mvn.w	r2, #4
 80023b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2202      	movs	r2, #2
 80023ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	699b      	ldr	r3, [r3, #24]
 80023c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d003      	beq.n	80023d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f000 f972 	bl	80026b4 <HAL_TIM_IC_CaptureCallback>
 80023d0:	e005      	b.n	80023de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f000 f965 	bl	80026a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f000 f974 	bl	80026c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	f003 0308 	and.w	r3, r3, #8
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d020      	beq.n	8002430 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	f003 0308 	and.w	r3, r3, #8
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d01b      	beq.n	8002430 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f06f 0208 	mvn.w	r2, #8
 8002400:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2204      	movs	r2, #4
 8002406:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	69db      	ldr	r3, [r3, #28]
 800240e:	f003 0303 	and.w	r3, r3, #3
 8002412:	2b00      	cmp	r3, #0
 8002414:	d003      	beq.n	800241e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f000 f94c 	bl	80026b4 <HAL_TIM_IC_CaptureCallback>
 800241c:	e005      	b.n	800242a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f000 f93f 	bl	80026a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f000 f94e 	bl	80026c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2200      	movs	r2, #0
 800242e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	f003 0310 	and.w	r3, r3, #16
 8002436:	2b00      	cmp	r3, #0
 8002438:	d020      	beq.n	800247c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	f003 0310 	and.w	r3, r3, #16
 8002440:	2b00      	cmp	r3, #0
 8002442:	d01b      	beq.n	800247c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f06f 0210 	mvn.w	r2, #16
 800244c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2208      	movs	r2, #8
 8002452:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	69db      	ldr	r3, [r3, #28]
 800245a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800245e:	2b00      	cmp	r3, #0
 8002460:	d003      	beq.n	800246a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f000 f926 	bl	80026b4 <HAL_TIM_IC_CaptureCallback>
 8002468:	e005      	b.n	8002476 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f000 f919 	bl	80026a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f000 f928 	bl	80026c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2200      	movs	r2, #0
 800247a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	f003 0301 	and.w	r3, r3, #1
 8002482:	2b00      	cmp	r3, #0
 8002484:	d00c      	beq.n	80024a0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	f003 0301 	and.w	r3, r3, #1
 800248c:	2b00      	cmp	r3, #0
 800248e:	d007      	beq.n	80024a0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f06f 0201 	mvn.w	r2, #1
 8002498:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f7fe fa4e 	bl	800093c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d00c      	beq.n	80024c4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d007      	beq.n	80024c4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80024bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f000 fa6f 	bl	80029a2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d00c      	beq.n	80024e8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d007      	beq.n	80024e8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80024e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f000 f8f8 	bl	80026d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	f003 0320 	and.w	r3, r3, #32
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d00c      	beq.n	800250c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	f003 0320 	and.w	r3, r3, #32
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d007      	beq.n	800250c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f06f 0220 	mvn.w	r2, #32
 8002504:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f000 fa42 	bl	8002990 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800250c:	bf00      	nop
 800250e:	3710      	adds	r7, #16
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}

08002514 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800251e:	2300      	movs	r3, #0
 8002520:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002528:	2b01      	cmp	r3, #1
 800252a:	d101      	bne.n	8002530 <HAL_TIM_ConfigClockSource+0x1c>
 800252c:	2302      	movs	r3, #2
 800252e:	e0b4      	b.n	800269a <HAL_TIM_ConfigClockSource+0x186>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2201      	movs	r2, #1
 8002534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2202      	movs	r2, #2
 800253c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800254e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002556:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	68ba      	ldr	r2, [r7, #8]
 800255e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002568:	d03e      	beq.n	80025e8 <HAL_TIM_ConfigClockSource+0xd4>
 800256a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800256e:	f200 8087 	bhi.w	8002680 <HAL_TIM_ConfigClockSource+0x16c>
 8002572:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002576:	f000 8086 	beq.w	8002686 <HAL_TIM_ConfigClockSource+0x172>
 800257a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800257e:	d87f      	bhi.n	8002680 <HAL_TIM_ConfigClockSource+0x16c>
 8002580:	2b70      	cmp	r3, #112	; 0x70
 8002582:	d01a      	beq.n	80025ba <HAL_TIM_ConfigClockSource+0xa6>
 8002584:	2b70      	cmp	r3, #112	; 0x70
 8002586:	d87b      	bhi.n	8002680 <HAL_TIM_ConfigClockSource+0x16c>
 8002588:	2b60      	cmp	r3, #96	; 0x60
 800258a:	d050      	beq.n	800262e <HAL_TIM_ConfigClockSource+0x11a>
 800258c:	2b60      	cmp	r3, #96	; 0x60
 800258e:	d877      	bhi.n	8002680 <HAL_TIM_ConfigClockSource+0x16c>
 8002590:	2b50      	cmp	r3, #80	; 0x50
 8002592:	d03c      	beq.n	800260e <HAL_TIM_ConfigClockSource+0xfa>
 8002594:	2b50      	cmp	r3, #80	; 0x50
 8002596:	d873      	bhi.n	8002680 <HAL_TIM_ConfigClockSource+0x16c>
 8002598:	2b40      	cmp	r3, #64	; 0x40
 800259a:	d058      	beq.n	800264e <HAL_TIM_ConfigClockSource+0x13a>
 800259c:	2b40      	cmp	r3, #64	; 0x40
 800259e:	d86f      	bhi.n	8002680 <HAL_TIM_ConfigClockSource+0x16c>
 80025a0:	2b30      	cmp	r3, #48	; 0x30
 80025a2:	d064      	beq.n	800266e <HAL_TIM_ConfigClockSource+0x15a>
 80025a4:	2b30      	cmp	r3, #48	; 0x30
 80025a6:	d86b      	bhi.n	8002680 <HAL_TIM_ConfigClockSource+0x16c>
 80025a8:	2b20      	cmp	r3, #32
 80025aa:	d060      	beq.n	800266e <HAL_TIM_ConfigClockSource+0x15a>
 80025ac:	2b20      	cmp	r3, #32
 80025ae:	d867      	bhi.n	8002680 <HAL_TIM_ConfigClockSource+0x16c>
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d05c      	beq.n	800266e <HAL_TIM_ConfigClockSource+0x15a>
 80025b4:	2b10      	cmp	r3, #16
 80025b6:	d05a      	beq.n	800266e <HAL_TIM_ConfigClockSource+0x15a>
 80025b8:	e062      	b.n	8002680 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6818      	ldr	r0, [r3, #0]
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	6899      	ldr	r1, [r3, #8]
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	685a      	ldr	r2, [r3, #4]
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	68db      	ldr	r3, [r3, #12]
 80025ca:	f000 f96a 	bl	80028a2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80025dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	68ba      	ldr	r2, [r7, #8]
 80025e4:	609a      	str	r2, [r3, #8]
      break;
 80025e6:	e04f      	b.n	8002688 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6818      	ldr	r0, [r3, #0]
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	6899      	ldr	r1, [r3, #8]
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	685a      	ldr	r2, [r3, #4]
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	f000 f953 	bl	80028a2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	689a      	ldr	r2, [r3, #8]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800260a:	609a      	str	r2, [r3, #8]
      break;
 800260c:	e03c      	b.n	8002688 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6818      	ldr	r0, [r3, #0]
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	6859      	ldr	r1, [r3, #4]
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	461a      	mov	r2, r3
 800261c:	f000 f8ca 	bl	80027b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	2150      	movs	r1, #80	; 0x50
 8002626:	4618      	mov	r0, r3
 8002628:	f000 f921 	bl	800286e <TIM_ITRx_SetConfig>
      break;
 800262c:	e02c      	b.n	8002688 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6818      	ldr	r0, [r3, #0]
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	6859      	ldr	r1, [r3, #4]
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	461a      	mov	r2, r3
 800263c:	f000 f8e8 	bl	8002810 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2160      	movs	r1, #96	; 0x60
 8002646:	4618      	mov	r0, r3
 8002648:	f000 f911 	bl	800286e <TIM_ITRx_SetConfig>
      break;
 800264c:	e01c      	b.n	8002688 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6818      	ldr	r0, [r3, #0]
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	6859      	ldr	r1, [r3, #4]
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	461a      	mov	r2, r3
 800265c:	f000 f8aa 	bl	80027b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2140      	movs	r1, #64	; 0x40
 8002666:	4618      	mov	r0, r3
 8002668:	f000 f901 	bl	800286e <TIM_ITRx_SetConfig>
      break;
 800266c:	e00c      	b.n	8002688 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4619      	mov	r1, r3
 8002678:	4610      	mov	r0, r2
 800267a:	f000 f8f8 	bl	800286e <TIM_ITRx_SetConfig>
      break;
 800267e:	e003      	b.n	8002688 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	73fb      	strb	r3, [r7, #15]
      break;
 8002684:	e000      	b.n	8002688 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002686:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2201      	movs	r2, #1
 800268c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002698:	7bfb      	ldrb	r3, [r7, #15]
}
 800269a:	4618      	mov	r0, r3
 800269c:	3710      	adds	r7, #16
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}

080026a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026a2:	b480      	push	{r7}
 80026a4:	b083      	sub	sp, #12
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80026aa:	bf00      	nop
 80026ac:	370c      	adds	r7, #12
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bc80      	pop	{r7}
 80026b2:	4770      	bx	lr

080026b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80026bc:	bf00      	nop
 80026be:	370c      	adds	r7, #12
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bc80      	pop	{r7}
 80026c4:	4770      	bx	lr

080026c6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80026c6:	b480      	push	{r7}
 80026c8:	b083      	sub	sp, #12
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80026ce:	bf00      	nop
 80026d0:	370c      	adds	r7, #12
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bc80      	pop	{r7}
 80026d6:	4770      	bx	lr

080026d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80026e0:	bf00      	nop
 80026e2:	370c      	adds	r7, #12
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bc80      	pop	{r7}
 80026e8:	4770      	bx	lr
	...

080026ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b085      	sub	sp, #20
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	4a2b      	ldr	r2, [pc, #172]	; (80027ac <TIM_Base_SetConfig+0xc0>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d007      	beq.n	8002714 <TIM_Base_SetConfig+0x28>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800270a:	d003      	beq.n	8002714 <TIM_Base_SetConfig+0x28>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	4a28      	ldr	r2, [pc, #160]	; (80027b0 <TIM_Base_SetConfig+0xc4>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d108      	bne.n	8002726 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800271a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	68fa      	ldr	r2, [r7, #12]
 8002722:	4313      	orrs	r3, r2
 8002724:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a20      	ldr	r2, [pc, #128]	; (80027ac <TIM_Base_SetConfig+0xc0>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d007      	beq.n	800273e <TIM_Base_SetConfig+0x52>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002734:	d003      	beq.n	800273e <TIM_Base_SetConfig+0x52>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a1d      	ldr	r2, [pc, #116]	; (80027b0 <TIM_Base_SetConfig+0xc4>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d108      	bne.n	8002750 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002744:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	68fa      	ldr	r2, [r7, #12]
 800274c:	4313      	orrs	r3, r2
 800274e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	695b      	ldr	r3, [r3, #20]
 800275a:	4313      	orrs	r3, r2
 800275c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	68fa      	ldr	r2, [r7, #12]
 8002762:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	689a      	ldr	r2, [r3, #8]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	4a0d      	ldr	r2, [pc, #52]	; (80027ac <TIM_Base_SetConfig+0xc0>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d103      	bne.n	8002784 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	691a      	ldr	r2, [r3, #16]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2201      	movs	r2, #1
 8002788:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	691b      	ldr	r3, [r3, #16]
 800278e:	f003 0301 	and.w	r3, r3, #1
 8002792:	2b00      	cmp	r3, #0
 8002794:	d005      	beq.n	80027a2 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	691b      	ldr	r3, [r3, #16]
 800279a:	f023 0201 	bic.w	r2, r3, #1
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	611a      	str	r2, [r3, #16]
  }
}
 80027a2:	bf00      	nop
 80027a4:	3714      	adds	r7, #20
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bc80      	pop	{r7}
 80027aa:	4770      	bx	lr
 80027ac:	40012c00 	.word	0x40012c00
 80027b0:	40000400 	.word	0x40000400

080027b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b087      	sub	sp, #28
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	60f8      	str	r0, [r7, #12]
 80027bc:	60b9      	str	r1, [r7, #8]
 80027be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6a1b      	ldr	r3, [r3, #32]
 80027c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	6a1b      	ldr	r3, [r3, #32]
 80027ca:	f023 0201 	bic.w	r2, r3, #1
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	699b      	ldr	r3, [r3, #24]
 80027d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80027de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	011b      	lsls	r3, r3, #4
 80027e4:	693a      	ldr	r2, [r7, #16]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	f023 030a 	bic.w	r3, r3, #10
 80027f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80027f2:	697a      	ldr	r2, [r7, #20]
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	4313      	orrs	r3, r2
 80027f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	693a      	ldr	r2, [r7, #16]
 80027fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	697a      	ldr	r2, [r7, #20]
 8002804:	621a      	str	r2, [r3, #32]
}
 8002806:	bf00      	nop
 8002808:	371c      	adds	r7, #28
 800280a:	46bd      	mov	sp, r7
 800280c:	bc80      	pop	{r7}
 800280e:	4770      	bx	lr

08002810 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002810:	b480      	push	{r7}
 8002812:	b087      	sub	sp, #28
 8002814:	af00      	add	r7, sp, #0
 8002816:	60f8      	str	r0, [r7, #12]
 8002818:	60b9      	str	r1, [r7, #8]
 800281a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	6a1b      	ldr	r3, [r3, #32]
 8002820:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	6a1b      	ldr	r3, [r3, #32]
 8002826:	f023 0210 	bic.w	r2, r3, #16
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	699b      	ldr	r3, [r3, #24]
 8002832:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800283a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	031b      	lsls	r3, r3, #12
 8002840:	693a      	ldr	r2, [r7, #16]
 8002842:	4313      	orrs	r3, r2
 8002844:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800284c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	011b      	lsls	r3, r3, #4
 8002852:	697a      	ldr	r2, [r7, #20]
 8002854:	4313      	orrs	r3, r2
 8002856:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	693a      	ldr	r2, [r7, #16]
 800285c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	697a      	ldr	r2, [r7, #20]
 8002862:	621a      	str	r2, [r3, #32]
}
 8002864:	bf00      	nop
 8002866:	371c      	adds	r7, #28
 8002868:	46bd      	mov	sp, r7
 800286a:	bc80      	pop	{r7}
 800286c:	4770      	bx	lr

0800286e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800286e:	b480      	push	{r7}
 8002870:	b085      	sub	sp, #20
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]
 8002876:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002884:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002886:	683a      	ldr	r2, [r7, #0]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	4313      	orrs	r3, r2
 800288c:	f043 0307 	orr.w	r3, r3, #7
 8002890:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	68fa      	ldr	r2, [r7, #12]
 8002896:	609a      	str	r2, [r3, #8]
}
 8002898:	bf00      	nop
 800289a:	3714      	adds	r7, #20
 800289c:	46bd      	mov	sp, r7
 800289e:	bc80      	pop	{r7}
 80028a0:	4770      	bx	lr

080028a2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80028a2:	b480      	push	{r7}
 80028a4:	b087      	sub	sp, #28
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	60f8      	str	r0, [r7, #12]
 80028aa:	60b9      	str	r1, [r7, #8]
 80028ac:	607a      	str	r2, [r7, #4]
 80028ae:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80028bc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	021a      	lsls	r2, r3, #8
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	431a      	orrs	r2, r3
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	697a      	ldr	r2, [r7, #20]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	697a      	ldr	r2, [r7, #20]
 80028d4:	609a      	str	r2, [r3, #8]
}
 80028d6:	bf00      	nop
 80028d8:	371c      	adds	r7, #28
 80028da:	46bd      	mov	sp, r7
 80028dc:	bc80      	pop	{r7}
 80028de:	4770      	bx	lr

080028e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b085      	sub	sp, #20
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d101      	bne.n	80028f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80028f4:	2302      	movs	r3, #2
 80028f6:	e041      	b.n	800297c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2201      	movs	r2, #1
 80028fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2202      	movs	r2, #2
 8002904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800291e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	68fa      	ldr	r2, [r7, #12]
 8002926:	4313      	orrs	r3, r2
 8002928:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	68fa      	ldr	r2, [r7, #12]
 8002930:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a14      	ldr	r2, [pc, #80]	; (8002988 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d009      	beq.n	8002950 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002944:	d004      	beq.n	8002950 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a10      	ldr	r2, [pc, #64]	; (800298c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d10c      	bne.n	800296a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002956:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	68ba      	ldr	r2, [r7, #8]
 800295e:	4313      	orrs	r3, r2
 8002960:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	68ba      	ldr	r2, [r7, #8]
 8002968:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2201      	movs	r2, #1
 800296e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2200      	movs	r2, #0
 8002976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800297a:	2300      	movs	r3, #0
}
 800297c:	4618      	mov	r0, r3
 800297e:	3714      	adds	r7, #20
 8002980:	46bd      	mov	sp, r7
 8002982:	bc80      	pop	{r7}
 8002984:	4770      	bx	lr
 8002986:	bf00      	nop
 8002988:	40012c00 	.word	0x40012c00
 800298c:	40000400 	.word	0x40000400

08002990 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002998:	bf00      	nop
 800299a:	370c      	adds	r7, #12
 800299c:	46bd      	mov	sp, r7
 800299e:	bc80      	pop	{r7}
 80029a0:	4770      	bx	lr

080029a2 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80029a2:	b480      	push	{r7}
 80029a4:	b083      	sub	sp, #12
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80029aa:	bf00      	nop
 80029ac:	370c      	adds	r7, #12
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bc80      	pop	{r7}
 80029b2:	4770      	bx	lr

080029b4 <__libc_init_array>:
 80029b4:	b570      	push	{r4, r5, r6, lr}
 80029b6:	2600      	movs	r6, #0
 80029b8:	4d0c      	ldr	r5, [pc, #48]	; (80029ec <__libc_init_array+0x38>)
 80029ba:	4c0d      	ldr	r4, [pc, #52]	; (80029f0 <__libc_init_array+0x3c>)
 80029bc:	1b64      	subs	r4, r4, r5
 80029be:	10a4      	asrs	r4, r4, #2
 80029c0:	42a6      	cmp	r6, r4
 80029c2:	d109      	bne.n	80029d8 <__libc_init_array+0x24>
 80029c4:	f000 f822 	bl	8002a0c <_init>
 80029c8:	2600      	movs	r6, #0
 80029ca:	4d0a      	ldr	r5, [pc, #40]	; (80029f4 <__libc_init_array+0x40>)
 80029cc:	4c0a      	ldr	r4, [pc, #40]	; (80029f8 <__libc_init_array+0x44>)
 80029ce:	1b64      	subs	r4, r4, r5
 80029d0:	10a4      	asrs	r4, r4, #2
 80029d2:	42a6      	cmp	r6, r4
 80029d4:	d105      	bne.n	80029e2 <__libc_init_array+0x2e>
 80029d6:	bd70      	pop	{r4, r5, r6, pc}
 80029d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80029dc:	4798      	blx	r3
 80029de:	3601      	adds	r6, #1
 80029e0:	e7ee      	b.n	80029c0 <__libc_init_array+0xc>
 80029e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80029e6:	4798      	blx	r3
 80029e8:	3601      	adds	r6, #1
 80029ea:	e7f2      	b.n	80029d2 <__libc_init_array+0x1e>
 80029ec:	08002a48 	.word	0x08002a48
 80029f0:	08002a48 	.word	0x08002a48
 80029f4:	08002a48 	.word	0x08002a48
 80029f8:	08002a4c 	.word	0x08002a4c

080029fc <memset>:
 80029fc:	4603      	mov	r3, r0
 80029fe:	4402      	add	r2, r0
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d100      	bne.n	8002a06 <memset+0xa>
 8002a04:	4770      	bx	lr
 8002a06:	f803 1b01 	strb.w	r1, [r3], #1
 8002a0a:	e7f9      	b.n	8002a00 <memset+0x4>

08002a0c <_init>:
 8002a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a0e:	bf00      	nop
 8002a10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a12:	bc08      	pop	{r3}
 8002a14:	469e      	mov	lr, r3
 8002a16:	4770      	bx	lr

08002a18 <_fini>:
 8002a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a1a:	bf00      	nop
 8002a1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a1e:	bc08      	pop	{r3}
 8002a20:	469e      	mov	lr, r3
 8002a22:	4770      	bx	lr
