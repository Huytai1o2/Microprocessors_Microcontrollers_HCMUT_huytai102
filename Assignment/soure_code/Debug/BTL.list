
BTL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003aa8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08003bb4  08003bb4  00013bb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c68  08003c68  00020098  2**0
                  CONTENTS
  4 .ARM          00000000  08003c68  08003c68  00020098  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003c68  08003c68  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c68  08003c68  00013c68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c6c  08003c6c  00013c6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08003c70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000130  20000098  08003d08  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  08003d08  000201c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ef98  00000000  00000000  000200c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002275  00000000  00000000  0002f059  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d40  00000000  00000000  000312d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c60  00000000  00000000  00032010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018789  00000000  00000000  00032c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000102b5  00000000  00000000  0004b3f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b567  00000000  00000000  0005b6ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e6c15  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a90  00000000  00000000  000e6c68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000098 	.word	0x20000098
 8000128:	00000000 	.word	0x00000000
 800012c:	08003b9c 	.word	0x08003b9c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000009c 	.word	0x2000009c
 8000148:	08003b9c 	.word	0x08003b9c

0800014c <lcd_send_cmd>:
I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD (0x21 << 1) // address of slave - LCD

void lcd_send_cmd (char cmd)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af02      	add	r7, sp, #8
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000156:	79fb      	ldrb	r3, [r7, #7]
 8000158:	f023 030f 	bic.w	r3, r3, #15
 800015c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800015e:	79fb      	ldrb	r3, [r7, #7]
 8000160:	011b      	lsls	r3, r3, #4
 8000162:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000164:	7bfb      	ldrb	r3, [r7, #15]
 8000166:	f043 030c 	orr.w	r3, r3, #12
 800016a:	b2db      	uxtb	r3, r3
 800016c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800016e:	7bfb      	ldrb	r3, [r7, #15]
 8000170:	f043 0308 	orr.w	r3, r3, #8
 8000174:	b2db      	uxtb	r3, r3
 8000176:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000178:	7bbb      	ldrb	r3, [r7, #14]
 800017a:	f043 030c 	orr.w	r3, r3, #12
 800017e:	b2db      	uxtb	r3, r3
 8000180:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000182:	7bbb      	ldrb	r3, [r7, #14]
 8000184:	f043 0308 	orr.w	r3, r3, #8
 8000188:	b2db      	uxtb	r3, r3
 800018a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800018c:	f107 0208 	add.w	r2, r7, #8
 8000190:	2364      	movs	r3, #100	; 0x64
 8000192:	9300      	str	r3, [sp, #0]
 8000194:	2304      	movs	r3, #4
 8000196:	2142      	movs	r1, #66	; 0x42
 8000198:	4803      	ldr	r0, [pc, #12]	; (80001a8 <lcd_send_cmd+0x5c>)
 800019a:	f001 fd4f 	bl	8001c3c <HAL_I2C_Master_Transmit>
}
 800019e:	bf00      	nop
 80001a0:	3710      	adds	r7, #16
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bd80      	pop	{r7, pc}
 80001a6:	bf00      	nop
 80001a8:	20000118 	.word	0x20000118

080001ac <lcd_send_data>:

void lcd_send_data (char data)
{
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b086      	sub	sp, #24
 80001b0:	af02      	add	r7, sp, #8
 80001b2:	4603      	mov	r3, r0
 80001b4:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80001b6:	79fb      	ldrb	r3, [r7, #7]
 80001b8:	f023 030f 	bic.w	r3, r3, #15
 80001bc:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80001be:	79fb      	ldrb	r3, [r7, #7]
 80001c0:	011b      	lsls	r3, r3, #4
 80001c2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80001c4:	7bfb      	ldrb	r3, [r7, #15]
 80001c6:	f043 030d 	orr.w	r3, r3, #13
 80001ca:	b2db      	uxtb	r3, r3
 80001cc:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80001ce:	7bfb      	ldrb	r3, [r7, #15]
 80001d0:	f043 0309 	orr.w	r3, r3, #9
 80001d4:	b2db      	uxtb	r3, r3
 80001d6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80001d8:	7bbb      	ldrb	r3, [r7, #14]
 80001da:	f043 030d 	orr.w	r3, r3, #13
 80001de:	b2db      	uxtb	r3, r3
 80001e0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80001e2:	7bbb      	ldrb	r3, [r7, #14]
 80001e4:	f043 0309 	orr.w	r3, r3, #9
 80001e8:	b2db      	uxtb	r3, r3
 80001ea:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80001ec:	f107 0208 	add.w	r2, r7, #8
 80001f0:	2364      	movs	r3, #100	; 0x64
 80001f2:	9300      	str	r3, [sp, #0]
 80001f4:	2304      	movs	r3, #4
 80001f6:	2142      	movs	r1, #66	; 0x42
 80001f8:	4803      	ldr	r0, [pc, #12]	; (8000208 <lcd_send_data+0x5c>)
 80001fa:	f001 fd1f 	bl	8001c3c <HAL_I2C_Master_Transmit>
}
 80001fe:	bf00      	nop
 8000200:	3710      	adds	r7, #16
 8000202:	46bd      	mov	sp, r7
 8000204:	bd80      	pop	{r7, pc}
 8000206:	bf00      	nop
 8000208:	20000118 	.word	0x20000118

0800020c <lcd_init>:

void lcd_init (void) {
 800020c:	b580      	push	{r7, lr}
 800020e:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x33); /* set 4-bits interface */
 8000210:	2033      	movs	r0, #51	; 0x33
 8000212:	f7ff ff9b 	bl	800014c <lcd_send_cmd>
	lcd_send_cmd (0x32);
 8000216:	2032      	movs	r0, #50	; 0x32
 8000218:	f7ff ff98 	bl	800014c <lcd_send_cmd>
	HAL_Delay(50);
 800021c:	2032      	movs	r0, #50	; 0x32
 800021e:	f001 f8cb 	bl	80013b8 <HAL_Delay>
	lcd_send_cmd (0x28); /* start to set LCD function */
 8000222:	2028      	movs	r0, #40	; 0x28
 8000224:	f7ff ff92 	bl	800014c <lcd_send_cmd>
	HAL_Delay(50);
 8000228:	2032      	movs	r0, #50	; 0x32
 800022a:	f001 f8c5 	bl	80013b8 <HAL_Delay>
	lcd_send_cmd (0x01); /* clear display */
 800022e:	2001      	movs	r0, #1
 8000230:	f7ff ff8c 	bl	800014c <lcd_send_cmd>
	HAL_Delay(50);
 8000234:	2032      	movs	r0, #50	; 0x32
 8000236:	f001 f8bf 	bl	80013b8 <HAL_Delay>
	lcd_send_cmd (0x06); /* set entry mode */
 800023a:	2006      	movs	r0, #6
 800023c:	f7ff ff86 	bl	800014c <lcd_send_cmd>
	HAL_Delay(50);
 8000240:	2032      	movs	r0, #50	; 0x32
 8000242:	f001 f8b9 	bl	80013b8 <HAL_Delay>
	lcd_send_cmd (0x0c); /* set display to on */
 8000246:	200c      	movs	r0, #12
 8000248:	f7ff ff80 	bl	800014c <lcd_send_cmd>
	HAL_Delay(50);
 800024c:	2032      	movs	r0, #50	; 0x32
 800024e:	f001 f8b3 	bl	80013b8 <HAL_Delay>
	lcd_send_cmd (0x02); /* move cursor to home and set data address to 0 */
 8000252:	2002      	movs	r0, #2
 8000254:	f7ff ff7a 	bl	800014c <lcd_send_cmd>
	HAL_Delay(50);
 8000258:	2032      	movs	r0, #50	; 0x32
 800025a:	f001 f8ad 	bl	80013b8 <HAL_Delay>
	lcd_send_cmd (0x80);
 800025e:	2080      	movs	r0, #128	; 0x80
 8000260:	f7ff ff74 	bl	800014c <lcd_send_cmd>
}
 8000264:	bf00      	nop
 8000266:	bd80      	pop	{r7, pc}

08000268 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b082      	sub	sp, #8
 800026c:	af00      	add	r7, sp, #0
 800026e:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000270:	e006      	b.n	8000280 <lcd_send_string+0x18>
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	1c5a      	adds	r2, r3, #1
 8000276:	607a      	str	r2, [r7, #4]
 8000278:	781b      	ldrb	r3, [r3, #0]
 800027a:	4618      	mov	r0, r3
 800027c:	f7ff ff96 	bl	80001ac <lcd_send_data>
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	781b      	ldrb	r3, [r3, #0]
 8000284:	2b00      	cmp	r3, #0
 8000286:	d1f4      	bne.n	8000272 <lcd_send_string+0xa>
}
 8000288:	bf00      	nop
 800028a:	bf00      	nop
 800028c:	3708      	adds	r7, #8
 800028e:	46bd      	mov	sp, r7
 8000290:	bd80      	pop	{r7, pc}
	...

08000294 <lcd_send_num>:

void lcd_send_num (int num){
 8000294:	b580      	push	{r7, lr}
 8000296:	b084      	sub	sp, #16
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]
	char buffer[8];
	sprintf(buffer, "%d", num);
 800029c:	f107 0308 	add.w	r3, r7, #8
 80002a0:	687a      	ldr	r2, [r7, #4]
 80002a2:	4906      	ldr	r1, [pc, #24]	; (80002bc <lcd_send_num+0x28>)
 80002a4:	4618      	mov	r0, r3
 80002a6:	f003 f83f 	bl	8003328 <siprintf>
	lcd_send_string(buffer);
 80002aa:	f107 0308 	add.w	r3, r7, #8
 80002ae:	4618      	mov	r0, r3
 80002b0:	f7ff ffda 	bl	8000268 <lcd_send_string>
}
 80002b4:	bf00      	nop
 80002b6:	3710      	adds	r7, #16
 80002b8:	46bd      	mov	sp, r7
 80002ba:	bd80      	pop	{r7, pc}
 80002bc:	08003bb4 	.word	0x08003bb4

080002c0 <lcd_clear_display>:

void lcd_clear_display (void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x01); //clear display
 80002c4:	2001      	movs	r0, #1
 80002c6:	f7ff ff41 	bl	800014c <lcd_send_cmd>
	HAL_Delay(20);
 80002ca:	2014      	movs	r0, #20
 80002cc:	f001 f874 	bl	80013b8 <HAL_Delay>
}
 80002d0:	bf00      	nop
 80002d2:	bd80      	pop	{r7, pc}

080002d4 <lcd_goto_XY>:

void lcd_goto_XY (int row, int col)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b082      	sub	sp, #8
 80002d8:	af00      	add	r7, sp, #0
 80002da:	6078      	str	r0, [r7, #4]
 80002dc:	6039      	str	r1, [r7, #0]
	switch (row){
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d003      	beq.n	80002ec <lcd_goto_XY+0x18>
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	2b01      	cmp	r3, #1
 80002e8:	d005      	beq.n	80002f6 <lcd_goto_XY+0x22>
 80002ea:	e009      	b.n	8000300 <lcd_goto_XY+0x2c>
		case 0:
			col |= 0x80;
 80002ec:	683b      	ldr	r3, [r7, #0]
 80002ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002f2:	603b      	str	r3, [r7, #0]
			break;
 80002f4:	e004      	b.n	8000300 <lcd_goto_XY+0x2c>
		case 1:
			col |= 0xC0;
 80002f6:	683b      	ldr	r3, [r7, #0]
 80002f8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80002fc:	603b      	str	r3, [r7, #0]
			break;
 80002fe:	bf00      	nop
	}
	lcd_send_cmd (col);
 8000300:	683b      	ldr	r3, [r7, #0]
 8000302:	b2db      	uxtb	r3, r3
 8000304:	4618      	mov	r0, r3
 8000306:	f7ff ff21 	bl	800014c <lcd_send_cmd>
}
 800030a:	bf00      	nop
 800030c:	3708      	adds	r7, #8
 800030e:	46bd      	mov	sp, r7
 8000310:	bd80      	pop	{r7, pc}
	...

08000314 <button_reading>:
		Bit31_GPIO_Port,
		Bit32_GPIO_Port,
		Bit41_GPIO_Port
};

void button_reading(void) {
 8000314:	b590      	push	{r4, r7, lr}
 8000316:	b083      	sub	sp, #12
 8000318:	af00      	add	r7, sp, #0
    for (char i = 0; i < NO_OF_BUTTONS; ++i) {
 800031a:	2300      	movs	r3, #0
 800031c:	71fb      	strb	r3, [r7, #7]
 800031e:	e04a      	b.n	80003b6 <button_reading+0xa2>
        debounceButtonBuffer1[i] = debounceButtonBuffer2[i];
 8000320:	79fa      	ldrb	r2, [r7, #7]
 8000322:	79fb      	ldrb	r3, [r7, #7]
 8000324:	4928      	ldr	r1, [pc, #160]	; (80003c8 <button_reading+0xb4>)
 8000326:	5c89      	ldrb	r1, [r1, r2]
 8000328:	4a28      	ldr	r2, [pc, #160]	; (80003cc <button_reading+0xb8>)
 800032a:	54d1      	strb	r1, [r2, r3]
        debounceButtonBuffer2[i] = HAL_GPIO_ReadPin(port[i], pinsButtons[i]);
 800032c:	79fb      	ldrb	r3, [r7, #7]
 800032e:	4a28      	ldr	r2, [pc, #160]	; (80003d0 <button_reading+0xbc>)
 8000330:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000334:	79fb      	ldrb	r3, [r7, #7]
 8000336:	4927      	ldr	r1, [pc, #156]	; (80003d4 <button_reading+0xc0>)
 8000338:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800033c:	79fc      	ldrb	r4, [r7, #7]
 800033e:	4619      	mov	r1, r3
 8000340:	4610      	mov	r0, r2
 8000342:	f001 faef 	bl	8001924 <HAL_GPIO_ReadPin>
 8000346:	4603      	mov	r3, r0
 8000348:	461a      	mov	r2, r3
 800034a:	4b1f      	ldr	r3, [pc, #124]	; (80003c8 <button_reading+0xb4>)
 800034c:	551a      	strb	r2, [r3, r4]

        if (debounceButtonBuffer1[i] == debounceButtonBuffer2[i]) {
 800034e:	79fb      	ldrb	r3, [r7, #7]
 8000350:	4a1e      	ldr	r2, [pc, #120]	; (80003cc <button_reading+0xb8>)
 8000352:	5cd2      	ldrb	r2, [r2, r3]
 8000354:	79fb      	ldrb	r3, [r7, #7]
 8000356:	491c      	ldr	r1, [pc, #112]	; (80003c8 <button_reading+0xb4>)
 8000358:	5ccb      	ldrb	r3, [r1, r3]
 800035a:	429a      	cmp	r2, r3
 800035c:	d128      	bne.n	80003b0 <button_reading+0x9c>
            buttonBuffer[i] = debounceButtonBuffer1[i];
 800035e:	79fa      	ldrb	r2, [r7, #7]
 8000360:	79fb      	ldrb	r3, [r7, #7]
 8000362:	491a      	ldr	r1, [pc, #104]	; (80003cc <button_reading+0xb8>)
 8000364:	5c89      	ldrb	r1, [r1, r2]
 8000366:	4a1c      	ldr	r2, [pc, #112]	; (80003d8 <button_reading+0xc4>)
 8000368:	54d1      	strb	r1, [r2, r3]

            if (buttonBuffer[i] == BUTTON_IS_PRESSED) {
 800036a:	79fb      	ldrb	r3, [r7, #7]
 800036c:	4a1a      	ldr	r2, [pc, #104]	; (80003d8 <button_reading+0xc4>)
 800036e:	5cd3      	ldrb	r3, [r2, r3]
 8000370:	2b00      	cmp	r3, #0
 8000372:	d114      	bne.n	800039e <button_reading+0x8a>
                // If a button is pressed, we start counting
                if (counterForButtonPress1s[i] < DURATION_FOR_AUTO_INCREASING) {
 8000374:	79fb      	ldrb	r3, [r7, #7]
 8000376:	4a19      	ldr	r2, [pc, #100]	; (80003dc <button_reading+0xc8>)
 8000378:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800037c:	2b63      	cmp	r3, #99	; 0x63
 800037e:	d809      	bhi.n	8000394 <button_reading+0x80>
                    counterForButtonPress1s[i]++;
 8000380:	79fb      	ldrb	r3, [r7, #7]
 8000382:	4a16      	ldr	r2, [pc, #88]	; (80003dc <button_reading+0xc8>)
 8000384:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000388:	3201      	adds	r2, #1
 800038a:	b291      	uxth	r1, r2
 800038c:	4a13      	ldr	r2, [pc, #76]	; (80003dc <button_reading+0xc8>)
 800038e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000392:	e00d      	b.n	80003b0 <button_reading+0x9c>
                } else {
                    // The flag is turned on when 1 second has passed since the button is pressed.
                    flagForButtonPress1s[i] = 1;
 8000394:	79fb      	ldrb	r3, [r7, #7]
 8000396:	4a12      	ldr	r2, [pc, #72]	; (80003e0 <button_reading+0xcc>)
 8000398:	2101      	movs	r1, #1
 800039a:	54d1      	strb	r1, [r2, r3]
 800039c:	e008      	b.n	80003b0 <button_reading+0x9c>
                    // todo
                }
            } else {
                counterForButtonPress1s[i] = 0;
 800039e:	79fb      	ldrb	r3, [r7, #7]
 80003a0:	4a0e      	ldr	r2, [pc, #56]	; (80003dc <button_reading+0xc8>)
 80003a2:	2100      	movs	r1, #0
 80003a4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                flagForButtonPress1s[i] = 0;
 80003a8:	79fb      	ldrb	r3, [r7, #7]
 80003aa:	4a0d      	ldr	r2, [pc, #52]	; (80003e0 <button_reading+0xcc>)
 80003ac:	2100      	movs	r1, #0
 80003ae:	54d1      	strb	r1, [r2, r3]
    for (char i = 0; i < NO_OF_BUTTONS; ++i) {
 80003b0:	79fb      	ldrb	r3, [r7, #7]
 80003b2:	3301      	adds	r3, #1
 80003b4:	71fb      	strb	r3, [r7, #7]
 80003b6:	79fb      	ldrb	r3, [r7, #7]
 80003b8:	2b02      	cmp	r3, #2
 80003ba:	d9b1      	bls.n	8000320 <button_reading+0xc>
            }
        }
    }
}
 80003bc:	bf00      	nop
 80003be:	bf00      	nop
 80003c0:	370c      	adds	r7, #12
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bd90      	pop	{r4, r7, pc}
 80003c6:	bf00      	nop
 80003c8:	200000c8 	.word	0x200000c8
 80003cc:	200000c4 	.word	0x200000c4
 80003d0:	20000008 	.word	0x20000008
 80003d4:	20000000 	.word	0x20000000
 80003d8:	200000c0 	.word	0x200000c0
 80003dc:	200000d0 	.word	0x200000d0
 80003e0:	200000cc 	.word	0x200000cc

080003e4 <is_button_pressed>:

unsigned char is_button_pressed(uint8_t index) {
 80003e4:	b480      	push	{r7}
 80003e6:	b083      	sub	sp, #12
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	4603      	mov	r3, r0
 80003ec:	71fb      	strb	r3, [r7, #7]
    if (index >= NO_OF_BUTTONS) return 0;
 80003ee:	79fb      	ldrb	r3, [r7, #7]
 80003f0:	2b02      	cmp	r3, #2
 80003f2:	d901      	bls.n	80003f8 <is_button_pressed+0x14>
 80003f4:	2300      	movs	r3, #0
 80003f6:	e007      	b.n	8000408 <is_button_pressed+0x24>
    return (buttonBuffer[index] == BUTTON_IS_PRESSED);
 80003f8:	79fb      	ldrb	r3, [r7, #7]
 80003fa:	4a06      	ldr	r2, [pc, #24]	; (8000414 <is_button_pressed+0x30>)
 80003fc:	5cd3      	ldrb	r3, [r2, r3]
 80003fe:	2b00      	cmp	r3, #0
 8000400:	bf0c      	ite	eq
 8000402:	2301      	moveq	r3, #1
 8000404:	2300      	movne	r3, #0
 8000406:	b2db      	uxtb	r3, r3
}
 8000408:	4618      	mov	r0, r3
 800040a:	370c      	adds	r7, #12
 800040c:	46bd      	mov	sp, r7
 800040e:	bc80      	pop	{r7}
 8000410:	4770      	bx	lr
 8000412:	bf00      	nop
 8000414:	200000c0 	.word	0x200000c0

08000418 <is_button_pressed_1s>:

unsigned char is_button_pressed_1s(unsigned char index) {
 8000418:	b480      	push	{r7}
 800041a:	b083      	sub	sp, #12
 800041c:	af00      	add	r7, sp, #0
 800041e:	4603      	mov	r3, r0
 8000420:	71fb      	strb	r3, [r7, #7]
    if (index >= NO_OF_BUTTONS) return 0xff;
 8000422:	79fb      	ldrb	r3, [r7, #7]
 8000424:	2b02      	cmp	r3, #2
 8000426:	d901      	bls.n	800042c <is_button_pressed_1s+0x14>
 8000428:	23ff      	movs	r3, #255	; 0xff
 800042a:	e007      	b.n	800043c <is_button_pressed_1s+0x24>
    return (flagForButtonPress1s[index] == 1);
 800042c:	79fb      	ldrb	r3, [r7, #7]
 800042e:	4a06      	ldr	r2, [pc, #24]	; (8000448 <is_button_pressed_1s+0x30>)
 8000430:	5cd3      	ldrb	r3, [r2, r3]
 8000432:	2b01      	cmp	r3, #1
 8000434:	bf0c      	ite	eq
 8000436:	2301      	moveq	r3, #1
 8000438:	2300      	movne	r3, #0
 800043a:	b2db      	uxtb	r3, r3
}
 800043c:	4618      	mov	r0, r3
 800043e:	370c      	adds	r7, #12
 8000440:	46bd      	mov	sp, r7
 8000442:	bc80      	pop	{r7}
 8000444:	4770      	bx	lr
 8000446:	bf00      	nop
 8000448:	200000cc 	.word	0x200000cc

0800044c <detect_signal_button>:


int previous_mode = 1;

void detect_signal_button(enum ButtonState *buttonState, int button_pin)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b082      	sub	sp, #8
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
 8000454:	6039      	str	r1, [r7, #0]
    switch (*buttonState) {
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	781b      	ldrb	r3, [r3, #0]
 800045a:	2b02      	cmp	r3, #2
 800045c:	d02a      	beq.n	80004b4 <detect_signal_button+0x68>
 800045e:	2b02      	cmp	r3, #2
 8000460:	dc34      	bgt.n	80004cc <detect_signal_button+0x80>
 8000462:	2b00      	cmp	r3, #0
 8000464:	d002      	beq.n	800046c <detect_signal_button+0x20>
 8000466:	2b01      	cmp	r3, #1
 8000468:	d00c      	beq.n	8000484 <detect_signal_button+0x38>
 800046a:	e02f      	b.n	80004cc <detect_signal_button+0x80>
        case BUTTON_RELEASED:
            if (is_button_pressed(button_pin)) {
 800046c:	683b      	ldr	r3, [r7, #0]
 800046e:	b2db      	uxtb	r3, r3
 8000470:	4618      	mov	r0, r3
 8000472:	f7ff ffb7 	bl	80003e4 <is_button_pressed>
 8000476:	4603      	mov	r3, r0
 8000478:	2b00      	cmp	r3, #0
 800047a:	d02b      	beq.n	80004d4 <detect_signal_button+0x88>
                *buttonState = BUTTON_PRESSED;
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	2201      	movs	r2, #1
 8000480:	701a      	strb	r2, [r3, #0]
                // INCREASE VALUE OF PORT A BY ONE UNIT
            }
            break;
 8000482:	e027      	b.n	80004d4 <detect_signal_button+0x88>

        case BUTTON_PRESSED:
            if (!is_button_pressed(button_pin)) {
 8000484:	683b      	ldr	r3, [r7, #0]
 8000486:	b2db      	uxtb	r3, r3
 8000488:	4618      	mov	r0, r3
 800048a:	f7ff ffab 	bl	80003e4 <is_button_pressed>
 800048e:	4603      	mov	r3, r0
 8000490:	2b00      	cmp	r3, #0
 8000492:	d103      	bne.n	800049c <detect_signal_button+0x50>
                *buttonState = BUTTON_RELEASED;
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	2200      	movs	r2, #0
 8000498:	701a      	strb	r2, [r3, #0]
            } else if (is_button_pressed_1s(button_pin)) {
                *buttonState = BUTTON_PRESSED_MORE_THAN_1_SECOND;
            }
            break;
 800049a:	e01d      	b.n	80004d8 <detect_signal_button+0x8c>
            } else if (is_button_pressed_1s(button_pin)) {
 800049c:	683b      	ldr	r3, [r7, #0]
 800049e:	b2db      	uxtb	r3, r3
 80004a0:	4618      	mov	r0, r3
 80004a2:	f7ff ffb9 	bl	8000418 <is_button_pressed_1s>
 80004a6:	4603      	mov	r3, r0
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d015      	beq.n	80004d8 <detect_signal_button+0x8c>
                *buttonState = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	2202      	movs	r2, #2
 80004b0:	701a      	strb	r2, [r3, #0]
            break;
 80004b2:	e011      	b.n	80004d8 <detect_signal_button+0x8c>

        case BUTTON_PRESSED_MORE_THAN_1_SECOND:
            if (!is_button_pressed(button_pin)) {
 80004b4:	683b      	ldr	r3, [r7, #0]
 80004b6:	b2db      	uxtb	r3, r3
 80004b8:	4618      	mov	r0, r3
 80004ba:	f7ff ff93 	bl	80003e4 <is_button_pressed>
 80004be:	4603      	mov	r3, r0
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d10b      	bne.n	80004dc <detect_signal_button+0x90>
                *buttonState = BUTTON_RELEASED;
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	2200      	movs	r2, #0
 80004c8:	701a      	strb	r2, [r3, #0]
            }
            // TODO: Add functionality here for long press
            break;
 80004ca:	e007      	b.n	80004dc <detect_signal_button+0x90>

        default:
            *buttonState = BUTTON_RELEASED;
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	2200      	movs	r2, #0
 80004d0:	701a      	strb	r2, [r3, #0]
    }
}
 80004d2:	e004      	b.n	80004de <detect_signal_button+0x92>
            break;
 80004d4:	bf00      	nop
 80004d6:	e002      	b.n	80004de <detect_signal_button+0x92>
            break;
 80004d8:	bf00      	nop
 80004da:	e000      	b.n	80004de <detect_signal_button+0x92>
            break;
 80004dc:	bf00      	nop
}
 80004de:	bf00      	nop
 80004e0:	3708      	adds	r7, #8
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bd80      	pop	{r7, pc}
	...

080004e8 <fsm_for_input_processing>:

void fsm_for_input_processing(void) {
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0

	for (int i = 0; i < NO_OF_BUTTONS; i++)
 80004ee:	2300      	movs	r3, #0
 80004f0:	607b      	str	r3, [r7, #4]
 80004f2:	e009      	b.n	8000508 <fsm_for_input_processing+0x20>
	{
		detect_signal_button(&buttonStates[i], i);  // Pass button state and pin number
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	4aa7      	ldr	r2, [pc, #668]	; (8000794 <fsm_for_input_processing+0x2ac>)
 80004f8:	4413      	add	r3, r2
 80004fa:	6879      	ldr	r1, [r7, #4]
 80004fc:	4618      	mov	r0, r3
 80004fe:	f7ff ffa5 	bl	800044c <detect_signal_button>
	for (int i = 0; i < NO_OF_BUTTONS; i++)
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	3301      	adds	r3, #1
 8000506:	607b      	str	r3, [r7, #4]
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	2b02      	cmp	r3, #2
 800050c:	ddf2      	ble.n	80004f4 <fsm_for_input_processing+0xc>
	}

    // Handle mode switching
    switch(mode) {
 800050e:	4ba2      	ldr	r3, [pc, #648]	; (8000798 <fsm_for_input_processing+0x2b0>)
 8000510:	781b      	ldrb	r3, [r3, #0]
 8000512:	2b03      	cmp	r3, #3
 8000514:	f200 80e3 	bhi.w	80006de <fsm_for_input_processing+0x1f6>
 8000518:	a201      	add	r2, pc, #4	; (adr r2, 8000520 <fsm_for_input_processing+0x38>)
 800051a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800051e:	bf00      	nop
 8000520:	08000531 	.word	0x08000531
 8000524:	08000595 	.word	0x08000595
 8000528:	08000615 	.word	0x08000615
 800052c:	0800066d 	.word	0x0800066d
        case MODE1:
            if (counterLightBuffer[0] != counterLightBuffer[1]+counterLightBuffer[2])
 8000530:	4b9a      	ldr	r3, [pc, #616]	; (800079c <fsm_for_input_processing+0x2b4>)
 8000532:	681a      	ldr	r2, [r3, #0]
 8000534:	4b99      	ldr	r3, [pc, #612]	; (800079c <fsm_for_input_processing+0x2b4>)
 8000536:	6859      	ldr	r1, [r3, #4]
 8000538:	4b98      	ldr	r3, [pc, #608]	; (800079c <fsm_for_input_processing+0x2b4>)
 800053a:	689b      	ldr	r3, [r3, #8]
 800053c:	440b      	add	r3, r1
 800053e:	429a      	cmp	r2, r3
 8000540:	d006      	beq.n	8000550 <fsm_for_input_processing+0x68>
            {
//            	HAL_GPIO_WritePin(GPIOA, Debug_Pin, 1); // indicate the red led is modified
            	counterLightBuffer[0] = counterLightBuffer[1]+counterLightBuffer[2]; // if green + yellow != red
 8000542:	4b96      	ldr	r3, [pc, #600]	; (800079c <fsm_for_input_processing+0x2b4>)
 8000544:	685a      	ldr	r2, [r3, #4]
 8000546:	4b95      	ldr	r3, [pc, #596]	; (800079c <fsm_for_input_processing+0x2b4>)
 8000548:	689b      	ldr	r3, [r3, #8]
 800054a:	4413      	add	r3, r2
 800054c:	4a93      	ldr	r2, [pc, #588]	; (800079c <fsm_for_input_processing+0x2b4>)
 800054e:	6013      	str	r3, [r2, #0]
            																		// make equal
            }
            if (previous_mode == 4)
 8000550:	4b93      	ldr	r3, [pc, #588]	; (80007a0 <fsm_for_input_processing+0x2b8>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	2b04      	cmp	r3, #4
 8000556:	d101      	bne.n	800055c <fsm_for_input_processing+0x74>
            {
            	lcd_clear_display();
 8000558:	f7ff feb2 	bl	80002c0 <lcd_clear_display>
            }

            fsm_traffic_light();
 800055c:	f000 fda2 	bl	80010a4 <fsm_traffic_light>

            if (flag[1] == 1)
 8000560:	4b90      	ldr	r3, [pc, #576]	; (80007a4 <fsm_for_input_processing+0x2bc>)
 8000562:	685b      	ldr	r3, [r3, #4]
 8000564:	2b01      	cmp	r3, #1
 8000566:	d102      	bne.n	800056e <fsm_for_input_processing+0x86>
            {
    			setTimer_blinkly(50);
 8000568:	2032      	movs	r0, #50	; 0x32
 800056a:	f000 fd23 	bl	8000fb4 <setTimer_blinkly>
            }
            previous_mode = 1;
 800056e:	4b8c      	ldr	r3, [pc, #560]	; (80007a0 <fsm_for_input_processing+0x2b8>)
 8000570:	2201      	movs	r2, #1
 8000572:	601a      	str	r2, [r3, #0]
            setTimer_blinkly(50);
 8000574:	2032      	movs	r0, #50	; 0x32
 8000576:	f000 fd1d 	bl	8000fb4 <setTimer_blinkly>
            setCounter[0] = counterLightBuffer[0];
 800057a:	4b88      	ldr	r3, [pc, #544]	; (800079c <fsm_for_input_processing+0x2b4>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	4a8a      	ldr	r2, [pc, #552]	; (80007a8 <fsm_for_input_processing+0x2c0>)
 8000580:	6013      	str	r3, [r2, #0]
            setCounter[1] = counterLightBuffer[1];
 8000582:	4b86      	ldr	r3, [pc, #536]	; (800079c <fsm_for_input_processing+0x2b4>)
 8000584:	685b      	ldr	r3, [r3, #4]
 8000586:	4a88      	ldr	r2, [pc, #544]	; (80007a8 <fsm_for_input_processing+0x2c0>)
 8000588:	6053      	str	r3, [r2, #4]
            setCounter[2] = counterLightBuffer[2];
 800058a:	4b84      	ldr	r3, [pc, #528]	; (800079c <fsm_for_input_processing+0x2b4>)
 800058c:	689b      	ldr	r3, [r3, #8]
 800058e:	4a86      	ldr	r2, [pc, #536]	; (80007a8 <fsm_for_input_processing+0x2c0>)
 8000590:	6093      	str	r3, [r2, #8]
            break;
 8000592:	e0a4      	b.n	80006de <fsm_for_input_processing+0x1f6>

        case MODE2:
        	if (previous_mode == 1)
 8000594:	4b82      	ldr	r3, [pc, #520]	; (80007a0 <fsm_for_input_processing+0x2b8>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	2b01      	cmp	r3, #1
 800059a:	d117      	bne.n	80005cc <fsm_for_input_processing+0xe4>
        	{
        		lcd_clear_display();
 800059c:	f7ff fe90 	bl	80002c0 <lcd_clear_display>
        		HAL_GPIO_WritePin(Bit11_GPIO_Port, Bit11_Pin, 1);
 80005a0:	2201      	movs	r2, #1
 80005a2:	2180      	movs	r1, #128	; 0x80
 80005a4:	4881      	ldr	r0, [pc, #516]	; (80007ac <fsm_for_input_processing+0x2c4>)
 80005a6:	f001 f9d4 	bl	8001952 <HAL_GPIO_WritePin>
        		HAL_GPIO_WritePin(Bit12_GPIO_Port, Bit12_Pin, 1);
 80005aa:	2201      	movs	r2, #1
 80005ac:	2140      	movs	r1, #64	; 0x40
 80005ae:	4880      	ldr	r0, [pc, #512]	; (80007b0 <fsm_for_input_processing+0x2c8>)
 80005b0:	f001 f9cf 	bl	8001952 <HAL_GPIO_WritePin>
        		HAL_GPIO_WritePin(Bit21_GPIO_Port, Bit21_Pin, 1);
 80005b4:	2201      	movs	r2, #1
 80005b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005ba:	487e      	ldr	r0, [pc, #504]	; (80007b4 <fsm_for_input_processing+0x2cc>)
 80005bc:	f001 f9c9 	bl	8001952 <HAL_GPIO_WritePin>
        		HAL_GPIO_WritePin(Bit21_GPIO_Port, Bit22_Pin, 1);
 80005c0:	2201      	movs	r2, #1
 80005c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005c6:	487b      	ldr	r0, [pc, #492]	; (80007b4 <fsm_for_input_processing+0x2cc>)
 80005c8:	f001 f9c3 	bl	8001952 <HAL_GPIO_WritePin>
        	}
        	if (flag[1] == 1)
 80005cc:	4b75      	ldr	r3, [pc, #468]	; (80007a4 <fsm_for_input_processing+0x2bc>)
 80005ce:	685b      	ldr	r3, [r3, #4]
 80005d0:	2b01      	cmp	r3, #1
 80005d2:	d114      	bne.n	80005fe <fsm_for_input_processing+0x116>
        	{
    			HAL_GPIO_TogglePin(Bit11_GPIO_Port, Bit11_Pin);
 80005d4:	2180      	movs	r1, #128	; 0x80
 80005d6:	4875      	ldr	r0, [pc, #468]	; (80007ac <fsm_for_input_processing+0x2c4>)
 80005d8:	f001 f9d3 	bl	8001982 <HAL_GPIO_TogglePin>
    			HAL_GPIO_TogglePin(Bit12_GPIO_Port, Bit12_Pin);
 80005dc:	2140      	movs	r1, #64	; 0x40
 80005de:	4874      	ldr	r0, [pc, #464]	; (80007b0 <fsm_for_input_processing+0x2c8>)
 80005e0:	f001 f9cf 	bl	8001982 <HAL_GPIO_TogglePin>
    			HAL_GPIO_TogglePin(Bit21_GPIO_Port, Bit21_Pin);
 80005e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005e8:	4872      	ldr	r0, [pc, #456]	; (80007b4 <fsm_for_input_processing+0x2cc>)
 80005ea:	f001 f9ca 	bl	8001982 <HAL_GPIO_TogglePin>
    			HAL_GPIO_TogglePin(Bit22_GPIO_Port, Bit22_Pin);
 80005ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005f2:	4870      	ldr	r0, [pc, #448]	; (80007b4 <fsm_for_input_processing+0x2cc>)
 80005f4:	f001 f9c5 	bl	8001982 <HAL_GPIO_TogglePin>
    			setTimer_blinkly(50);
 80005f8:	2032      	movs	r0, #50	; 0x32
 80005fa:	f000 fcdb 	bl	8000fb4 <setTimer_blinkly>
//			HAL_GPIO_WritePin(GPIOB, yellow2_Pin, 0);
//			HAL_GPIO_WritePin(GPIOB, green1_Pin, 0);
//			HAL_GPIO_WritePin(GPIOB, green2_Pin, 0);

//			HAL_GPIO_WritePin(GPIOA, Debug_Pin, 0);
			updateDigitBuffer(setCounter[0], 02, 1, 1);
 80005fe:	4b6a      	ldr	r3, [pc, #424]	; (80007a8 <fsm_for_input_processing+0x2c0>)
 8000600:	6818      	ldr	r0, [r3, #0]
 8000602:	2301      	movs	r3, #1
 8000604:	2201      	movs	r2, #1
 8000606:	2102      	movs	r1, #2
 8000608:	f000 fb0c 	bl	8000c24 <updateDigitBuffer>

			previous_mode = 2;
 800060c:	4b64      	ldr	r3, [pc, #400]	; (80007a0 <fsm_for_input_processing+0x2b8>)
 800060e:	2202      	movs	r2, #2
 8000610:	601a      	str	r2, [r3, #0]
            break;
 8000612:	e064      	b.n	80006de <fsm_for_input_processing+0x1f6>

        case MODE3:
        	if (previous_mode == 2)
 8000614:	4b62      	ldr	r3, [pc, #392]	; (80007a0 <fsm_for_input_processing+0x2b8>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	2b02      	cmp	r3, #2
 800061a:	d101      	bne.n	8000620 <fsm_for_input_processing+0x138>
			{
				lcd_clear_display();
 800061c:	f7ff fe50 	bl	80002c0 <lcd_clear_display>
			}
        	HAL_GPIO_WritePin(Bit11_GPIO_Port, Bit11_Pin, 0);
 8000620:	2200      	movs	r2, #0
 8000622:	2180      	movs	r1, #128	; 0x80
 8000624:	4861      	ldr	r0, [pc, #388]	; (80007ac <fsm_for_input_processing+0x2c4>)
 8000626:	f001 f994 	bl	8001952 <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(Bit21_GPIO_Port, Bit21_Pin, 0);
 800062a:	2200      	movs	r2, #0
 800062c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000630:	4860      	ldr	r0, [pc, #384]	; (80007b4 <fsm_for_input_processing+0x2cc>)
 8000632:	f001 f98e 	bl	8001952 <HAL_GPIO_WritePin>
			if (flag[1] == 1)
 8000636:	4b5b      	ldr	r3, [pc, #364]	; (80007a4 <fsm_for_input_processing+0x2bc>)
 8000638:	685b      	ldr	r3, [r3, #4]
 800063a:	2b01      	cmp	r3, #1
 800063c:	d10b      	bne.n	8000656 <fsm_for_input_processing+0x16e>
			{
				HAL_GPIO_TogglePin(Bit12_GPIO_Port, Bit12_Pin);
 800063e:	2140      	movs	r1, #64	; 0x40
 8000640:	485b      	ldr	r0, [pc, #364]	; (80007b0 <fsm_for_input_processing+0x2c8>)
 8000642:	f001 f99e 	bl	8001982 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(Bit22_GPIO_Port, Bit22_Pin);
 8000646:	f44f 7100 	mov.w	r1, #512	; 0x200
 800064a:	485a      	ldr	r0, [pc, #360]	; (80007b4 <fsm_for_input_processing+0x2cc>)
 800064c:	f001 f999 	bl	8001982 <HAL_GPIO_TogglePin>
    			setTimer_blinkly(50);
 8000650:	2032      	movs	r0, #50	; 0x32
 8000652:	f000 fcaf 	bl	8000fb4 <setTimer_blinkly>
			}
//			HAL_GPIO_WritePin(GPIOB, green1_Pin, 0);
//			HAL_GPIO_WritePin(GPIOB, green2_Pin, 0);
			updateDigitBuffer(setCounter[1], 03, 1, 2);
 8000656:	4b54      	ldr	r3, [pc, #336]	; (80007a8 <fsm_for_input_processing+0x2c0>)
 8000658:	6858      	ldr	r0, [r3, #4]
 800065a:	2302      	movs	r3, #2
 800065c:	2201      	movs	r2, #1
 800065e:	2103      	movs	r1, #3
 8000660:	f000 fae0 	bl	8000c24 <updateDigitBuffer>
			previous_mode = 3;
 8000664:	4b4e      	ldr	r3, [pc, #312]	; (80007a0 <fsm_for_input_processing+0x2b8>)
 8000666:	2203      	movs	r2, #3
 8000668:	601a      	str	r2, [r3, #0]
            break;
 800066a:	e038      	b.n	80006de <fsm_for_input_processing+0x1f6>
        case MODE4:
//			HAL_GPIO_WritePin(GPIOB, red1_Pin, 0);
//			HAL_GPIO_WritePin(GPIOB, red2_Pin, 0);
//			HAL_GPIO_WritePin(GPIOB, yellow1_Pin, 0);
//			HAL_GPIO_WritePin(GPIOB, yellow2_Pin, 0);
        	if (previous_mode == 3)
 800066c:	4b4c      	ldr	r3, [pc, #304]	; (80007a0 <fsm_for_input_processing+0x2b8>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	2b03      	cmp	r3, #3
 8000672:	d117      	bne.n	80006a4 <fsm_for_input_processing+0x1bc>
        	{
        		lcd_clear_display();
 8000674:	f7ff fe24 	bl	80002c0 <lcd_clear_display>
            	HAL_GPIO_WritePin(Bit22_GPIO_Port, Bit22_Pin, 0);
 8000678:	2200      	movs	r2, #0
 800067a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800067e:	484d      	ldr	r0, [pc, #308]	; (80007b4 <fsm_for_input_processing+0x2cc>)
 8000680:	f001 f967 	bl	8001952 <HAL_GPIO_WritePin>
            	HAL_GPIO_WritePin(Bit12_GPIO_Port, Bit12_Pin, 0);
 8000684:	2200      	movs	r2, #0
 8000686:	2140      	movs	r1, #64	; 0x40
 8000688:	4849      	ldr	r0, [pc, #292]	; (80007b0 <fsm_for_input_processing+0x2c8>)
 800068a:	f001 f962 	bl	8001952 <HAL_GPIO_WritePin>
            	HAL_GPIO_WritePin(Bit11_GPIO_Port, Bit11_Pin, 0);
 800068e:	2200      	movs	r2, #0
 8000690:	2180      	movs	r1, #128	; 0x80
 8000692:	4846      	ldr	r0, [pc, #280]	; (80007ac <fsm_for_input_processing+0x2c4>)
 8000694:	f001 f95d 	bl	8001952 <HAL_GPIO_WritePin>
            	HAL_GPIO_WritePin(Bit21_GPIO_Port, Bit21_Pin, 0);
 8000698:	2200      	movs	r2, #0
 800069a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800069e:	4845      	ldr	r0, [pc, #276]	; (80007b4 <fsm_for_input_processing+0x2cc>)
 80006a0:	f001 f957 	bl	8001952 <HAL_GPIO_WritePin>
        	}
			if (flag[1] == 1)
 80006a4:	4b3f      	ldr	r3, [pc, #252]	; (80007a4 <fsm_for_input_processing+0x2bc>)
 80006a6:	685b      	ldr	r3, [r3, #4]
 80006a8:	2b01      	cmp	r3, #1
 80006aa:	d10b      	bne.n	80006c4 <fsm_for_input_processing+0x1dc>
			{
				HAL_GPIO_TogglePin(Bit21_GPIO_Port, Bit21_Pin);
 80006ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006b0:	4840      	ldr	r0, [pc, #256]	; (80007b4 <fsm_for_input_processing+0x2cc>)
 80006b2:	f001 f966 	bl	8001982 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(Bit11_GPIO_Port, Bit11_Pin);
 80006b6:	2180      	movs	r1, #128	; 0x80
 80006b8:	483c      	ldr	r0, [pc, #240]	; (80007ac <fsm_for_input_processing+0x2c4>)
 80006ba:	f001 f962 	bl	8001982 <HAL_GPIO_TogglePin>
    			setTimer_blinkly(50);
 80006be:	2032      	movs	r0, #50	; 0x32
 80006c0:	f000 fc78 	bl	8000fb4 <setTimer_blinkly>
			}
        	reset_state();
 80006c4:	f000 fcd8 	bl	8001078 <reset_state>

			updateDigitBuffer(setCounter[2], 04, 1, 3);
 80006c8:	4b37      	ldr	r3, [pc, #220]	; (80007a8 <fsm_for_input_processing+0x2c0>)
 80006ca:	6898      	ldr	r0, [r3, #8]
 80006cc:	2303      	movs	r3, #3
 80006ce:	2201      	movs	r2, #1
 80006d0:	2104      	movs	r1, #4
 80006d2:	f000 faa7 	bl	8000c24 <updateDigitBuffer>
        	previous_mode = 4;
 80006d6:	4b32      	ldr	r3, [pc, #200]	; (80007a0 <fsm_for_input_processing+0x2b8>)
 80006d8:	2204      	movs	r2, #4
 80006da:	601a      	str	r2, [r3, #0]
            break;
 80006dc:	bf00      	nop
    }

    /***********************************Beginning handle button 1*********************************/

    if (buttonStates[0] == BUTTON_PRESSED || buttonStates[0] == BUTTON_PRESSED_MORE_THAN_1_SECOND)
 80006de:	4b2d      	ldr	r3, [pc, #180]	; (8000794 <fsm_for_input_processing+0x2ac>)
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	2b01      	cmp	r3, #1
 80006e4:	d003      	beq.n	80006ee <fsm_for_input_processing+0x206>
 80006e6:	4b2b      	ldr	r3, [pc, #172]	; (8000794 <fsm_for_input_processing+0x2ac>)
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	2b02      	cmp	r3, #2
 80006ec:	d12c      	bne.n	8000748 <fsm_for_input_processing+0x260>
    {

    	if (buttonStates[0] == BUTTON_PRESSED_MORE_THAN_1_SECOND)
 80006ee:	4b29      	ldr	r3, [pc, #164]	; (8000794 <fsm_for_input_processing+0x2ac>)
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	2b02      	cmp	r3, #2
 80006f4:	d114      	bne.n	8000720 <fsm_for_input_processing+0x238>
    	{
    		if (flag[4] == 1)
 80006f6:	4b2b      	ldr	r3, [pc, #172]	; (80007a4 <fsm_for_input_processing+0x2bc>)
 80006f8:	691b      	ldr	r3, [r3, #16]
 80006fa:	2b01      	cmp	r3, #1
 80006fc:	d124      	bne.n	8000748 <fsm_for_input_processing+0x260>
			{
				mode ++;
 80006fe:	4b26      	ldr	r3, [pc, #152]	; (8000798 <fsm_for_input_processing+0x2b0>)
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	3301      	adds	r3, #1
 8000704:	b2da      	uxtb	r2, r3
 8000706:	4b24      	ldr	r3, [pc, #144]	; (8000798 <fsm_for_input_processing+0x2b0>)
 8000708:	701a      	strb	r2, [r3, #0]
				if (mode == 4) mode = 0;
 800070a:	4b23      	ldr	r3, [pc, #140]	; (8000798 <fsm_for_input_processing+0x2b0>)
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	2b04      	cmp	r3, #4
 8000710:	d102      	bne.n	8000718 <fsm_for_input_processing+0x230>
 8000712:	4b21      	ldr	r3, [pc, #132]	; (8000798 <fsm_for_input_processing+0x2b0>)
 8000714:	2200      	movs	r2, #0
 8000716:	701a      	strb	r2, [r3, #0]
				setTimer_increasing_num(10);
 8000718:	200a      	movs	r0, #10
 800071a:	f000 fc37 	bl	8000f8c <setTimer_increasing_num>
 800071e:	e013      	b.n	8000748 <fsm_for_input_processing+0x260>
    	}

    	else
    	{
//			HAL_GPIO_WritePin(GPIOA, Debug_Pin, 1);
    		if (flag[4] == 1)
 8000720:	4b20      	ldr	r3, [pc, #128]	; (80007a4 <fsm_for_input_processing+0x2bc>)
 8000722:	691b      	ldr	r3, [r3, #16]
 8000724:	2b01      	cmp	r3, #1
 8000726:	d10f      	bne.n	8000748 <fsm_for_input_processing+0x260>
			{
				mode ++;
 8000728:	4b1b      	ldr	r3, [pc, #108]	; (8000798 <fsm_for_input_processing+0x2b0>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	3301      	adds	r3, #1
 800072e:	b2da      	uxtb	r2, r3
 8000730:	4b19      	ldr	r3, [pc, #100]	; (8000798 <fsm_for_input_processing+0x2b0>)
 8000732:	701a      	strb	r2, [r3, #0]
				if (mode == 4)
 8000734:	4b18      	ldr	r3, [pc, #96]	; (8000798 <fsm_for_input_processing+0x2b0>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	2b04      	cmp	r3, #4
 800073a:	d102      	bne.n	8000742 <fsm_for_input_processing+0x25a>
				{
					mode = 0;
 800073c:	4b16      	ldr	r3, [pc, #88]	; (8000798 <fsm_for_input_processing+0x2b0>)
 800073e:	2200      	movs	r2, #0
 8000740:	701a      	strb	r2, [r3, #0]
//					counterLightBuffer[0] = counter
				};
				setTimer_increasing_num(100);
 8000742:	2064      	movs	r0, #100	; 0x64
 8000744:	f000 fc22 	bl	8000f8c <setTimer_increasing_num>

    /***********************************Ending handle button 1*********************************/

    /***********************************Beginning handle button 2*********************************/

    if (buttonStates[1] == BUTTON_PRESSED || buttonStates[1] == BUTTON_PRESSED_MORE_THAN_1_SECOND)
 8000748:	4b12      	ldr	r3, [pc, #72]	; (8000794 <fsm_for_input_processing+0x2ac>)
 800074a:	785b      	ldrb	r3, [r3, #1]
 800074c:	2b01      	cmp	r3, #1
 800074e:	d004      	beq.n	800075a <fsm_for_input_processing+0x272>
 8000750:	4b10      	ldr	r3, [pc, #64]	; (8000794 <fsm_for_input_processing+0x2ac>)
 8000752:	785b      	ldrb	r3, [r3, #1]
 8000754:	2b02      	cmp	r3, #2
 8000756:	f040 809a 	bne.w	800088e <fsm_for_input_processing+0x3a6>
	{
		// debug on if button1 pressed

		if (buttonStates[1] == BUTTON_PRESSED_MORE_THAN_1_SECOND)
 800075a:	4b0e      	ldr	r3, [pc, #56]	; (8000794 <fsm_for_input_processing+0x2ac>)
 800075c:	785b      	ldrb	r3, [r3, #1]
 800075e:	2b02      	cmp	r3, #2
 8000760:	d154      	bne.n	800080c <fsm_for_input_processing+0x324>
		{
			if (flag[4] == 1)
 8000762:	4b10      	ldr	r3, [pc, #64]	; (80007a4 <fsm_for_input_processing+0x2bc>)
 8000764:	691b      	ldr	r3, [r3, #16]
 8000766:	2b01      	cmp	r3, #1
 8000768:	f040 8091 	bne.w	800088e <fsm_for_input_processing+0x3a6>
			{
				if (mode == MODE2) setCounter[0] ++;
 800076c:	4b0a      	ldr	r3, [pc, #40]	; (8000798 <fsm_for_input_processing+0x2b0>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	2b01      	cmp	r3, #1
 8000772:	d105      	bne.n	8000780 <fsm_for_input_processing+0x298>
 8000774:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <fsm_for_input_processing+0x2c0>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	3301      	adds	r3, #1
 800077a:	4a0b      	ldr	r2, [pc, #44]	; (80007a8 <fsm_for_input_processing+0x2c0>)
 800077c:	6013      	str	r3, [r2, #0]
 800077e:	e024      	b.n	80007ca <fsm_for_input_processing+0x2e2>
				else if (mode == MODE3) setCounter[1] ++;
 8000780:	4b05      	ldr	r3, [pc, #20]	; (8000798 <fsm_for_input_processing+0x2b0>)
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	2b02      	cmp	r3, #2
 8000786:	d117      	bne.n	80007b8 <fsm_for_input_processing+0x2d0>
 8000788:	4b07      	ldr	r3, [pc, #28]	; (80007a8 <fsm_for_input_processing+0x2c0>)
 800078a:	685b      	ldr	r3, [r3, #4]
 800078c:	3301      	adds	r3, #1
 800078e:	4a06      	ldr	r2, [pc, #24]	; (80007a8 <fsm_for_input_processing+0x2c0>)
 8000790:	6053      	str	r3, [r2, #4]
 8000792:	e01a      	b.n	80007ca <fsm_for_input_processing+0x2e2>
 8000794:	200000d8 	.word	0x200000d8
 8000798:	200000db 	.word	0x200000db
 800079c:	2000001c 	.word	0x2000001c
 80007a0:	20000014 	.word	0x20000014
 80007a4:	200000e0 	.word	0x200000e0
 80007a8:	200000b4 	.word	0x200000b4
 80007ac:	40011000 	.word	0x40011000
 80007b0:	40010c00 	.word	0x40010c00
 80007b4:	40010800 	.word	0x40010800
				else if (mode == MODE4) setCounter[2] ++;
 80007b8:	4b5c      	ldr	r3, [pc, #368]	; (800092c <fsm_for_input_processing+0x444>)
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	2b03      	cmp	r3, #3
 80007be:	d104      	bne.n	80007ca <fsm_for_input_processing+0x2e2>
 80007c0:	4b5b      	ldr	r3, [pc, #364]	; (8000930 <fsm_for_input_processing+0x448>)
 80007c2:	689b      	ldr	r3, [r3, #8]
 80007c4:	3301      	adds	r3, #1
 80007c6:	4a5a      	ldr	r2, [pc, #360]	; (8000930 <fsm_for_input_processing+0x448>)
 80007c8:	6093      	str	r3, [r2, #8]

				//////////////////////////////////////////
				if (setCounter[0] == 100)
 80007ca:	4b59      	ldr	r3, [pc, #356]	; (8000930 <fsm_for_input_processing+0x448>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	2b64      	cmp	r3, #100	; 0x64
 80007d0:	d105      	bne.n	80007de <fsm_for_input_processing+0x2f6>
				{
					lcd_clear_display();
 80007d2:	f7ff fd75 	bl	80002c0 <lcd_clear_display>
					setCounter[0] = 0;
 80007d6:	4b56      	ldr	r3, [pc, #344]	; (8000930 <fsm_for_input_processing+0x448>)
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
 80007dc:	e012      	b.n	8000804 <fsm_for_input_processing+0x31c>
				}
				else if (setCounter[1] == 100)
 80007de:	4b54      	ldr	r3, [pc, #336]	; (8000930 <fsm_for_input_processing+0x448>)
 80007e0:	685b      	ldr	r3, [r3, #4]
 80007e2:	2b64      	cmp	r3, #100	; 0x64
 80007e4:	d105      	bne.n	80007f2 <fsm_for_input_processing+0x30a>
				{
					lcd_clear_display();
 80007e6:	f7ff fd6b 	bl	80002c0 <lcd_clear_display>
					setCounter[1] = 0;
 80007ea:	4b51      	ldr	r3, [pc, #324]	; (8000930 <fsm_for_input_processing+0x448>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	605a      	str	r2, [r3, #4]
 80007f0:	e008      	b.n	8000804 <fsm_for_input_processing+0x31c>
				}
				else if (setCounter[2] == 100)
 80007f2:	4b4f      	ldr	r3, [pc, #316]	; (8000930 <fsm_for_input_processing+0x448>)
 80007f4:	689b      	ldr	r3, [r3, #8]
 80007f6:	2b64      	cmp	r3, #100	; 0x64
 80007f8:	d104      	bne.n	8000804 <fsm_for_input_processing+0x31c>
				{
					lcd_clear_display();
 80007fa:	f7ff fd61 	bl	80002c0 <lcd_clear_display>
					setCounter[2] = 0;
 80007fe:	4b4c      	ldr	r3, [pc, #304]	; (8000930 <fsm_for_input_processing+0x448>)
 8000800:	2200      	movs	r2, #0
 8000802:	609a      	str	r2, [r3, #8]
				}

				setTimer_increasing_num(10);
 8000804:	200a      	movs	r0, #10
 8000806:	f000 fbc1 	bl	8000f8c <setTimer_increasing_num>
 800080a:	e040      	b.n	800088e <fsm_for_input_processing+0x3a6>
			}
		}

		else
		{
			if (flag[4] == 1)
 800080c:	4b49      	ldr	r3, [pc, #292]	; (8000934 <fsm_for_input_processing+0x44c>)
 800080e:	691b      	ldr	r3, [r3, #16]
 8000810:	2b01      	cmp	r3, #1
 8000812:	d13c      	bne.n	800088e <fsm_for_input_processing+0x3a6>
			{
				if (mode == MODE2) setCounter[0] ++;
 8000814:	4b45      	ldr	r3, [pc, #276]	; (800092c <fsm_for_input_processing+0x444>)
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	2b01      	cmp	r3, #1
 800081a:	d105      	bne.n	8000828 <fsm_for_input_processing+0x340>
 800081c:	4b44      	ldr	r3, [pc, #272]	; (8000930 <fsm_for_input_processing+0x448>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	3301      	adds	r3, #1
 8000822:	4a43      	ldr	r2, [pc, #268]	; (8000930 <fsm_for_input_processing+0x448>)
 8000824:	6013      	str	r3, [r2, #0]
 8000826:	e012      	b.n	800084e <fsm_for_input_processing+0x366>
				else if (mode == MODE3) setCounter[1] ++;
 8000828:	4b40      	ldr	r3, [pc, #256]	; (800092c <fsm_for_input_processing+0x444>)
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	2b02      	cmp	r3, #2
 800082e:	d105      	bne.n	800083c <fsm_for_input_processing+0x354>
 8000830:	4b3f      	ldr	r3, [pc, #252]	; (8000930 <fsm_for_input_processing+0x448>)
 8000832:	685b      	ldr	r3, [r3, #4]
 8000834:	3301      	adds	r3, #1
 8000836:	4a3e      	ldr	r2, [pc, #248]	; (8000930 <fsm_for_input_processing+0x448>)
 8000838:	6053      	str	r3, [r2, #4]
 800083a:	e008      	b.n	800084e <fsm_for_input_processing+0x366>
				else if (mode == MODE4) setCounter[2] ++;
 800083c:	4b3b      	ldr	r3, [pc, #236]	; (800092c <fsm_for_input_processing+0x444>)
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	2b03      	cmp	r3, #3
 8000842:	d104      	bne.n	800084e <fsm_for_input_processing+0x366>
 8000844:	4b3a      	ldr	r3, [pc, #232]	; (8000930 <fsm_for_input_processing+0x448>)
 8000846:	689b      	ldr	r3, [r3, #8]
 8000848:	3301      	adds	r3, #1
 800084a:	4a39      	ldr	r2, [pc, #228]	; (8000930 <fsm_for_input_processing+0x448>)
 800084c:	6093      	str	r3, [r2, #8]

				//////////////////////////////////////////
				if (setCounter[0] == 100)
 800084e:	4b38      	ldr	r3, [pc, #224]	; (8000930 <fsm_for_input_processing+0x448>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	2b64      	cmp	r3, #100	; 0x64
 8000854:	d105      	bne.n	8000862 <fsm_for_input_processing+0x37a>
				{
					lcd_clear_display();
 8000856:	f7ff fd33 	bl	80002c0 <lcd_clear_display>
					setCounter[0] = 0;
 800085a:	4b35      	ldr	r3, [pc, #212]	; (8000930 <fsm_for_input_processing+0x448>)
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
 8000860:	e012      	b.n	8000888 <fsm_for_input_processing+0x3a0>
				}
				else if (setCounter[1] == 100)
 8000862:	4b33      	ldr	r3, [pc, #204]	; (8000930 <fsm_for_input_processing+0x448>)
 8000864:	685b      	ldr	r3, [r3, #4]
 8000866:	2b64      	cmp	r3, #100	; 0x64
 8000868:	d105      	bne.n	8000876 <fsm_for_input_processing+0x38e>
				{
					lcd_clear_display();
 800086a:	f7ff fd29 	bl	80002c0 <lcd_clear_display>
					setCounter[1] = 0;
 800086e:	4b30      	ldr	r3, [pc, #192]	; (8000930 <fsm_for_input_processing+0x448>)
 8000870:	2200      	movs	r2, #0
 8000872:	605a      	str	r2, [r3, #4]
 8000874:	e008      	b.n	8000888 <fsm_for_input_processing+0x3a0>
				}
				else if (setCounter[2] == 100)
 8000876:	4b2e      	ldr	r3, [pc, #184]	; (8000930 <fsm_for_input_processing+0x448>)
 8000878:	689b      	ldr	r3, [r3, #8]
 800087a:	2b64      	cmp	r3, #100	; 0x64
 800087c:	d104      	bne.n	8000888 <fsm_for_input_processing+0x3a0>
				{
					lcd_clear_display();
 800087e:	f7ff fd1f 	bl	80002c0 <lcd_clear_display>
					setCounter[2] = 0;
 8000882:	4b2b      	ldr	r3, [pc, #172]	; (8000930 <fsm_for_input_processing+0x448>)
 8000884:	2200      	movs	r2, #0
 8000886:	609a      	str	r2, [r3, #8]
				}

				setTimer_increasing_num(100);
 8000888:	2064      	movs	r0, #100	; 0x64
 800088a:	f000 fb7f 	bl	8000f8c <setTimer_increasing_num>

    /***********************************Ending handle button 2*********************************/

    /***********************************Beginning handle button 3*********************************/

	if (buttonStates[2] == BUTTON_PRESSED || buttonStates[2] == BUTTON_PRESSED_MORE_THAN_1_SECOND)
 800088e:	4b2a      	ldr	r3, [pc, #168]	; (8000938 <fsm_for_input_processing+0x450>)
 8000890:	789b      	ldrb	r3, [r3, #2]
 8000892:	2b01      	cmp	r3, #1
 8000894:	d003      	beq.n	800089e <fsm_for_input_processing+0x3b6>
 8000896:	4b28      	ldr	r3, [pc, #160]	; (8000938 <fsm_for_input_processing+0x450>)
 8000898:	789b      	ldrb	r3, [r3, #2]
 800089a:	2b02      	cmp	r3, #2
 800089c:	d140      	bne.n	8000920 <fsm_for_input_processing+0x438>
	{
		if (flag[4] == 1)
 800089e:	4b25      	ldr	r3, [pc, #148]	; (8000934 <fsm_for_input_processing+0x44c>)
 80008a0:	691b      	ldr	r3, [r3, #16]
 80008a2:	2b01      	cmp	r3, #1
 80008a4:	d13c      	bne.n	8000920 <fsm_for_input_processing+0x438>
		{
			if (counterLightBuffer[0]< 10 && setCounter[0] >= 10) lcd_clear_display();
 80008a6:	4b25      	ldr	r3, [pc, #148]	; (800093c <fsm_for_input_processing+0x454>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	2b09      	cmp	r3, #9
 80008ac:	dc06      	bgt.n	80008bc <fsm_for_input_processing+0x3d4>
 80008ae:	4b20      	ldr	r3, [pc, #128]	; (8000930 <fsm_for_input_processing+0x448>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	2b09      	cmp	r3, #9
 80008b4:	dd02      	ble.n	80008bc <fsm_for_input_processing+0x3d4>
 80008b6:	f7ff fd03 	bl	80002c0 <lcd_clear_display>
 80008ba:	e014      	b.n	80008e6 <fsm_for_input_processing+0x3fe>
			else if (counterLightBuffer[1]< 10 && setCounter[1] >= 10) lcd_clear_display();
 80008bc:	4b1f      	ldr	r3, [pc, #124]	; (800093c <fsm_for_input_processing+0x454>)
 80008be:	685b      	ldr	r3, [r3, #4]
 80008c0:	2b09      	cmp	r3, #9
 80008c2:	dc06      	bgt.n	80008d2 <fsm_for_input_processing+0x3ea>
 80008c4:	4b1a      	ldr	r3, [pc, #104]	; (8000930 <fsm_for_input_processing+0x448>)
 80008c6:	685b      	ldr	r3, [r3, #4]
 80008c8:	2b09      	cmp	r3, #9
 80008ca:	dd02      	ble.n	80008d2 <fsm_for_input_processing+0x3ea>
 80008cc:	f7ff fcf8 	bl	80002c0 <lcd_clear_display>
 80008d0:	e009      	b.n	80008e6 <fsm_for_input_processing+0x3fe>
			else if (counterLightBuffer[2]< 10 && setCounter[2] >= 10) lcd_clear_display();
 80008d2:	4b1a      	ldr	r3, [pc, #104]	; (800093c <fsm_for_input_processing+0x454>)
 80008d4:	689b      	ldr	r3, [r3, #8]
 80008d6:	2b09      	cmp	r3, #9
 80008d8:	dc05      	bgt.n	80008e6 <fsm_for_input_processing+0x3fe>
 80008da:	4b15      	ldr	r3, [pc, #84]	; (8000930 <fsm_for_input_processing+0x448>)
 80008dc:	689b      	ldr	r3, [r3, #8]
 80008de:	2b09      	cmp	r3, #9
 80008e0:	dd01      	ble.n	80008e6 <fsm_for_input_processing+0x3fe>
 80008e2:	f7ff fced 	bl	80002c0 <lcd_clear_display>

			if (mode == 1) counterLightBuffer[0] = setCounter[0];
 80008e6:	4b11      	ldr	r3, [pc, #68]	; (800092c <fsm_for_input_processing+0x444>)
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	2b01      	cmp	r3, #1
 80008ec:	d104      	bne.n	80008f8 <fsm_for_input_processing+0x410>
 80008ee:	4b10      	ldr	r3, [pc, #64]	; (8000930 <fsm_for_input_processing+0x448>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	4a12      	ldr	r2, [pc, #72]	; (800093c <fsm_for_input_processing+0x454>)
 80008f4:	6013      	str	r3, [r2, #0]
 80008f6:	e010      	b.n	800091a <fsm_for_input_processing+0x432>
			else if (mode == 2) counterLightBuffer[1] = setCounter[1];
 80008f8:	4b0c      	ldr	r3, [pc, #48]	; (800092c <fsm_for_input_processing+0x444>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	2b02      	cmp	r3, #2
 80008fe:	d104      	bne.n	800090a <fsm_for_input_processing+0x422>
 8000900:	4b0b      	ldr	r3, [pc, #44]	; (8000930 <fsm_for_input_processing+0x448>)
 8000902:	685b      	ldr	r3, [r3, #4]
 8000904:	4a0d      	ldr	r2, [pc, #52]	; (800093c <fsm_for_input_processing+0x454>)
 8000906:	6053      	str	r3, [r2, #4]
 8000908:	e007      	b.n	800091a <fsm_for_input_processing+0x432>
			else if (mode == 3) counterLightBuffer[2] = setCounter[2];
 800090a:	4b08      	ldr	r3, [pc, #32]	; (800092c <fsm_for_input_processing+0x444>)
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	2b03      	cmp	r3, #3
 8000910:	d103      	bne.n	800091a <fsm_for_input_processing+0x432>
 8000912:	4b07      	ldr	r3, [pc, #28]	; (8000930 <fsm_for_input_processing+0x448>)
 8000914:	689b      	ldr	r3, [r3, #8]
 8000916:	4a09      	ldr	r2, [pc, #36]	; (800093c <fsm_for_input_processing+0x454>)
 8000918:	6093      	str	r3, [r2, #8]

			setTimer_increasing_num(5);
 800091a:	2005      	movs	r0, #5
 800091c:	f000 fb36 	bl	8000f8c <setTimer_increasing_num>
//		HAL_GPIO_WritePin(GPIOA, Debug_Pin, 0);
	}

	/***********************************Ending handle button 3*********************************/

    fsm_change_digit();
 8000920:	f000 fa06 	bl	8000d30 <fsm_change_digit>
}
 8000924:	bf00      	nop
 8000926:	3708      	adds	r7, #8
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	200000db 	.word	0x200000db
 8000930:	200000b4 	.word	0x200000b4
 8000934:	200000e0 	.word	0x200000e0
 8000938:	200000d8 	.word	0x200000d8
 800093c:	2000001c 	.word	0x2000001c

08000940 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000944:	f000 fcd6 	bl	80012f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000948:	f000 f81e 	bl	8000988 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800094c:	f000 f8d6 	bl	8000afc <MX_GPIO_Init>
  MX_TIM2_Init();
 8000950:	f000 f888 	bl	8000a64 <MX_TIM2_Init>
  MX_I2C1_Init();
 8000954:	f000 f858 	bl	8000a08 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000958:	480a      	ldr	r0, [pc, #40]	; (8000984 <main+0x44>)
 800095a:	f002 f911 	bl	8002b80 <HAL_TIM_Base_Start_IT>
  lcd_init();
 800095e:	f7ff fc55 	bl	800020c <lcd_init>
  reset_state();
 8000962:	f000 fb89 	bl	8001078 <reset_state>
  setTimer1(100);
 8000966:	2064      	movs	r0, #100	; 0x64
 8000968:	f000 fafc 	bl	8000f64 <setTimer1>
  setTimer_blinkly(50);
 800096c:	2032      	movs	r0, #50	; 0x32
 800096e:	f000 fb21 	bl	8000fb4 <setTimer_blinkly>
  setTimer_increasing_num(10);
 8000972:	200a      	movs	r0, #10
 8000974:	f000 fb0a 	bl	8000f8c <setTimer_increasing_num>
  setTimer_change_digit(5);
 8000978:	2005      	movs	r0, #5
 800097a:	f000 fb2f 	bl	8000fdc <setTimer_change_digit>
  {
//	  lcd_goto_XY(0,0);
//	  lcd_send_string((char*)a);
//	  lcd_goto_XY(0, 5);
//	  lcd_send_string((char*)a);
	  fsm_for_input_processing();
 800097e:	f7ff fdb3 	bl	80004e8 <fsm_for_input_processing>
  {
 8000982:	e7fc      	b.n	800097e <main+0x3e>
 8000984:	2000016c 	.word	0x2000016c

08000988 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b090      	sub	sp, #64	; 0x40
 800098c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800098e:	f107 0318 	add.w	r3, r7, #24
 8000992:	2228      	movs	r2, #40	; 0x28
 8000994:	2100      	movs	r1, #0
 8000996:	4618      	mov	r0, r3
 8000998:	f002 fcbe 	bl	8003318 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800099c:	1d3b      	adds	r3, r7, #4
 800099e:	2200      	movs	r2, #0
 80009a0:	601a      	str	r2, [r3, #0]
 80009a2:	605a      	str	r2, [r3, #4]
 80009a4:	609a      	str	r2, [r3, #8]
 80009a6:	60da      	str	r2, [r3, #12]
 80009a8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009aa:	2302      	movs	r3, #2
 80009ac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009ae:	2301      	movs	r3, #1
 80009b0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009b2:	2310      	movs	r3, #16
 80009b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009b6:	2302      	movs	r3, #2
 80009b8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80009ba:	2300      	movs	r3, #0
 80009bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 80009be:	2300      	movs	r3, #0
 80009c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009c2:	f107 0318 	add.w	r3, r7, #24
 80009c6:	4618      	mov	r0, r3
 80009c8:	f001 fc90 	bl	80022ec <HAL_RCC_OscConfig>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 80009d2:	f000 f921 	bl	8000c18 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009d6:	230f      	movs	r3, #15
 80009d8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009da:	2302      	movs	r3, #2
 80009dc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009de:	2300      	movs	r3, #0
 80009e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009e8:	2300      	movs	r3, #0
 80009ea:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009ec:	1d3b      	adds	r3, r7, #4
 80009ee:	2100      	movs	r1, #0
 80009f0:	4618      	mov	r0, r3
 80009f2:	f001 fefb 	bl	80027ec <HAL_RCC_ClockConfig>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80009fc:	f000 f90c 	bl	8000c18 <Error_Handler>
  }
}
 8000a00:	bf00      	nop
 8000a02:	3740      	adds	r7, #64	; 0x40
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}

08000a08 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a0c:	4b12      	ldr	r3, [pc, #72]	; (8000a58 <MX_I2C1_Init+0x50>)
 8000a0e:	4a13      	ldr	r2, [pc, #76]	; (8000a5c <MX_I2C1_Init+0x54>)
 8000a10:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a12:	4b11      	ldr	r3, [pc, #68]	; (8000a58 <MX_I2C1_Init+0x50>)
 8000a14:	4a12      	ldr	r2, [pc, #72]	; (8000a60 <MX_I2C1_Init+0x58>)
 8000a16:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a18:	4b0f      	ldr	r3, [pc, #60]	; (8000a58 <MX_I2C1_Init+0x50>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a1e:	4b0e      	ldr	r3, [pc, #56]	; (8000a58 <MX_I2C1_Init+0x50>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a24:	4b0c      	ldr	r3, [pc, #48]	; (8000a58 <MX_I2C1_Init+0x50>)
 8000a26:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a2a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a2c:	4b0a      	ldr	r3, [pc, #40]	; (8000a58 <MX_I2C1_Init+0x50>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a32:	4b09      	ldr	r3, [pc, #36]	; (8000a58 <MX_I2C1_Init+0x50>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a38:	4b07      	ldr	r3, [pc, #28]	; (8000a58 <MX_I2C1_Init+0x50>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a3e:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <MX_I2C1_Init+0x50>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a44:	4804      	ldr	r0, [pc, #16]	; (8000a58 <MX_I2C1_Init+0x50>)
 8000a46:	f000 ffb5 	bl	80019b4 <HAL_I2C_Init>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a50:	f000 f8e2 	bl	8000c18 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a54:	bf00      	nop
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	20000118 	.word	0x20000118
 8000a5c:	40005400 	.word	0x40005400
 8000a60:	000186a0 	.word	0x000186a0

08000a64 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b086      	sub	sp, #24
 8000a68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a6a:	f107 0308 	add.w	r3, r7, #8
 8000a6e:	2200      	movs	r2, #0
 8000a70:	601a      	str	r2, [r3, #0]
 8000a72:	605a      	str	r2, [r3, #4]
 8000a74:	609a      	str	r2, [r3, #8]
 8000a76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a78:	463b      	mov	r3, r7
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	601a      	str	r2, [r3, #0]
 8000a7e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a80:	4b1d      	ldr	r3, [pc, #116]	; (8000af8 <MX_TIM2_Init+0x94>)
 8000a82:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a86:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000a88:	4b1b      	ldr	r3, [pc, #108]	; (8000af8 <MX_TIM2_Init+0x94>)
 8000a8a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000a8e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a90:	4b19      	ldr	r3, [pc, #100]	; (8000af8 <MX_TIM2_Init+0x94>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000a96:	4b18      	ldr	r3, [pc, #96]	; (8000af8 <MX_TIM2_Init+0x94>)
 8000a98:	2209      	movs	r2, #9
 8000a9a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a9c:	4b16      	ldr	r3, [pc, #88]	; (8000af8 <MX_TIM2_Init+0x94>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aa2:	4b15      	ldr	r3, [pc, #84]	; (8000af8 <MX_TIM2_Init+0x94>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000aa8:	4813      	ldr	r0, [pc, #76]	; (8000af8 <MX_TIM2_Init+0x94>)
 8000aaa:	f002 f819 	bl	8002ae0 <HAL_TIM_Base_Init>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000ab4:	f000 f8b0 	bl	8000c18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ab8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000abc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000abe:	f107 0308 	add.w	r3, r7, #8
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	480c      	ldr	r0, [pc, #48]	; (8000af8 <MX_TIM2_Init+0x94>)
 8000ac6:	f002 f99d 	bl	8002e04 <HAL_TIM_ConfigClockSource>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000ad0:	f000 f8a2 	bl	8000c18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000adc:	463b      	mov	r3, r7
 8000ade:	4619      	mov	r1, r3
 8000ae0:	4805      	ldr	r0, [pc, #20]	; (8000af8 <MX_TIM2_Init+0x94>)
 8000ae2:	f002 fb7f 	bl	80031e4 <HAL_TIMEx_MasterConfigSynchronization>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000aec:	f000 f894 	bl	8000c18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000af0:	bf00      	nop
 8000af2:	3718      	adds	r7, #24
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	2000016c 	.word	0x2000016c

08000afc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b088      	sub	sp, #32
 8000b00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b02:	f107 0310 	add.w	r3, r7, #16
 8000b06:	2200      	movs	r2, #0
 8000b08:	601a      	str	r2, [r3, #0]
 8000b0a:	605a      	str	r2, [r3, #4]
 8000b0c:	609a      	str	r2, [r3, #8]
 8000b0e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b10:	4b37      	ldr	r3, [pc, #220]	; (8000bf0 <MX_GPIO_Init+0xf4>)
 8000b12:	699b      	ldr	r3, [r3, #24]
 8000b14:	4a36      	ldr	r2, [pc, #216]	; (8000bf0 <MX_GPIO_Init+0xf4>)
 8000b16:	f043 0308 	orr.w	r3, r3, #8
 8000b1a:	6193      	str	r3, [r2, #24]
 8000b1c:	4b34      	ldr	r3, [pc, #208]	; (8000bf0 <MX_GPIO_Init+0xf4>)
 8000b1e:	699b      	ldr	r3, [r3, #24]
 8000b20:	f003 0308 	and.w	r3, r3, #8
 8000b24:	60fb      	str	r3, [r7, #12]
 8000b26:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b28:	4b31      	ldr	r3, [pc, #196]	; (8000bf0 <MX_GPIO_Init+0xf4>)
 8000b2a:	699b      	ldr	r3, [r3, #24]
 8000b2c:	4a30      	ldr	r2, [pc, #192]	; (8000bf0 <MX_GPIO_Init+0xf4>)
 8000b2e:	f043 0310 	orr.w	r3, r3, #16
 8000b32:	6193      	str	r3, [r2, #24]
 8000b34:	4b2e      	ldr	r3, [pc, #184]	; (8000bf0 <MX_GPIO_Init+0xf4>)
 8000b36:	699b      	ldr	r3, [r3, #24]
 8000b38:	f003 0310 	and.w	r3, r3, #16
 8000b3c:	60bb      	str	r3, [r7, #8]
 8000b3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b40:	4b2b      	ldr	r3, [pc, #172]	; (8000bf0 <MX_GPIO_Init+0xf4>)
 8000b42:	699b      	ldr	r3, [r3, #24]
 8000b44:	4a2a      	ldr	r2, [pc, #168]	; (8000bf0 <MX_GPIO_Init+0xf4>)
 8000b46:	f043 0304 	orr.w	r3, r3, #4
 8000b4a:	6193      	str	r3, [r2, #24]
 8000b4c:	4b28      	ldr	r3, [pc, #160]	; (8000bf0 <MX_GPIO_Init+0xf4>)
 8000b4e:	699b      	ldr	r3, [r3, #24]
 8000b50:	f003 0304 	and.w	r3, r3, #4
 8000b54:	607b      	str	r3, [r7, #4]
 8000b56:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Bit11_GPIO_Port, Bit11_Pin, GPIO_PIN_RESET);
 8000b58:	2200      	movs	r2, #0
 8000b5a:	2180      	movs	r1, #128	; 0x80
 8000b5c:	4825      	ldr	r0, [pc, #148]	; (8000bf4 <MX_GPIO_Init+0xf8>)
 8000b5e:	f000 fef8 	bl	8001952 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Bit21_Pin|Bit22_Pin, GPIO_PIN_RESET);
 8000b62:	2200      	movs	r2, #0
 8000b64:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000b68:	4823      	ldr	r0, [pc, #140]	; (8000bf8 <MX_GPIO_Init+0xfc>)
 8000b6a:	f000 fef2 	bl	8001952 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Bit12_GPIO_Port, Bit12_Pin, GPIO_PIN_RESET);
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2140      	movs	r1, #64	; 0x40
 8000b72:	4822      	ldr	r0, [pc, #136]	; (8000bfc <MX_GPIO_Init+0x100>)
 8000b74:	f000 feed 	bl	8001952 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Bit32_Pin Bit41_Pin Bit31_Pin Bit42_Pin */
  GPIO_InitStruct.Pin = Bit32_Pin|Bit41_Pin|Bit31_Pin|Bit42_Pin;
 8000b78:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000b7c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b82:	2301      	movs	r3, #1
 8000b84:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b86:	f107 0310 	add.w	r3, r7, #16
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	481b      	ldr	r0, [pc, #108]	; (8000bfc <MX_GPIO_Init+0x100>)
 8000b8e:	f000 fd45 	bl	800161c <HAL_GPIO_Init>

  /*Configure GPIO pin : Bit11_Pin */
  GPIO_InitStruct.Pin = Bit11_Pin;
 8000b92:	2380      	movs	r3, #128	; 0x80
 8000b94:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b96:	2301      	movs	r3, #1
 8000b98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Bit11_GPIO_Port, &GPIO_InitStruct);
 8000ba2:	f107 0310 	add.w	r3, r7, #16
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4812      	ldr	r0, [pc, #72]	; (8000bf4 <MX_GPIO_Init+0xf8>)
 8000baa:	f000 fd37 	bl	800161c <HAL_GPIO_Init>

  /*Configure GPIO pins : Bit21_Pin Bit22_Pin */
  GPIO_InitStruct.Pin = Bit21_Pin|Bit22_Pin;
 8000bae:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000bb2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc0:	f107 0310 	add.w	r3, r7, #16
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	480c      	ldr	r0, [pc, #48]	; (8000bf8 <MX_GPIO_Init+0xfc>)
 8000bc8:	f000 fd28 	bl	800161c <HAL_GPIO_Init>

  /*Configure GPIO pin : Bit12_Pin */
  GPIO_InitStruct.Pin = Bit12_Pin;
 8000bcc:	2340      	movs	r3, #64	; 0x40
 8000bce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd8:	2302      	movs	r3, #2
 8000bda:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Bit12_GPIO_Port, &GPIO_InitStruct);
 8000bdc:	f107 0310 	add.w	r3, r7, #16
 8000be0:	4619      	mov	r1, r3
 8000be2:	4806      	ldr	r0, [pc, #24]	; (8000bfc <MX_GPIO_Init+0x100>)
 8000be4:	f000 fd1a 	bl	800161c <HAL_GPIO_Init>

}
 8000be8:	bf00      	nop
 8000bea:	3720      	adds	r7, #32
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	40021000 	.word	0x40021000
 8000bf4:	40011000 	.word	0x40011000
 8000bf8:	40010800 	.word	0x40010800
 8000bfc:	40010c00 	.word	0x40010c00

08000c00 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
	button_reading();
 8000c08:	f7ff fb84 	bl	8000314 <button_reading>
	timerRun();
 8000c0c:	f000 f9fa 	bl	8001004 <timerRun>
}
 8000c10:	bf00      	nop
 8000c12:	3708      	adds	r7, #8
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}

08000c18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c1c:	b672      	cpsid	i
}
 8000c1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c20:	e7fe      	b.n	8000c20 <Error_Handler+0x8>
	...

08000c24 <updateDigitBuffer>:
//            break;
//    }
}

void updateDigitBuffer(int duration1, int duration2, int mode, enum Mode *mode_case)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b084      	sub	sp, #16
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	60f8      	str	r0, [r7, #12]
 8000c2c:	60b9      	str	r1, [r7, #8]
 8000c2e:	607a      	str	r2, [r7, #4]
 8000c30:	603b      	str	r3, [r7, #0]
//    fourDigitBuffer[0] = tens1 + 48;   // Chữ số đầu tiên là hàng chục của duration1
//    fourDigitBuffer[1] = ones1 + 48;   // Chữ số thứ hai là hàng đơn vị của duration1
//    fourDigitBuffer[2] = tens2 + 48;   // Chữ số thứ ba là hàng chục của duration2
//    fourDigitBuffer[3] = ones2 + 48;   // Chữ số thứ tư là hàng đơn vị của duration2

	if (mode == 0)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d113      	bne.n	8000c60 <updateDigitBuffer+0x3c>
	{
		lcd_goto_XY(0, 0);
 8000c38:	2100      	movs	r1, #0
 8000c3a:	2000      	movs	r0, #0
 8000c3c:	f7ff fb4a 	bl	80002d4 <lcd_goto_XY>
		lcd_send_string("Lane 1: ");
 8000c40:	4832      	ldr	r0, [pc, #200]	; (8000d0c <updateDigitBuffer+0xe8>)
 8000c42:	f7ff fb11 	bl	8000268 <lcd_send_string>
		lcd_send_num(duration1);
 8000c46:	68f8      	ldr	r0, [r7, #12]
 8000c48:	f7ff fb24 	bl	8000294 <lcd_send_num>
		lcd_goto_XY(1, 0);
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	2001      	movs	r0, #1
 8000c50:	f7ff fb40 	bl	80002d4 <lcd_goto_XY>
		lcd_send_string("Lane 2: ");
 8000c54:	482e      	ldr	r0, [pc, #184]	; (8000d10 <updateDigitBuffer+0xec>)
 8000c56:	f7ff fb07 	bl	8000268 <lcd_send_string>
		lcd_send_num(duration2);
 8000c5a:	68b8      	ldr	r0, [r7, #8]
 8000c5c:	f7ff fb1a 	bl	8000294 <lcd_send_num>
	}

	if (mode == 1)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	2b01      	cmp	r3, #1
 8000c64:	d14e      	bne.n	8000d04 <updateDigitBuffer+0xe0>
	{
		lcd_goto_XY(0, 0);
 8000c66:	2100      	movs	r1, #0
 8000c68:	2000      	movs	r0, #0
 8000c6a:	f7ff fb33 	bl	80002d4 <lcd_goto_XY>
		lcd_send_string("Mode: ");
 8000c6e:	4829      	ldr	r0, [pc, #164]	; (8000d14 <updateDigitBuffer+0xf0>)
 8000c70:	f7ff fafa 	bl	8000268 <lcd_send_string>
		lcd_send_num(duration2);
 8000c74:	68b8      	ldr	r0, [r7, #8]
 8000c76:	f7ff fb0d 	bl	8000294 <lcd_send_num>
		switch(duration2)
 8000c7a:	68bb      	ldr	r3, [r7, #8]
 8000c7c:	2b04      	cmp	r3, #4
 8000c7e:	d011      	beq.n	8000ca4 <updateDigitBuffer+0x80>
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	2b04      	cmp	r3, #4
 8000c84:	dc12      	bgt.n	8000cac <updateDigitBuffer+0x88>
 8000c86:	68bb      	ldr	r3, [r7, #8]
 8000c88:	2b02      	cmp	r3, #2
 8000c8a:	d003      	beq.n	8000c94 <updateDigitBuffer+0x70>
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	2b03      	cmp	r3, #3
 8000c90:	d004      	beq.n	8000c9c <updateDigitBuffer+0x78>
			case 4:
				lcd_send_string(" - GREEN");
				break;

			default:
				break;
 8000c92:	e00b      	b.n	8000cac <updateDigitBuffer+0x88>
				lcd_send_string(" - RED");
 8000c94:	4820      	ldr	r0, [pc, #128]	; (8000d18 <updateDigitBuffer+0xf4>)
 8000c96:	f7ff fae7 	bl	8000268 <lcd_send_string>
				break;
 8000c9a:	e008      	b.n	8000cae <updateDigitBuffer+0x8a>
				lcd_send_string(" - YELLOW");
 8000c9c:	481f      	ldr	r0, [pc, #124]	; (8000d1c <updateDigitBuffer+0xf8>)
 8000c9e:	f7ff fae3 	bl	8000268 <lcd_send_string>
				break;
 8000ca2:	e004      	b.n	8000cae <updateDigitBuffer+0x8a>
				lcd_send_string(" - GREEN");
 8000ca4:	481e      	ldr	r0, [pc, #120]	; (8000d20 <updateDigitBuffer+0xfc>)
 8000ca6:	f7ff fadf 	bl	8000268 <lcd_send_string>
				break;
 8000caa:	e000      	b.n	8000cae <updateDigitBuffer+0x8a>
				break;
 8000cac:	bf00      	nop
		}

		lcd_goto_XY(1, 0);
 8000cae:	2100      	movs	r1, #0
 8000cb0:	2001      	movs	r0, #1
 8000cb2:	f7ff fb0f 	bl	80002d4 <lcd_goto_XY>
		lcd_send_string("MOD: ");
 8000cb6:	481b      	ldr	r0, [pc, #108]	; (8000d24 <updateDigitBuffer+0x100>)
 8000cb8:	f7ff fad6 	bl	8000268 <lcd_send_string>
		lcd_send_num(duration1);
 8000cbc:	68f8      	ldr	r0, [r7, #12]
 8000cbe:	f7ff fae9 	bl	8000294 <lcd_send_num>
		lcd_goto_XY(1, 8);
 8000cc2:	2108      	movs	r1, #8
 8000cc4:	2001      	movs	r0, #1
 8000cc6:	f7ff fb05 	bl	80002d4 <lcd_goto_XY>
		lcd_send_string("SET: ");
 8000cca:	4817      	ldr	r0, [pc, #92]	; (8000d28 <updateDigitBuffer+0x104>)
 8000ccc:	f7ff facc 	bl	8000268 <lcd_send_string>
		if (mode_case == 1)
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	2b01      	cmp	r3, #1
 8000cd4:	d105      	bne.n	8000ce2 <updateDigitBuffer+0xbe>
		{
			lcd_send_num(counterLightBuffer[0]);
 8000cd6:	4b15      	ldr	r3, [pc, #84]	; (8000d2c <updateDigitBuffer+0x108>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f7ff fada 	bl	8000294 <lcd_send_num>
		else if (mode_case == 3)
		{
			lcd_send_num(counterLightBuffer[2]);
		}
	}
}
 8000ce0:	e010      	b.n	8000d04 <updateDigitBuffer+0xe0>
		else if (mode_case == 2)
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	2b02      	cmp	r3, #2
 8000ce6:	d105      	bne.n	8000cf4 <updateDigitBuffer+0xd0>
			lcd_send_num(counterLightBuffer[1]);
 8000ce8:	4b10      	ldr	r3, [pc, #64]	; (8000d2c <updateDigitBuffer+0x108>)
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	4618      	mov	r0, r3
 8000cee:	f7ff fad1 	bl	8000294 <lcd_send_num>
}
 8000cf2:	e007      	b.n	8000d04 <updateDigitBuffer+0xe0>
		else if (mode_case == 3)
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	2b03      	cmp	r3, #3
 8000cf8:	d104      	bne.n	8000d04 <updateDigitBuffer+0xe0>
			lcd_send_num(counterLightBuffer[2]);
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <updateDigitBuffer+0x108>)
 8000cfc:	689b      	ldr	r3, [r3, #8]
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f7ff fac8 	bl	8000294 <lcd_send_num>
}
 8000d04:	bf00      	nop
 8000d06:	3710      	adds	r7, #16
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	08003bb8 	.word	0x08003bb8
 8000d10:	08003bc4 	.word	0x08003bc4
 8000d14:	08003bd0 	.word	0x08003bd0
 8000d18:	08003bd8 	.word	0x08003bd8
 8000d1c:	08003be0 	.word	0x08003be0
 8000d20:	08003bec 	.word	0x08003bec
 8000d24:	08003bf8 	.word	0x08003bf8
 8000d28:	08003c00 	.word	0x08003c00
 8000d2c:	2000001c 	.word	0x2000001c

08000d30 <fsm_change_digit>:

void fsm_change_digit()
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
//		{
//			index_digit = 0;
//		}
//		setTimer_change_digit(5);
//	}
}
 8000d34:	bf00      	nop
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bc80      	pop	{r7}
 8000d3a:	4770      	bx	lr

08000d3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b085      	sub	sp, #20
 8000d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d42:	4b15      	ldr	r3, [pc, #84]	; (8000d98 <HAL_MspInit+0x5c>)
 8000d44:	699b      	ldr	r3, [r3, #24]
 8000d46:	4a14      	ldr	r2, [pc, #80]	; (8000d98 <HAL_MspInit+0x5c>)
 8000d48:	f043 0301 	orr.w	r3, r3, #1
 8000d4c:	6193      	str	r3, [r2, #24]
 8000d4e:	4b12      	ldr	r3, [pc, #72]	; (8000d98 <HAL_MspInit+0x5c>)
 8000d50:	699b      	ldr	r3, [r3, #24]
 8000d52:	f003 0301 	and.w	r3, r3, #1
 8000d56:	60bb      	str	r3, [r7, #8]
 8000d58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d5a:	4b0f      	ldr	r3, [pc, #60]	; (8000d98 <HAL_MspInit+0x5c>)
 8000d5c:	69db      	ldr	r3, [r3, #28]
 8000d5e:	4a0e      	ldr	r2, [pc, #56]	; (8000d98 <HAL_MspInit+0x5c>)
 8000d60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d64:	61d3      	str	r3, [r2, #28]
 8000d66:	4b0c      	ldr	r3, [pc, #48]	; (8000d98 <HAL_MspInit+0x5c>)
 8000d68:	69db      	ldr	r3, [r3, #28]
 8000d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d6e:	607b      	str	r3, [r7, #4]
 8000d70:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000d72:	4b0a      	ldr	r3, [pc, #40]	; (8000d9c <HAL_MspInit+0x60>)
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000d7e:	60fb      	str	r3, [r7, #12]
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d86:	60fb      	str	r3, [r7, #12]
 8000d88:	4a04      	ldr	r2, [pc, #16]	; (8000d9c <HAL_MspInit+0x60>)
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	3714      	adds	r7, #20
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bc80      	pop	{r7}
 8000d96:	4770      	bx	lr
 8000d98:	40021000 	.word	0x40021000
 8000d9c:	40010000 	.word	0x40010000

08000da0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b08a      	sub	sp, #40	; 0x28
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da8:	f107 0314 	add.w	r3, r7, #20
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	605a      	str	r2, [r3, #4]
 8000db2:	609a      	str	r2, [r3, #8]
 8000db4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4a1d      	ldr	r2, [pc, #116]	; (8000e30 <HAL_I2C_MspInit+0x90>)
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	d132      	bne.n	8000e26 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dc0:	4b1c      	ldr	r3, [pc, #112]	; (8000e34 <HAL_I2C_MspInit+0x94>)
 8000dc2:	699b      	ldr	r3, [r3, #24]
 8000dc4:	4a1b      	ldr	r2, [pc, #108]	; (8000e34 <HAL_I2C_MspInit+0x94>)
 8000dc6:	f043 0308 	orr.w	r3, r3, #8
 8000dca:	6193      	str	r3, [r2, #24]
 8000dcc:	4b19      	ldr	r3, [pc, #100]	; (8000e34 <HAL_I2C_MspInit+0x94>)
 8000dce:	699b      	ldr	r3, [r3, #24]
 8000dd0:	f003 0308 	and.w	r3, r3, #8
 8000dd4:	613b      	str	r3, [r7, #16]
 8000dd6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000dd8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ddc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dde:	2312      	movs	r3, #18
 8000de0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000de2:	2303      	movs	r3, #3
 8000de4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000de6:	f107 0314 	add.w	r3, r7, #20
 8000dea:	4619      	mov	r1, r3
 8000dec:	4812      	ldr	r0, [pc, #72]	; (8000e38 <HAL_I2C_MspInit+0x98>)
 8000dee:	f000 fc15 	bl	800161c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000df2:	4b12      	ldr	r3, [pc, #72]	; (8000e3c <HAL_I2C_MspInit+0x9c>)
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	627b      	str	r3, [r7, #36]	; 0x24
 8000df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dfa:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000dfe:	627b      	str	r3, [r7, #36]	; 0x24
 8000e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e02:	f043 0302 	orr.w	r3, r3, #2
 8000e06:	627b      	str	r3, [r7, #36]	; 0x24
 8000e08:	4a0c      	ldr	r2, [pc, #48]	; (8000e3c <HAL_I2C_MspInit+0x9c>)
 8000e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e0c:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e0e:	4b09      	ldr	r3, [pc, #36]	; (8000e34 <HAL_I2C_MspInit+0x94>)
 8000e10:	69db      	ldr	r3, [r3, #28]
 8000e12:	4a08      	ldr	r2, [pc, #32]	; (8000e34 <HAL_I2C_MspInit+0x94>)
 8000e14:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e18:	61d3      	str	r3, [r2, #28]
 8000e1a:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <HAL_I2C_MspInit+0x94>)
 8000e1c:	69db      	ldr	r3, [r3, #28]
 8000e1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e22:	60fb      	str	r3, [r7, #12]
 8000e24:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000e26:	bf00      	nop
 8000e28:	3728      	adds	r7, #40	; 0x28
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	40005400 	.word	0x40005400
 8000e34:	40021000 	.word	0x40021000
 8000e38:	40010c00 	.word	0x40010c00
 8000e3c:	40010000 	.word	0x40010000

08000e40 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b084      	sub	sp, #16
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e50:	d113      	bne.n	8000e7a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e52:	4b0c      	ldr	r3, [pc, #48]	; (8000e84 <HAL_TIM_Base_MspInit+0x44>)
 8000e54:	69db      	ldr	r3, [r3, #28]
 8000e56:	4a0b      	ldr	r2, [pc, #44]	; (8000e84 <HAL_TIM_Base_MspInit+0x44>)
 8000e58:	f043 0301 	orr.w	r3, r3, #1
 8000e5c:	61d3      	str	r3, [r2, #28]
 8000e5e:	4b09      	ldr	r3, [pc, #36]	; (8000e84 <HAL_TIM_Base_MspInit+0x44>)
 8000e60:	69db      	ldr	r3, [r3, #28]
 8000e62:	f003 0301 	and.w	r3, r3, #1
 8000e66:	60fb      	str	r3, [r7, #12]
 8000e68:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	201c      	movs	r0, #28
 8000e70:	f000 fb9d 	bl	80015ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e74:	201c      	movs	r0, #28
 8000e76:	f000 fbb6 	bl	80015e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000e7a:	bf00      	nop
 8000e7c:	3710      	adds	r7, #16
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	40021000 	.word	0x40021000

08000e88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e8c:	e7fe      	b.n	8000e8c <NMI_Handler+0x4>

08000e8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e8e:	b480      	push	{r7}
 8000e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e92:	e7fe      	b.n	8000e92 <HardFault_Handler+0x4>

08000e94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e98:	e7fe      	b.n	8000e98 <MemManage_Handler+0x4>

08000e9a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e9a:	b480      	push	{r7}
 8000e9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e9e:	e7fe      	b.n	8000e9e <BusFault_Handler+0x4>

08000ea0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ea4:	e7fe      	b.n	8000ea4 <UsageFault_Handler+0x4>

08000ea6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ea6:	b480      	push	{r7}
 8000ea8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eaa:	bf00      	nop
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bc80      	pop	{r7}
 8000eb0:	4770      	bx	lr

08000eb2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eb6:	bf00      	nop
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bc80      	pop	{r7}
 8000ebc:	4770      	bx	lr

08000ebe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ebe:	b480      	push	{r7}
 8000ec0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bc80      	pop	{r7}
 8000ec8:	4770      	bx	lr

08000eca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ece:	f000 fa57 	bl	8001380 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	bd80      	pop	{r7, pc}
	...

08000ed8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000edc:	4802      	ldr	r0, [pc, #8]	; (8000ee8 <TIM2_IRQHandler+0x10>)
 8000ede:	f001 fea1 	bl	8002c24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000ee2:	bf00      	nop
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	2000016c 	.word	0x2000016c

08000eec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b086      	sub	sp, #24
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ef4:	4a14      	ldr	r2, [pc, #80]	; (8000f48 <_sbrk+0x5c>)
 8000ef6:	4b15      	ldr	r3, [pc, #84]	; (8000f4c <_sbrk+0x60>)
 8000ef8:	1ad3      	subs	r3, r2, r3
 8000efa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f00:	4b13      	ldr	r3, [pc, #76]	; (8000f50 <_sbrk+0x64>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d102      	bne.n	8000f0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f08:	4b11      	ldr	r3, [pc, #68]	; (8000f50 <_sbrk+0x64>)
 8000f0a:	4a12      	ldr	r2, [pc, #72]	; (8000f54 <_sbrk+0x68>)
 8000f0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f0e:	4b10      	ldr	r3, [pc, #64]	; (8000f50 <_sbrk+0x64>)
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4413      	add	r3, r2
 8000f16:	693a      	ldr	r2, [r7, #16]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	d207      	bcs.n	8000f2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f1c:	f002 f9d2 	bl	80032c4 <__errno>
 8000f20:	4603      	mov	r3, r0
 8000f22:	220c      	movs	r2, #12
 8000f24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f26:	f04f 33ff 	mov.w	r3, #4294967295
 8000f2a:	e009      	b.n	8000f40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f2c:	4b08      	ldr	r3, [pc, #32]	; (8000f50 <_sbrk+0x64>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f32:	4b07      	ldr	r3, [pc, #28]	; (8000f50 <_sbrk+0x64>)
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4413      	add	r3, r2
 8000f3a:	4a05      	ldr	r2, [pc, #20]	; (8000f50 <_sbrk+0x64>)
 8000f3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f3e:	68fb      	ldr	r3, [r7, #12]
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	3718      	adds	r7, #24
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	20005000 	.word	0x20005000
 8000f4c:	00000400 	.word	0x00000400
 8000f50:	200000dc 	.word	0x200000dc
 8000f54:	200001c8 	.word	0x200001c8

08000f58 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f5c:	bf00      	nop
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bc80      	pop	{r7}
 8000f62:	4770      	bx	lr

08000f64 <setTimer1>:
//counterGreen = 3;
flag[5] = {0};
counterTime[5] = {0 ,0 ,0};

void setTimer1(int duration)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
	counterTime[0] = duration;
 8000f6c:	4a05      	ldr	r2, [pc, #20]	; (8000f84 <setTimer1+0x20>)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6013      	str	r3, [r2, #0]
	flag[0] = 0;
 8000f72:	4b05      	ldr	r3, [pc, #20]	; (8000f88 <setTimer1+0x24>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
}
 8000f78:	bf00      	nop
 8000f7a:	370c      	adds	r7, #12
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bc80      	pop	{r7}
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	200000f4 	.word	0x200000f4
 8000f88:	200000e0 	.word	0x200000e0

08000f8c <setTimer_increasing_num>:

void setTimer_increasing_num(int duration)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
	counterTime[4] = duration;
 8000f94:	4a05      	ldr	r2, [pc, #20]	; (8000fac <setTimer_increasing_num+0x20>)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6113      	str	r3, [r2, #16]
	flag[4] = 0;
 8000f9a:	4b05      	ldr	r3, [pc, #20]	; (8000fb0 <setTimer_increasing_num+0x24>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	611a      	str	r2, [r3, #16]
}
 8000fa0:	bf00      	nop
 8000fa2:	370c      	adds	r7, #12
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bc80      	pop	{r7}
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	200000f4 	.word	0x200000f4
 8000fb0:	200000e0 	.word	0x200000e0

08000fb4 <setTimer_blinkly>:

void setTimer_blinkly(int duration)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
	counterTime[1] = duration;
 8000fbc:	4a05      	ldr	r2, [pc, #20]	; (8000fd4 <setTimer_blinkly+0x20>)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6053      	str	r3, [r2, #4]
	flag[1] = 0;
 8000fc2:	4b05      	ldr	r3, [pc, #20]	; (8000fd8 <setTimer_blinkly+0x24>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	605a      	str	r2, [r3, #4]
}
 8000fc8:	bf00      	nop
 8000fca:	370c      	adds	r7, #12
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bc80      	pop	{r7}
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	200000f4 	.word	0x200000f4
 8000fd8:	200000e0 	.word	0x200000e0

08000fdc <setTimer_change_digit>:

void setTimer_change_digit(int duration)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
	counterTime[2] = duration;
 8000fe4:	4a05      	ldr	r2, [pc, #20]	; (8000ffc <setTimer_change_digit+0x20>)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6093      	str	r3, [r2, #8]
	flag[2] = 0;
 8000fea:	4b05      	ldr	r3, [pc, #20]	; (8001000 <setTimer_change_digit+0x24>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	609a      	str	r2, [r3, #8]
}
 8000ff0:	bf00      	nop
 8000ff2:	370c      	adds	r7, #12
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bc80      	pop	{r7}
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	200000f4 	.word	0x200000f4
 8001000:	200000e0 	.word	0x200000e0

08001004 <timerRun>:

void timerRun()
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
	counterTime[0] --;
 8001008:	4b19      	ldr	r3, [pc, #100]	; (8001070 <timerRun+0x6c>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	3b01      	subs	r3, #1
 800100e:	4a18      	ldr	r2, [pc, #96]	; (8001070 <timerRun+0x6c>)
 8001010:	6013      	str	r3, [r2, #0]
	counterTime[1] --;
 8001012:	4b17      	ldr	r3, [pc, #92]	; (8001070 <timerRun+0x6c>)
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	3b01      	subs	r3, #1
 8001018:	4a15      	ldr	r2, [pc, #84]	; (8001070 <timerRun+0x6c>)
 800101a:	6053      	str	r3, [r2, #4]
	counterTime[2] --;
 800101c:	4b14      	ldr	r3, [pc, #80]	; (8001070 <timerRun+0x6c>)
 800101e:	689b      	ldr	r3, [r3, #8]
 8001020:	3b01      	subs	r3, #1
 8001022:	4a13      	ldr	r2, [pc, #76]	; (8001070 <timerRun+0x6c>)
 8001024:	6093      	str	r3, [r2, #8]
	counterTime[4] --;
 8001026:	4b12      	ldr	r3, [pc, #72]	; (8001070 <timerRun+0x6c>)
 8001028:	691b      	ldr	r3, [r3, #16]
 800102a:	3b01      	subs	r3, #1
 800102c:	4a10      	ldr	r2, [pc, #64]	; (8001070 <timerRun+0x6c>)
 800102e:	6113      	str	r3, [r2, #16]
	if (counterTime[0] == 0)
 8001030:	4b0f      	ldr	r3, [pc, #60]	; (8001070 <timerRun+0x6c>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d102      	bne.n	800103e <timerRun+0x3a>
	{
		flag[0] = 1;
 8001038:	4b0e      	ldr	r3, [pc, #56]	; (8001074 <timerRun+0x70>)
 800103a:	2201      	movs	r2, #1
 800103c:	601a      	str	r2, [r3, #0]
	}

	if (counterTime[1] == 0)
 800103e:	4b0c      	ldr	r3, [pc, #48]	; (8001070 <timerRun+0x6c>)
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d102      	bne.n	800104c <timerRun+0x48>
	{
		flag[1] = 1;
 8001046:	4b0b      	ldr	r3, [pc, #44]	; (8001074 <timerRun+0x70>)
 8001048:	2201      	movs	r2, #1
 800104a:	605a      	str	r2, [r3, #4]
	}

	if (counterTime[2] == 0)
 800104c:	4b08      	ldr	r3, [pc, #32]	; (8001070 <timerRun+0x6c>)
 800104e:	689b      	ldr	r3, [r3, #8]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d102      	bne.n	800105a <timerRun+0x56>
	{
		flag[2] = 1;
 8001054:	4b07      	ldr	r3, [pc, #28]	; (8001074 <timerRun+0x70>)
 8001056:	2201      	movs	r2, #1
 8001058:	609a      	str	r2, [r3, #8]
	}

	if (counterTime[4] == 0)
 800105a:	4b05      	ldr	r3, [pc, #20]	; (8001070 <timerRun+0x6c>)
 800105c:	691b      	ldr	r3, [r3, #16]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d102      	bne.n	8001068 <timerRun+0x64>
	{
		flag[4] = 1;
 8001062:	4b04      	ldr	r3, [pc, #16]	; (8001074 <timerRun+0x70>)
 8001064:	2201      	movs	r2, #1
 8001066:	611a      	str	r2, [r3, #16]
	}
}
 8001068:	bf00      	nop
 800106a:	46bd      	mov	sp, r7
 800106c:	bc80      	pop	{r7}
 800106e:	4770      	bx	lr
 8001070:	200000f4 	.word	0x200000f4
 8001074:	200000e0 	.word	0x200000e0

08001078 <reset_state>:
int state = 0;
int countTemp = 0;
int index = 1;

void reset_state()
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
	state = 0;
 800107c:	4b06      	ldr	r3, [pc, #24]	; (8001098 <reset_state+0x20>)
 800107e:	2200      	movs	r2, #0
 8001080:	601a      	str	r2, [r3, #0]
	countTemp = 0;
 8001082:	4b06      	ldr	r3, [pc, #24]	; (800109c <reset_state+0x24>)
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
	index = 1;
 8001088:	4b05      	ldr	r3, [pc, #20]	; (80010a0 <reset_state+0x28>)
 800108a:	2201      	movs	r2, #1
 800108c:	601a      	str	r2, [r3, #0]
	setTimer1(100);
 800108e:	2064      	movs	r0, #100	; 0x64
 8001090:	f7ff ff68 	bl	8000f64 <setTimer1>
}
 8001094:	bf00      	nop
 8001096:	bd80      	pop	{r7, pc}
 8001098:	20000108 	.word	0x20000108
 800109c:	2000010c 	.word	0x2000010c
 80010a0:	20000028 	.word	0x20000028

080010a4 <fsm_traffic_light>:

void fsm_traffic_light()
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
	switch (state)
 80010a8:	4b78      	ldr	r3, [pc, #480]	; (800128c <fsm_traffic_light+0x1e8>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2b03      	cmp	r3, #3
 80010ae:	f200 80d0 	bhi.w	8001252 <fsm_traffic_light+0x1ae>
 80010b2:	a201      	add	r2, pc, #4	; (adr r2, 80010b8 <fsm_traffic_light+0x14>)
 80010b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010b8:	080010c9 	.word	0x080010c9
 80010bc:	0800112d 	.word	0x0800112d
 80010c0:	0800118f 	.word	0x0800118f
 80010c4:	080011f1 	.word	0x080011f1
//			HAL_GPIO_WritePin(GPIOB, yellow1_Pin, 0);
//			HAL_GPIO_WritePin(GPIOB, yellow2_Pin, 0);
//			HAL_GPIO_WritePin(GPIOB, green1_Pin, 0);
//			HAL_GPIO_WritePin(GPIOB, green2_Pin, 1);

			HAL_GPIO_WritePin(Bit11_GPIO_Port, Bit11_Pin, 1);
 80010c8:	2201      	movs	r2, #1
 80010ca:	2180      	movs	r1, #128	; 0x80
 80010cc:	4870      	ldr	r0, [pc, #448]	; (8001290 <fsm_traffic_light+0x1ec>)
 80010ce:	f000 fc40 	bl	8001952 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Bit12_GPIO_Port, Bit12_Pin, 1);
 80010d2:	2201      	movs	r2, #1
 80010d4:	2140      	movs	r1, #64	; 0x40
 80010d6:	486f      	ldr	r0, [pc, #444]	; (8001294 <fsm_traffic_light+0x1f0>)
 80010d8:	f000 fc3b 	bl	8001952 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Bit21_GPIO_Port, Bit21_Pin, 1);
 80010dc:	2201      	movs	r2, #1
 80010de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010e2:	486d      	ldr	r0, [pc, #436]	; (8001298 <fsm_traffic_light+0x1f4>)
 80010e4:	f000 fc35 	bl	8001952 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Bit22_GPIO_Port, Bit22_Pin, 0);
 80010e8:	2200      	movs	r2, #0
 80010ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010ee:	486a      	ldr	r0, [pc, #424]	; (8001298 <fsm_traffic_light+0x1f4>)
 80010f0:	f000 fc2f 	bl	8001952 <HAL_GPIO_WritePin>
			updateDigitBuffer(counterLightBuffer[0] - countTemp, counterLightBuffer[2] - countTemp, 0, 0);
 80010f4:	4b69      	ldr	r3, [pc, #420]	; (800129c <fsm_traffic_light+0x1f8>)
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	4b69      	ldr	r3, [pc, #420]	; (80012a0 <fsm_traffic_light+0x1fc>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	1ad0      	subs	r0, r2, r3
 80010fe:	4b67      	ldr	r3, [pc, #412]	; (800129c <fsm_traffic_light+0x1f8>)
 8001100:	689a      	ldr	r2, [r3, #8]
 8001102:	4b67      	ldr	r3, [pc, #412]	; (80012a0 <fsm_traffic_light+0x1fc>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	1ad1      	subs	r1, r2, r3
 8001108:	2300      	movs	r3, #0
 800110a:	2200      	movs	r2, #0
 800110c:	f7ff fd8a 	bl	8000c24 <updateDigitBuffer>
			if (countTemp == counterLightBuffer[2])
 8001110:	4b62      	ldr	r3, [pc, #392]	; (800129c <fsm_traffic_light+0x1f8>)
 8001112:	689a      	ldr	r2, [r3, #8]
 8001114:	4b62      	ldr	r3, [pc, #392]	; (80012a0 <fsm_traffic_light+0x1fc>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	429a      	cmp	r2, r3
 800111a:	f040 809e 	bne.w	800125a <fsm_traffic_light+0x1b6>
			{
				state = 1;
 800111e:	4b5b      	ldr	r3, [pc, #364]	; (800128c <fsm_traffic_light+0x1e8>)
 8001120:	2201      	movs	r2, #1
 8001122:	601a      	str	r2, [r3, #0]
				countTemp = 0;
 8001124:	4b5e      	ldr	r3, [pc, #376]	; (80012a0 <fsm_traffic_light+0x1fc>)
 8001126:	2200      	movs	r2, #0
 8001128:	601a      	str	r2, [r3, #0]
			}
			break;
 800112a:	e096      	b.n	800125a <fsm_traffic_light+0x1b6>
//			HAL_GPIO_WritePin(GPIOB, yellow1_Pin, 0);
//			HAL_GPIO_WritePin(GPIOB, yellow2_Pin, 1);
//			HAL_GPIO_WritePin(GPIOB, green1_Pin, 0);
//			HAL_GPIO_WritePin(GPIOB, green2_Pin, 0);

			HAL_GPIO_WritePin(Bit11_GPIO_Port, Bit11_Pin, 1);
 800112c:	2201      	movs	r2, #1
 800112e:	2180      	movs	r1, #128	; 0x80
 8001130:	4857      	ldr	r0, [pc, #348]	; (8001290 <fsm_traffic_light+0x1ec>)
 8001132:	f000 fc0e 	bl	8001952 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Bit12_GPIO_Port, Bit12_Pin, 1);
 8001136:	2201      	movs	r2, #1
 8001138:	2140      	movs	r1, #64	; 0x40
 800113a:	4856      	ldr	r0, [pc, #344]	; (8001294 <fsm_traffic_light+0x1f0>)
 800113c:	f000 fc09 	bl	8001952 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Bit21_GPIO_Port, Bit21_Pin, 0);
 8001140:	2200      	movs	r2, #0
 8001142:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001146:	4854      	ldr	r0, [pc, #336]	; (8001298 <fsm_traffic_light+0x1f4>)
 8001148:	f000 fc03 	bl	8001952 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Bit22_GPIO_Port, Bit22_Pin, 1);
 800114c:	2201      	movs	r2, #1
 800114e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001152:	4851      	ldr	r0, [pc, #324]	; (8001298 <fsm_traffic_light+0x1f4>)
 8001154:	f000 fbfd 	bl	8001952 <HAL_GPIO_WritePin>
			updateDigitBuffer(counterLightBuffer[1] - countTemp, counterLightBuffer[1] - countTemp, 0, 0);
 8001158:	4b50      	ldr	r3, [pc, #320]	; (800129c <fsm_traffic_light+0x1f8>)
 800115a:	685a      	ldr	r2, [r3, #4]
 800115c:	4b50      	ldr	r3, [pc, #320]	; (80012a0 <fsm_traffic_light+0x1fc>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	1ad0      	subs	r0, r2, r3
 8001162:	4b4e      	ldr	r3, [pc, #312]	; (800129c <fsm_traffic_light+0x1f8>)
 8001164:	685a      	ldr	r2, [r3, #4]
 8001166:	4b4e      	ldr	r3, [pc, #312]	; (80012a0 <fsm_traffic_light+0x1fc>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	1ad1      	subs	r1, r2, r3
 800116c:	2300      	movs	r3, #0
 800116e:	2200      	movs	r2, #0
 8001170:	f7ff fd58 	bl	8000c24 <updateDigitBuffer>

			if (countTemp == counterLightBuffer[1])
 8001174:	4b49      	ldr	r3, [pc, #292]	; (800129c <fsm_traffic_light+0x1f8>)
 8001176:	685a      	ldr	r2, [r3, #4]
 8001178:	4b49      	ldr	r3, [pc, #292]	; (80012a0 <fsm_traffic_light+0x1fc>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	429a      	cmp	r2, r3
 800117e:	d16e      	bne.n	800125e <fsm_traffic_light+0x1ba>
			{
				state = 2;
 8001180:	4b42      	ldr	r3, [pc, #264]	; (800128c <fsm_traffic_light+0x1e8>)
 8001182:	2202      	movs	r2, #2
 8001184:	601a      	str	r2, [r3, #0]
				countTemp = 0;
 8001186:	4b46      	ldr	r3, [pc, #280]	; (80012a0 <fsm_traffic_light+0x1fc>)
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
			}
			break;
 800118c:	e067      	b.n	800125e <fsm_traffic_light+0x1ba>
//			HAL_GPIO_WritePin(GPIOB, yellow1_Pin, 0);
//			HAL_GPIO_WritePin(GPIOB, yellow2_Pin, 0);
//			HAL_GPIO_WritePin(GPIOB, green1_Pin, 1);
//			HAL_GPIO_WritePin(GPIOB, green2_Pin, 0);

			HAL_GPIO_WritePin(Bit11_GPIO_Port, Bit11_Pin, 1);
 800118e:	2201      	movs	r2, #1
 8001190:	2180      	movs	r1, #128	; 0x80
 8001192:	483f      	ldr	r0, [pc, #252]	; (8001290 <fsm_traffic_light+0x1ec>)
 8001194:	f000 fbdd 	bl	8001952 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Bit12_GPIO_Port, Bit12_Pin, 0);
 8001198:	2200      	movs	r2, #0
 800119a:	2140      	movs	r1, #64	; 0x40
 800119c:	483d      	ldr	r0, [pc, #244]	; (8001294 <fsm_traffic_light+0x1f0>)
 800119e:	f000 fbd8 	bl	8001952 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Bit21_GPIO_Port, Bit21_Pin, 1);
 80011a2:	2201      	movs	r2, #1
 80011a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011a8:	483b      	ldr	r0, [pc, #236]	; (8001298 <fsm_traffic_light+0x1f4>)
 80011aa:	f000 fbd2 	bl	8001952 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Bit22_GPIO_Port, Bit22_Pin, 1);
 80011ae:	2201      	movs	r2, #1
 80011b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011b4:	4838      	ldr	r0, [pc, #224]	; (8001298 <fsm_traffic_light+0x1f4>)
 80011b6:	f000 fbcc 	bl	8001952 <HAL_GPIO_WritePin>

			updateDigitBuffer(counterLightBuffer[2] - countTemp, counterLightBuffer[0] - countTemp, 0, 0);
 80011ba:	4b38      	ldr	r3, [pc, #224]	; (800129c <fsm_traffic_light+0x1f8>)
 80011bc:	689a      	ldr	r2, [r3, #8]
 80011be:	4b38      	ldr	r3, [pc, #224]	; (80012a0 <fsm_traffic_light+0x1fc>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	1ad0      	subs	r0, r2, r3
 80011c4:	4b35      	ldr	r3, [pc, #212]	; (800129c <fsm_traffic_light+0x1f8>)
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	4b35      	ldr	r3, [pc, #212]	; (80012a0 <fsm_traffic_light+0x1fc>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	1ad1      	subs	r1, r2, r3
 80011ce:	2300      	movs	r3, #0
 80011d0:	2200      	movs	r2, #0
 80011d2:	f7ff fd27 	bl	8000c24 <updateDigitBuffer>

			if (countTemp == counterLightBuffer[2])
 80011d6:	4b31      	ldr	r3, [pc, #196]	; (800129c <fsm_traffic_light+0x1f8>)
 80011d8:	689a      	ldr	r2, [r3, #8]
 80011da:	4b31      	ldr	r3, [pc, #196]	; (80012a0 <fsm_traffic_light+0x1fc>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	429a      	cmp	r2, r3
 80011e0:	d13f      	bne.n	8001262 <fsm_traffic_light+0x1be>
			{
				state = 3;
 80011e2:	4b2a      	ldr	r3, [pc, #168]	; (800128c <fsm_traffic_light+0x1e8>)
 80011e4:	2203      	movs	r2, #3
 80011e6:	601a      	str	r2, [r3, #0]
				countTemp = 0;
 80011e8:	4b2d      	ldr	r3, [pc, #180]	; (80012a0 <fsm_traffic_light+0x1fc>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	601a      	str	r2, [r3, #0]
			}
			break;
 80011ee:	e038      	b.n	8001262 <fsm_traffic_light+0x1be>
//			HAL_GPIO_WritePin(GPIOB, yellow1_Pin, 1);
//			HAL_GPIO_WritePin(GPIOB, yellow2_Pin, 0);
//			HAL_GPIO_WritePin(GPIOB, green1_Pin, 0);
//			HAL_GPIO_WritePin(GPIOB, green2_Pin, 0);

			HAL_GPIO_WritePin(Bit11_GPIO_Port, Bit11_Pin, 0);
 80011f0:	2200      	movs	r2, #0
 80011f2:	2180      	movs	r1, #128	; 0x80
 80011f4:	4826      	ldr	r0, [pc, #152]	; (8001290 <fsm_traffic_light+0x1ec>)
 80011f6:	f000 fbac 	bl	8001952 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Bit12_GPIO_Port, Bit12_Pin, 1);
 80011fa:	2201      	movs	r2, #1
 80011fc:	2140      	movs	r1, #64	; 0x40
 80011fe:	4825      	ldr	r0, [pc, #148]	; (8001294 <fsm_traffic_light+0x1f0>)
 8001200:	f000 fba7 	bl	8001952 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Bit21_GPIO_Port, Bit21_Pin, 1);
 8001204:	2201      	movs	r2, #1
 8001206:	f44f 7180 	mov.w	r1, #256	; 0x100
 800120a:	4823      	ldr	r0, [pc, #140]	; (8001298 <fsm_traffic_light+0x1f4>)
 800120c:	f000 fba1 	bl	8001952 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Bit22_GPIO_Port, Bit22_Pin, 1);
 8001210:	2201      	movs	r2, #1
 8001212:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001216:	4820      	ldr	r0, [pc, #128]	; (8001298 <fsm_traffic_light+0x1f4>)
 8001218:	f000 fb9b 	bl	8001952 <HAL_GPIO_WritePin>

			updateDigitBuffer(counterLightBuffer[1] - countTemp, counterLightBuffer[1] - countTemp, 0, 0);
 800121c:	4b1f      	ldr	r3, [pc, #124]	; (800129c <fsm_traffic_light+0x1f8>)
 800121e:	685a      	ldr	r2, [r3, #4]
 8001220:	4b1f      	ldr	r3, [pc, #124]	; (80012a0 <fsm_traffic_light+0x1fc>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	1ad0      	subs	r0, r2, r3
 8001226:	4b1d      	ldr	r3, [pc, #116]	; (800129c <fsm_traffic_light+0x1f8>)
 8001228:	685a      	ldr	r2, [r3, #4]
 800122a:	4b1d      	ldr	r3, [pc, #116]	; (80012a0 <fsm_traffic_light+0x1fc>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	1ad1      	subs	r1, r2, r3
 8001230:	2300      	movs	r3, #0
 8001232:	2200      	movs	r2, #0
 8001234:	f7ff fcf6 	bl	8000c24 <updateDigitBuffer>

			if (countTemp == counterLightBuffer[1])
 8001238:	4b18      	ldr	r3, [pc, #96]	; (800129c <fsm_traffic_light+0x1f8>)
 800123a:	685a      	ldr	r2, [r3, #4]
 800123c:	4b18      	ldr	r3, [pc, #96]	; (80012a0 <fsm_traffic_light+0x1fc>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	429a      	cmp	r2, r3
 8001242:	d110      	bne.n	8001266 <fsm_traffic_light+0x1c2>
			{
				state = 0;
 8001244:	4b11      	ldr	r3, [pc, #68]	; (800128c <fsm_traffic_light+0x1e8>)
 8001246:	2200      	movs	r2, #0
 8001248:	601a      	str	r2, [r3, #0]
				countTemp = 0;
 800124a:	4b15      	ldr	r3, [pc, #84]	; (80012a0 <fsm_traffic_light+0x1fc>)
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
			}
			break;
 8001250:	e009      	b.n	8001266 <fsm_traffic_light+0x1c2>

		default:
			state = 0;
 8001252:	4b0e      	ldr	r3, [pc, #56]	; (800128c <fsm_traffic_light+0x1e8>)
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
			break;
 8001258:	e006      	b.n	8001268 <fsm_traffic_light+0x1c4>
			break;
 800125a:	bf00      	nop
 800125c:	e004      	b.n	8001268 <fsm_traffic_light+0x1c4>
			break;
 800125e:	bf00      	nop
 8001260:	e002      	b.n	8001268 <fsm_traffic_light+0x1c4>
			break;
 8001262:	bf00      	nop
 8001264:	e000      	b.n	8001268 <fsm_traffic_light+0x1c4>
			break;
 8001266:	bf00      	nop
	}

	if (flag[0] == 1)
 8001268:	4b0e      	ldr	r3, [pc, #56]	; (80012a4 <fsm_traffic_light+0x200>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	2b01      	cmp	r3, #1
 800126e:	d10a      	bne.n	8001286 <fsm_traffic_light+0x1e2>
	{
		countTemp ++;
 8001270:	4b0b      	ldr	r3, [pc, #44]	; (80012a0 <fsm_traffic_light+0x1fc>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	3301      	adds	r3, #1
 8001276:	4a0a      	ldr	r2, [pc, #40]	; (80012a0 <fsm_traffic_light+0x1fc>)
 8001278:	6013      	str	r3, [r2, #0]
		setTimer1(100);
 800127a:	2064      	movs	r0, #100	; 0x64
 800127c:	f7ff fe72 	bl	8000f64 <setTimer1>
		lcd_clear_display();
 8001280:	f7ff f81e 	bl	80002c0 <lcd_clear_display>
	}

	return;
 8001284:	bf00      	nop
 8001286:	bf00      	nop
}
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	20000108 	.word	0x20000108
 8001290:	40011000 	.word	0x40011000
 8001294:	40010c00 	.word	0x40010c00
 8001298:	40010800 	.word	0x40010800
 800129c:	2000001c 	.word	0x2000001c
 80012a0:	2000010c 	.word	0x2000010c
 80012a4:	200000e0 	.word	0x200000e0

080012a8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80012a8:	f7ff fe56 	bl	8000f58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012ac:	480b      	ldr	r0, [pc, #44]	; (80012dc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80012ae:	490c      	ldr	r1, [pc, #48]	; (80012e0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80012b0:	4a0c      	ldr	r2, [pc, #48]	; (80012e4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80012b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012b4:	e002      	b.n	80012bc <LoopCopyDataInit>

080012b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012ba:	3304      	adds	r3, #4

080012bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012c0:	d3f9      	bcc.n	80012b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012c2:	4a09      	ldr	r2, [pc, #36]	; (80012e8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80012c4:	4c09      	ldr	r4, [pc, #36]	; (80012ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012c8:	e001      	b.n	80012ce <LoopFillZerobss>

080012ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012cc:	3204      	adds	r2, #4

080012ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012d0:	d3fb      	bcc.n	80012ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012d2:	f001 fffd 	bl	80032d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012d6:	f7ff fb33 	bl	8000940 <main>
  bx lr
 80012da:	4770      	bx	lr
  ldr r0, =_sdata
 80012dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012e0:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 80012e4:	08003c70 	.word	0x08003c70
  ldr r2, =_sbss
 80012e8:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 80012ec:	200001c8 	.word	0x200001c8

080012f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012f0:	e7fe      	b.n	80012f0 <ADC1_2_IRQHandler>
	...

080012f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012f8:	4b08      	ldr	r3, [pc, #32]	; (800131c <HAL_Init+0x28>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a07      	ldr	r2, [pc, #28]	; (800131c <HAL_Init+0x28>)
 80012fe:	f043 0310 	orr.w	r3, r3, #16
 8001302:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001304:	2003      	movs	r0, #3
 8001306:	f000 f947 	bl	8001598 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800130a:	2000      	movs	r0, #0
 800130c:	f000 f808 	bl	8001320 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001310:	f7ff fd14 	bl	8000d3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001314:	2300      	movs	r3, #0
}
 8001316:	4618      	mov	r0, r3
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	40022000 	.word	0x40022000

08001320 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001328:	4b12      	ldr	r3, [pc, #72]	; (8001374 <HAL_InitTick+0x54>)
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	4b12      	ldr	r3, [pc, #72]	; (8001378 <HAL_InitTick+0x58>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	4619      	mov	r1, r3
 8001332:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001336:	fbb3 f3f1 	udiv	r3, r3, r1
 800133a:	fbb2 f3f3 	udiv	r3, r2, r3
 800133e:	4618      	mov	r0, r3
 8001340:	f000 f95f 	bl	8001602 <HAL_SYSTICK_Config>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e00e      	b.n	800136c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2b0f      	cmp	r3, #15
 8001352:	d80a      	bhi.n	800136a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001354:	2200      	movs	r2, #0
 8001356:	6879      	ldr	r1, [r7, #4]
 8001358:	f04f 30ff 	mov.w	r0, #4294967295
 800135c:	f000 f927 	bl	80015ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001360:	4a06      	ldr	r2, [pc, #24]	; (800137c <HAL_InitTick+0x5c>)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001366:	2300      	movs	r3, #0
 8001368:	e000      	b.n	800136c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800136a:	2301      	movs	r3, #1
}
 800136c:	4618      	mov	r0, r3
 800136e:	3708      	adds	r7, #8
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	20000018 	.word	0x20000018
 8001378:	20000030 	.word	0x20000030
 800137c:	2000002c 	.word	0x2000002c

08001380 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001384:	4b05      	ldr	r3, [pc, #20]	; (800139c <HAL_IncTick+0x1c>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	461a      	mov	r2, r3
 800138a:	4b05      	ldr	r3, [pc, #20]	; (80013a0 <HAL_IncTick+0x20>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4413      	add	r3, r2
 8001390:	4a03      	ldr	r2, [pc, #12]	; (80013a0 <HAL_IncTick+0x20>)
 8001392:	6013      	str	r3, [r2, #0]
}
 8001394:	bf00      	nop
 8001396:	46bd      	mov	sp, r7
 8001398:	bc80      	pop	{r7}
 800139a:	4770      	bx	lr
 800139c:	20000030 	.word	0x20000030
 80013a0:	200001b4 	.word	0x200001b4

080013a4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  return uwTick;
 80013a8:	4b02      	ldr	r3, [pc, #8]	; (80013b4 <HAL_GetTick+0x10>)
 80013aa:	681b      	ldr	r3, [r3, #0]
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bc80      	pop	{r7}
 80013b2:	4770      	bx	lr
 80013b4:	200001b4 	.word	0x200001b4

080013b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b084      	sub	sp, #16
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013c0:	f7ff fff0 	bl	80013a4 <HAL_GetTick>
 80013c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013d0:	d005      	beq.n	80013de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013d2:	4b0a      	ldr	r3, [pc, #40]	; (80013fc <HAL_Delay+0x44>)
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	461a      	mov	r2, r3
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	4413      	add	r3, r2
 80013dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013de:	bf00      	nop
 80013e0:	f7ff ffe0 	bl	80013a4 <HAL_GetTick>
 80013e4:	4602      	mov	r2, r0
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	68fa      	ldr	r2, [r7, #12]
 80013ec:	429a      	cmp	r2, r3
 80013ee:	d8f7      	bhi.n	80013e0 <HAL_Delay+0x28>
  {
  }
}
 80013f0:	bf00      	nop
 80013f2:	bf00      	nop
 80013f4:	3710      	adds	r7, #16
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	20000030 	.word	0x20000030

08001400 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001400:	b480      	push	{r7}
 8001402:	b085      	sub	sp, #20
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	f003 0307 	and.w	r3, r3, #7
 800140e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001410:	4b0c      	ldr	r3, [pc, #48]	; (8001444 <__NVIC_SetPriorityGrouping+0x44>)
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001416:	68ba      	ldr	r2, [r7, #8]
 8001418:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800141c:	4013      	ands	r3, r2
 800141e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001428:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800142c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001430:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001432:	4a04      	ldr	r2, [pc, #16]	; (8001444 <__NVIC_SetPriorityGrouping+0x44>)
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	60d3      	str	r3, [r2, #12]
}
 8001438:	bf00      	nop
 800143a:	3714      	adds	r7, #20
 800143c:	46bd      	mov	sp, r7
 800143e:	bc80      	pop	{r7}
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	e000ed00 	.word	0xe000ed00

08001448 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800144c:	4b04      	ldr	r3, [pc, #16]	; (8001460 <__NVIC_GetPriorityGrouping+0x18>)
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	0a1b      	lsrs	r3, r3, #8
 8001452:	f003 0307 	and.w	r3, r3, #7
}
 8001456:	4618      	mov	r0, r3
 8001458:	46bd      	mov	sp, r7
 800145a:	bc80      	pop	{r7}
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	e000ed00 	.word	0xe000ed00

08001464 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	4603      	mov	r3, r0
 800146c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800146e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001472:	2b00      	cmp	r3, #0
 8001474:	db0b      	blt.n	800148e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001476:	79fb      	ldrb	r3, [r7, #7]
 8001478:	f003 021f 	and.w	r2, r3, #31
 800147c:	4906      	ldr	r1, [pc, #24]	; (8001498 <__NVIC_EnableIRQ+0x34>)
 800147e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001482:	095b      	lsrs	r3, r3, #5
 8001484:	2001      	movs	r0, #1
 8001486:	fa00 f202 	lsl.w	r2, r0, r2
 800148a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800148e:	bf00      	nop
 8001490:	370c      	adds	r7, #12
 8001492:	46bd      	mov	sp, r7
 8001494:	bc80      	pop	{r7}
 8001496:	4770      	bx	lr
 8001498:	e000e100 	.word	0xe000e100

0800149c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	4603      	mov	r3, r0
 80014a4:	6039      	str	r1, [r7, #0]
 80014a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	db0a      	blt.n	80014c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	b2da      	uxtb	r2, r3
 80014b4:	490c      	ldr	r1, [pc, #48]	; (80014e8 <__NVIC_SetPriority+0x4c>)
 80014b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ba:	0112      	lsls	r2, r2, #4
 80014bc:	b2d2      	uxtb	r2, r2
 80014be:	440b      	add	r3, r1
 80014c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014c4:	e00a      	b.n	80014dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	b2da      	uxtb	r2, r3
 80014ca:	4908      	ldr	r1, [pc, #32]	; (80014ec <__NVIC_SetPriority+0x50>)
 80014cc:	79fb      	ldrb	r3, [r7, #7]
 80014ce:	f003 030f 	and.w	r3, r3, #15
 80014d2:	3b04      	subs	r3, #4
 80014d4:	0112      	lsls	r2, r2, #4
 80014d6:	b2d2      	uxtb	r2, r2
 80014d8:	440b      	add	r3, r1
 80014da:	761a      	strb	r2, [r3, #24]
}
 80014dc:	bf00      	nop
 80014de:	370c      	adds	r7, #12
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bc80      	pop	{r7}
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	e000e100 	.word	0xe000e100
 80014ec:	e000ed00 	.word	0xe000ed00

080014f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b089      	sub	sp, #36	; 0x24
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	60f8      	str	r0, [r7, #12]
 80014f8:	60b9      	str	r1, [r7, #8]
 80014fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	f003 0307 	and.w	r3, r3, #7
 8001502:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	f1c3 0307 	rsb	r3, r3, #7
 800150a:	2b04      	cmp	r3, #4
 800150c:	bf28      	it	cs
 800150e:	2304      	movcs	r3, #4
 8001510:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	3304      	adds	r3, #4
 8001516:	2b06      	cmp	r3, #6
 8001518:	d902      	bls.n	8001520 <NVIC_EncodePriority+0x30>
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	3b03      	subs	r3, #3
 800151e:	e000      	b.n	8001522 <NVIC_EncodePriority+0x32>
 8001520:	2300      	movs	r3, #0
 8001522:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001524:	f04f 32ff 	mov.w	r2, #4294967295
 8001528:	69bb      	ldr	r3, [r7, #24]
 800152a:	fa02 f303 	lsl.w	r3, r2, r3
 800152e:	43da      	mvns	r2, r3
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	401a      	ands	r2, r3
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001538:	f04f 31ff 	mov.w	r1, #4294967295
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	fa01 f303 	lsl.w	r3, r1, r3
 8001542:	43d9      	mvns	r1, r3
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001548:	4313      	orrs	r3, r2
         );
}
 800154a:	4618      	mov	r0, r3
 800154c:	3724      	adds	r7, #36	; 0x24
 800154e:	46bd      	mov	sp, r7
 8001550:	bc80      	pop	{r7}
 8001552:	4770      	bx	lr

08001554 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	3b01      	subs	r3, #1
 8001560:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001564:	d301      	bcc.n	800156a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001566:	2301      	movs	r3, #1
 8001568:	e00f      	b.n	800158a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800156a:	4a0a      	ldr	r2, [pc, #40]	; (8001594 <SysTick_Config+0x40>)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	3b01      	subs	r3, #1
 8001570:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001572:	210f      	movs	r1, #15
 8001574:	f04f 30ff 	mov.w	r0, #4294967295
 8001578:	f7ff ff90 	bl	800149c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800157c:	4b05      	ldr	r3, [pc, #20]	; (8001594 <SysTick_Config+0x40>)
 800157e:	2200      	movs	r2, #0
 8001580:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001582:	4b04      	ldr	r3, [pc, #16]	; (8001594 <SysTick_Config+0x40>)
 8001584:	2207      	movs	r2, #7
 8001586:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001588:	2300      	movs	r3, #0
}
 800158a:	4618      	mov	r0, r3
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	e000e010 	.word	0xe000e010

08001598 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	f7ff ff2d 	bl	8001400 <__NVIC_SetPriorityGrouping>
}
 80015a6:	bf00      	nop
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}

080015ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015ae:	b580      	push	{r7, lr}
 80015b0:	b086      	sub	sp, #24
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	4603      	mov	r3, r0
 80015b6:	60b9      	str	r1, [r7, #8]
 80015b8:	607a      	str	r2, [r7, #4]
 80015ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015bc:	2300      	movs	r3, #0
 80015be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015c0:	f7ff ff42 	bl	8001448 <__NVIC_GetPriorityGrouping>
 80015c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015c6:	687a      	ldr	r2, [r7, #4]
 80015c8:	68b9      	ldr	r1, [r7, #8]
 80015ca:	6978      	ldr	r0, [r7, #20]
 80015cc:	f7ff ff90 	bl	80014f0 <NVIC_EncodePriority>
 80015d0:	4602      	mov	r2, r0
 80015d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015d6:	4611      	mov	r1, r2
 80015d8:	4618      	mov	r0, r3
 80015da:	f7ff ff5f 	bl	800149c <__NVIC_SetPriority>
}
 80015de:	bf00      	nop
 80015e0:	3718      	adds	r7, #24
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}

080015e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015e6:	b580      	push	{r7, lr}
 80015e8:	b082      	sub	sp, #8
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	4603      	mov	r3, r0
 80015ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7ff ff35 	bl	8001464 <__NVIC_EnableIRQ>
}
 80015fa:	bf00      	nop
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}

08001602 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001602:	b580      	push	{r7, lr}
 8001604:	b082      	sub	sp, #8
 8001606:	af00      	add	r7, sp, #0
 8001608:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f7ff ffa2 	bl	8001554 <SysTick_Config>
 8001610:	4603      	mov	r3, r0
}
 8001612:	4618      	mov	r0, r3
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
	...

0800161c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800161c:	b480      	push	{r7}
 800161e:	b08b      	sub	sp, #44	; 0x2c
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001626:	2300      	movs	r3, #0
 8001628:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800162a:	2300      	movs	r3, #0
 800162c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800162e:	e169      	b.n	8001904 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001630:	2201      	movs	r2, #1
 8001632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001634:	fa02 f303 	lsl.w	r3, r2, r3
 8001638:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	69fa      	ldr	r2, [r7, #28]
 8001640:	4013      	ands	r3, r2
 8001642:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	429a      	cmp	r2, r3
 800164a:	f040 8158 	bne.w	80018fe <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	4a9a      	ldr	r2, [pc, #616]	; (80018bc <HAL_GPIO_Init+0x2a0>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d05e      	beq.n	8001716 <HAL_GPIO_Init+0xfa>
 8001658:	4a98      	ldr	r2, [pc, #608]	; (80018bc <HAL_GPIO_Init+0x2a0>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d875      	bhi.n	800174a <HAL_GPIO_Init+0x12e>
 800165e:	4a98      	ldr	r2, [pc, #608]	; (80018c0 <HAL_GPIO_Init+0x2a4>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d058      	beq.n	8001716 <HAL_GPIO_Init+0xfa>
 8001664:	4a96      	ldr	r2, [pc, #600]	; (80018c0 <HAL_GPIO_Init+0x2a4>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d86f      	bhi.n	800174a <HAL_GPIO_Init+0x12e>
 800166a:	4a96      	ldr	r2, [pc, #600]	; (80018c4 <HAL_GPIO_Init+0x2a8>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d052      	beq.n	8001716 <HAL_GPIO_Init+0xfa>
 8001670:	4a94      	ldr	r2, [pc, #592]	; (80018c4 <HAL_GPIO_Init+0x2a8>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d869      	bhi.n	800174a <HAL_GPIO_Init+0x12e>
 8001676:	4a94      	ldr	r2, [pc, #592]	; (80018c8 <HAL_GPIO_Init+0x2ac>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d04c      	beq.n	8001716 <HAL_GPIO_Init+0xfa>
 800167c:	4a92      	ldr	r2, [pc, #584]	; (80018c8 <HAL_GPIO_Init+0x2ac>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d863      	bhi.n	800174a <HAL_GPIO_Init+0x12e>
 8001682:	4a92      	ldr	r2, [pc, #584]	; (80018cc <HAL_GPIO_Init+0x2b0>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d046      	beq.n	8001716 <HAL_GPIO_Init+0xfa>
 8001688:	4a90      	ldr	r2, [pc, #576]	; (80018cc <HAL_GPIO_Init+0x2b0>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d85d      	bhi.n	800174a <HAL_GPIO_Init+0x12e>
 800168e:	2b12      	cmp	r3, #18
 8001690:	d82a      	bhi.n	80016e8 <HAL_GPIO_Init+0xcc>
 8001692:	2b12      	cmp	r3, #18
 8001694:	d859      	bhi.n	800174a <HAL_GPIO_Init+0x12e>
 8001696:	a201      	add	r2, pc, #4	; (adr r2, 800169c <HAL_GPIO_Init+0x80>)
 8001698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800169c:	08001717 	.word	0x08001717
 80016a0:	080016f1 	.word	0x080016f1
 80016a4:	08001703 	.word	0x08001703
 80016a8:	08001745 	.word	0x08001745
 80016ac:	0800174b 	.word	0x0800174b
 80016b0:	0800174b 	.word	0x0800174b
 80016b4:	0800174b 	.word	0x0800174b
 80016b8:	0800174b 	.word	0x0800174b
 80016bc:	0800174b 	.word	0x0800174b
 80016c0:	0800174b 	.word	0x0800174b
 80016c4:	0800174b 	.word	0x0800174b
 80016c8:	0800174b 	.word	0x0800174b
 80016cc:	0800174b 	.word	0x0800174b
 80016d0:	0800174b 	.word	0x0800174b
 80016d4:	0800174b 	.word	0x0800174b
 80016d8:	0800174b 	.word	0x0800174b
 80016dc:	0800174b 	.word	0x0800174b
 80016e0:	080016f9 	.word	0x080016f9
 80016e4:	0800170d 	.word	0x0800170d
 80016e8:	4a79      	ldr	r2, [pc, #484]	; (80018d0 <HAL_GPIO_Init+0x2b4>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d013      	beq.n	8001716 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80016ee:	e02c      	b.n	800174a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	623b      	str	r3, [r7, #32]
          break;
 80016f6:	e029      	b.n	800174c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	3304      	adds	r3, #4
 80016fe:	623b      	str	r3, [r7, #32]
          break;
 8001700:	e024      	b.n	800174c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	68db      	ldr	r3, [r3, #12]
 8001706:	3308      	adds	r3, #8
 8001708:	623b      	str	r3, [r7, #32]
          break;
 800170a:	e01f      	b.n	800174c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	330c      	adds	r3, #12
 8001712:	623b      	str	r3, [r7, #32]
          break;
 8001714:	e01a      	b.n	800174c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d102      	bne.n	8001724 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800171e:	2304      	movs	r3, #4
 8001720:	623b      	str	r3, [r7, #32]
          break;
 8001722:	e013      	b.n	800174c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	2b01      	cmp	r3, #1
 800172a:	d105      	bne.n	8001738 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800172c:	2308      	movs	r3, #8
 800172e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	69fa      	ldr	r2, [r7, #28]
 8001734:	611a      	str	r2, [r3, #16]
          break;
 8001736:	e009      	b.n	800174c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001738:	2308      	movs	r3, #8
 800173a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	69fa      	ldr	r2, [r7, #28]
 8001740:	615a      	str	r2, [r3, #20]
          break;
 8001742:	e003      	b.n	800174c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001744:	2300      	movs	r3, #0
 8001746:	623b      	str	r3, [r7, #32]
          break;
 8001748:	e000      	b.n	800174c <HAL_GPIO_Init+0x130>
          break;
 800174a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800174c:	69bb      	ldr	r3, [r7, #24]
 800174e:	2bff      	cmp	r3, #255	; 0xff
 8001750:	d801      	bhi.n	8001756 <HAL_GPIO_Init+0x13a>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	e001      	b.n	800175a <HAL_GPIO_Init+0x13e>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	3304      	adds	r3, #4
 800175a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800175c:	69bb      	ldr	r3, [r7, #24]
 800175e:	2bff      	cmp	r3, #255	; 0xff
 8001760:	d802      	bhi.n	8001768 <HAL_GPIO_Init+0x14c>
 8001762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	e002      	b.n	800176e <HAL_GPIO_Init+0x152>
 8001768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176a:	3b08      	subs	r3, #8
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	210f      	movs	r1, #15
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	fa01 f303 	lsl.w	r3, r1, r3
 800177c:	43db      	mvns	r3, r3
 800177e:	401a      	ands	r2, r3
 8001780:	6a39      	ldr	r1, [r7, #32]
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	fa01 f303 	lsl.w	r3, r1, r3
 8001788:	431a      	orrs	r2, r3
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001796:	2b00      	cmp	r3, #0
 8001798:	f000 80b1 	beq.w	80018fe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800179c:	4b4d      	ldr	r3, [pc, #308]	; (80018d4 <HAL_GPIO_Init+0x2b8>)
 800179e:	699b      	ldr	r3, [r3, #24]
 80017a0:	4a4c      	ldr	r2, [pc, #304]	; (80018d4 <HAL_GPIO_Init+0x2b8>)
 80017a2:	f043 0301 	orr.w	r3, r3, #1
 80017a6:	6193      	str	r3, [r2, #24]
 80017a8:	4b4a      	ldr	r3, [pc, #296]	; (80018d4 <HAL_GPIO_Init+0x2b8>)
 80017aa:	699b      	ldr	r3, [r3, #24]
 80017ac:	f003 0301 	and.w	r3, r3, #1
 80017b0:	60bb      	str	r3, [r7, #8]
 80017b2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80017b4:	4a48      	ldr	r2, [pc, #288]	; (80018d8 <HAL_GPIO_Init+0x2bc>)
 80017b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b8:	089b      	lsrs	r3, r3, #2
 80017ba:	3302      	adds	r3, #2
 80017bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017c0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80017c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c4:	f003 0303 	and.w	r3, r3, #3
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	220f      	movs	r2, #15
 80017cc:	fa02 f303 	lsl.w	r3, r2, r3
 80017d0:	43db      	mvns	r3, r3
 80017d2:	68fa      	ldr	r2, [r7, #12]
 80017d4:	4013      	ands	r3, r2
 80017d6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	4a40      	ldr	r2, [pc, #256]	; (80018dc <HAL_GPIO_Init+0x2c0>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d013      	beq.n	8001808 <HAL_GPIO_Init+0x1ec>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	4a3f      	ldr	r2, [pc, #252]	; (80018e0 <HAL_GPIO_Init+0x2c4>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d00d      	beq.n	8001804 <HAL_GPIO_Init+0x1e8>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	4a3e      	ldr	r2, [pc, #248]	; (80018e4 <HAL_GPIO_Init+0x2c8>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d007      	beq.n	8001800 <HAL_GPIO_Init+0x1e4>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	4a3d      	ldr	r2, [pc, #244]	; (80018e8 <HAL_GPIO_Init+0x2cc>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d101      	bne.n	80017fc <HAL_GPIO_Init+0x1e0>
 80017f8:	2303      	movs	r3, #3
 80017fa:	e006      	b.n	800180a <HAL_GPIO_Init+0x1ee>
 80017fc:	2304      	movs	r3, #4
 80017fe:	e004      	b.n	800180a <HAL_GPIO_Init+0x1ee>
 8001800:	2302      	movs	r3, #2
 8001802:	e002      	b.n	800180a <HAL_GPIO_Init+0x1ee>
 8001804:	2301      	movs	r3, #1
 8001806:	e000      	b.n	800180a <HAL_GPIO_Init+0x1ee>
 8001808:	2300      	movs	r3, #0
 800180a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800180c:	f002 0203 	and.w	r2, r2, #3
 8001810:	0092      	lsls	r2, r2, #2
 8001812:	4093      	lsls	r3, r2
 8001814:	68fa      	ldr	r2, [r7, #12]
 8001816:	4313      	orrs	r3, r2
 8001818:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800181a:	492f      	ldr	r1, [pc, #188]	; (80018d8 <HAL_GPIO_Init+0x2bc>)
 800181c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181e:	089b      	lsrs	r3, r3, #2
 8001820:	3302      	adds	r3, #2
 8001822:	68fa      	ldr	r2, [r7, #12]
 8001824:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001830:	2b00      	cmp	r3, #0
 8001832:	d006      	beq.n	8001842 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001834:	4b2d      	ldr	r3, [pc, #180]	; (80018ec <HAL_GPIO_Init+0x2d0>)
 8001836:	689a      	ldr	r2, [r3, #8]
 8001838:	492c      	ldr	r1, [pc, #176]	; (80018ec <HAL_GPIO_Init+0x2d0>)
 800183a:	69bb      	ldr	r3, [r7, #24]
 800183c:	4313      	orrs	r3, r2
 800183e:	608b      	str	r3, [r1, #8]
 8001840:	e006      	b.n	8001850 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001842:	4b2a      	ldr	r3, [pc, #168]	; (80018ec <HAL_GPIO_Init+0x2d0>)
 8001844:	689a      	ldr	r2, [r3, #8]
 8001846:	69bb      	ldr	r3, [r7, #24]
 8001848:	43db      	mvns	r3, r3
 800184a:	4928      	ldr	r1, [pc, #160]	; (80018ec <HAL_GPIO_Init+0x2d0>)
 800184c:	4013      	ands	r3, r2
 800184e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001858:	2b00      	cmp	r3, #0
 800185a:	d006      	beq.n	800186a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800185c:	4b23      	ldr	r3, [pc, #140]	; (80018ec <HAL_GPIO_Init+0x2d0>)
 800185e:	68da      	ldr	r2, [r3, #12]
 8001860:	4922      	ldr	r1, [pc, #136]	; (80018ec <HAL_GPIO_Init+0x2d0>)
 8001862:	69bb      	ldr	r3, [r7, #24]
 8001864:	4313      	orrs	r3, r2
 8001866:	60cb      	str	r3, [r1, #12]
 8001868:	e006      	b.n	8001878 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800186a:	4b20      	ldr	r3, [pc, #128]	; (80018ec <HAL_GPIO_Init+0x2d0>)
 800186c:	68da      	ldr	r2, [r3, #12]
 800186e:	69bb      	ldr	r3, [r7, #24]
 8001870:	43db      	mvns	r3, r3
 8001872:	491e      	ldr	r1, [pc, #120]	; (80018ec <HAL_GPIO_Init+0x2d0>)
 8001874:	4013      	ands	r3, r2
 8001876:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001880:	2b00      	cmp	r3, #0
 8001882:	d006      	beq.n	8001892 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001884:	4b19      	ldr	r3, [pc, #100]	; (80018ec <HAL_GPIO_Init+0x2d0>)
 8001886:	685a      	ldr	r2, [r3, #4]
 8001888:	4918      	ldr	r1, [pc, #96]	; (80018ec <HAL_GPIO_Init+0x2d0>)
 800188a:	69bb      	ldr	r3, [r7, #24]
 800188c:	4313      	orrs	r3, r2
 800188e:	604b      	str	r3, [r1, #4]
 8001890:	e006      	b.n	80018a0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001892:	4b16      	ldr	r3, [pc, #88]	; (80018ec <HAL_GPIO_Init+0x2d0>)
 8001894:	685a      	ldr	r2, [r3, #4]
 8001896:	69bb      	ldr	r3, [r7, #24]
 8001898:	43db      	mvns	r3, r3
 800189a:	4914      	ldr	r1, [pc, #80]	; (80018ec <HAL_GPIO_Init+0x2d0>)
 800189c:	4013      	ands	r3, r2
 800189e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d021      	beq.n	80018f0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80018ac:	4b0f      	ldr	r3, [pc, #60]	; (80018ec <HAL_GPIO_Init+0x2d0>)
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	490e      	ldr	r1, [pc, #56]	; (80018ec <HAL_GPIO_Init+0x2d0>)
 80018b2:	69bb      	ldr	r3, [r7, #24]
 80018b4:	4313      	orrs	r3, r2
 80018b6:	600b      	str	r3, [r1, #0]
 80018b8:	e021      	b.n	80018fe <HAL_GPIO_Init+0x2e2>
 80018ba:	bf00      	nop
 80018bc:	10320000 	.word	0x10320000
 80018c0:	10310000 	.word	0x10310000
 80018c4:	10220000 	.word	0x10220000
 80018c8:	10210000 	.word	0x10210000
 80018cc:	10120000 	.word	0x10120000
 80018d0:	10110000 	.word	0x10110000
 80018d4:	40021000 	.word	0x40021000
 80018d8:	40010000 	.word	0x40010000
 80018dc:	40010800 	.word	0x40010800
 80018e0:	40010c00 	.word	0x40010c00
 80018e4:	40011000 	.word	0x40011000
 80018e8:	40011400 	.word	0x40011400
 80018ec:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80018f0:	4b0b      	ldr	r3, [pc, #44]	; (8001920 <HAL_GPIO_Init+0x304>)
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	69bb      	ldr	r3, [r7, #24]
 80018f6:	43db      	mvns	r3, r3
 80018f8:	4909      	ldr	r1, [pc, #36]	; (8001920 <HAL_GPIO_Init+0x304>)
 80018fa:	4013      	ands	r3, r2
 80018fc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80018fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001900:	3301      	adds	r3, #1
 8001902:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190a:	fa22 f303 	lsr.w	r3, r2, r3
 800190e:	2b00      	cmp	r3, #0
 8001910:	f47f ae8e 	bne.w	8001630 <HAL_GPIO_Init+0x14>
  }
}
 8001914:	bf00      	nop
 8001916:	bf00      	nop
 8001918:	372c      	adds	r7, #44	; 0x2c
 800191a:	46bd      	mov	sp, r7
 800191c:	bc80      	pop	{r7}
 800191e:	4770      	bx	lr
 8001920:	40010400 	.word	0x40010400

08001924 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001924:	b480      	push	{r7}
 8001926:	b085      	sub	sp, #20
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	460b      	mov	r3, r1
 800192e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	689a      	ldr	r2, [r3, #8]
 8001934:	887b      	ldrh	r3, [r7, #2]
 8001936:	4013      	ands	r3, r2
 8001938:	2b00      	cmp	r3, #0
 800193a:	d002      	beq.n	8001942 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800193c:	2301      	movs	r3, #1
 800193e:	73fb      	strb	r3, [r7, #15]
 8001940:	e001      	b.n	8001946 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001942:	2300      	movs	r3, #0
 8001944:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001946:	7bfb      	ldrb	r3, [r7, #15]
}
 8001948:	4618      	mov	r0, r3
 800194a:	3714      	adds	r7, #20
 800194c:	46bd      	mov	sp, r7
 800194e:	bc80      	pop	{r7}
 8001950:	4770      	bx	lr

08001952 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001952:	b480      	push	{r7}
 8001954:	b083      	sub	sp, #12
 8001956:	af00      	add	r7, sp, #0
 8001958:	6078      	str	r0, [r7, #4]
 800195a:	460b      	mov	r3, r1
 800195c:	807b      	strh	r3, [r7, #2]
 800195e:	4613      	mov	r3, r2
 8001960:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001962:	787b      	ldrb	r3, [r7, #1]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d003      	beq.n	8001970 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001968:	887a      	ldrh	r2, [r7, #2]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800196e:	e003      	b.n	8001978 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001970:	887b      	ldrh	r3, [r7, #2]
 8001972:	041a      	lsls	r2, r3, #16
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	611a      	str	r2, [r3, #16]
}
 8001978:	bf00      	nop
 800197a:	370c      	adds	r7, #12
 800197c:	46bd      	mov	sp, r7
 800197e:	bc80      	pop	{r7}
 8001980:	4770      	bx	lr

08001982 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001982:	b480      	push	{r7}
 8001984:	b085      	sub	sp, #20
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
 800198a:	460b      	mov	r3, r1
 800198c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	68db      	ldr	r3, [r3, #12]
 8001992:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001994:	887a      	ldrh	r2, [r7, #2]
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	4013      	ands	r3, r2
 800199a:	041a      	lsls	r2, r3, #16
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	43d9      	mvns	r1, r3
 80019a0:	887b      	ldrh	r3, [r7, #2]
 80019a2:	400b      	ands	r3, r1
 80019a4:	431a      	orrs	r2, r3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	611a      	str	r2, [r3, #16]
}
 80019aa:	bf00      	nop
 80019ac:	3714      	adds	r7, #20
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bc80      	pop	{r7}
 80019b2:	4770      	bx	lr

080019b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d101      	bne.n	80019c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e12b      	b.n	8001c1e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d106      	bne.n	80019e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2200      	movs	r2, #0
 80019d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f7ff f9e0 	bl	8000da0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2224      	movs	r2, #36	; 0x24
 80019e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f022 0201 	bic.w	r2, r2, #1
 80019f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a06:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a16:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001a18:	f001 f830 	bl	8002a7c <HAL_RCC_GetPCLK1Freq>
 8001a1c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	4a81      	ldr	r2, [pc, #516]	; (8001c28 <HAL_I2C_Init+0x274>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d807      	bhi.n	8001a38 <HAL_I2C_Init+0x84>
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	4a80      	ldr	r2, [pc, #512]	; (8001c2c <HAL_I2C_Init+0x278>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	bf94      	ite	ls
 8001a30:	2301      	movls	r3, #1
 8001a32:	2300      	movhi	r3, #0
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	e006      	b.n	8001a46 <HAL_I2C_Init+0x92>
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	4a7d      	ldr	r2, [pc, #500]	; (8001c30 <HAL_I2C_Init+0x27c>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	bf94      	ite	ls
 8001a40:	2301      	movls	r3, #1
 8001a42:	2300      	movhi	r3, #0
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e0e7      	b.n	8001c1e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	4a78      	ldr	r2, [pc, #480]	; (8001c34 <HAL_I2C_Init+0x280>)
 8001a52:	fba2 2303 	umull	r2, r3, r2, r3
 8001a56:	0c9b      	lsrs	r3, r3, #18
 8001a58:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	68ba      	ldr	r2, [r7, #8]
 8001a6a:	430a      	orrs	r2, r1
 8001a6c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	6a1b      	ldr	r3, [r3, #32]
 8001a74:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	4a6a      	ldr	r2, [pc, #424]	; (8001c28 <HAL_I2C_Init+0x274>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d802      	bhi.n	8001a88 <HAL_I2C_Init+0xd4>
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	3301      	adds	r3, #1
 8001a86:	e009      	b.n	8001a9c <HAL_I2C_Init+0xe8>
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001a8e:	fb02 f303 	mul.w	r3, r2, r3
 8001a92:	4a69      	ldr	r2, [pc, #420]	; (8001c38 <HAL_I2C_Init+0x284>)
 8001a94:	fba2 2303 	umull	r2, r3, r2, r3
 8001a98:	099b      	lsrs	r3, r3, #6
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	6812      	ldr	r2, [r2, #0]
 8001aa0:	430b      	orrs	r3, r1
 8001aa2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	69db      	ldr	r3, [r3, #28]
 8001aaa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001aae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	495c      	ldr	r1, [pc, #368]	; (8001c28 <HAL_I2C_Init+0x274>)
 8001ab8:	428b      	cmp	r3, r1
 8001aba:	d819      	bhi.n	8001af0 <HAL_I2C_Init+0x13c>
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	1e59      	subs	r1, r3, #1
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	005b      	lsls	r3, r3, #1
 8001ac6:	fbb1 f3f3 	udiv	r3, r1, r3
 8001aca:	1c59      	adds	r1, r3, #1
 8001acc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001ad0:	400b      	ands	r3, r1
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d00a      	beq.n	8001aec <HAL_I2C_Init+0x138>
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	1e59      	subs	r1, r3, #1
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	005b      	lsls	r3, r3, #1
 8001ae0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001aea:	e051      	b.n	8001b90 <HAL_I2C_Init+0x1dc>
 8001aec:	2304      	movs	r3, #4
 8001aee:	e04f      	b.n	8001b90 <HAL_I2C_Init+0x1dc>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d111      	bne.n	8001b1c <HAL_I2C_Init+0x168>
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	1e58      	subs	r0, r3, #1
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6859      	ldr	r1, [r3, #4]
 8001b00:	460b      	mov	r3, r1
 8001b02:	005b      	lsls	r3, r3, #1
 8001b04:	440b      	add	r3, r1
 8001b06:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	bf0c      	ite	eq
 8001b14:	2301      	moveq	r3, #1
 8001b16:	2300      	movne	r3, #0
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	e012      	b.n	8001b42 <HAL_I2C_Init+0x18e>
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	1e58      	subs	r0, r3, #1
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6859      	ldr	r1, [r3, #4]
 8001b24:	460b      	mov	r3, r1
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	440b      	add	r3, r1
 8001b2a:	0099      	lsls	r1, r3, #2
 8001b2c:	440b      	add	r3, r1
 8001b2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b32:	3301      	adds	r3, #1
 8001b34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	bf0c      	ite	eq
 8001b3c:	2301      	moveq	r3, #1
 8001b3e:	2300      	movne	r3, #0
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <HAL_I2C_Init+0x196>
 8001b46:	2301      	movs	r3, #1
 8001b48:	e022      	b.n	8001b90 <HAL_I2C_Init+0x1dc>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d10e      	bne.n	8001b70 <HAL_I2C_Init+0x1bc>
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	1e58      	subs	r0, r3, #1
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6859      	ldr	r1, [r3, #4]
 8001b5a:	460b      	mov	r3, r1
 8001b5c:	005b      	lsls	r3, r3, #1
 8001b5e:	440b      	add	r3, r1
 8001b60:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b64:	3301      	adds	r3, #1
 8001b66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b6e:	e00f      	b.n	8001b90 <HAL_I2C_Init+0x1dc>
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	1e58      	subs	r0, r3, #1
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6859      	ldr	r1, [r3, #4]
 8001b78:	460b      	mov	r3, r1
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	440b      	add	r3, r1
 8001b7e:	0099      	lsls	r1, r3, #2
 8001b80:	440b      	add	r3, r1
 8001b82:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b86:	3301      	adds	r3, #1
 8001b88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b8c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b90:	6879      	ldr	r1, [r7, #4]
 8001b92:	6809      	ldr	r1, [r1, #0]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	69da      	ldr	r2, [r3, #28]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6a1b      	ldr	r3, [r3, #32]
 8001baa:	431a      	orrs	r2, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	430a      	orrs	r2, r1
 8001bb2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001bbe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	6911      	ldr	r1, [r2, #16]
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	68d2      	ldr	r2, [r2, #12]
 8001bca:	4311      	orrs	r1, r2
 8001bcc:	687a      	ldr	r2, [r7, #4]
 8001bce:	6812      	ldr	r2, [r2, #0]
 8001bd0:	430b      	orrs	r3, r1
 8001bd2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	68db      	ldr	r3, [r3, #12]
 8001bda:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	695a      	ldr	r2, [r3, #20]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	699b      	ldr	r3, [r3, #24]
 8001be6:	431a      	orrs	r2, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	430a      	orrs	r2, r1
 8001bee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f042 0201 	orr.w	r2, r2, #1
 8001bfe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2200      	movs	r2, #0
 8001c04:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2220      	movs	r2, #32
 8001c0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2200      	movs	r2, #0
 8001c12:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2200      	movs	r2, #0
 8001c18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3710      	adds	r7, #16
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	000186a0 	.word	0x000186a0
 8001c2c:	001e847f 	.word	0x001e847f
 8001c30:	003d08ff 	.word	0x003d08ff
 8001c34:	431bde83 	.word	0x431bde83
 8001c38:	10624dd3 	.word	0x10624dd3

08001c3c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b088      	sub	sp, #32
 8001c40:	af02      	add	r7, sp, #8
 8001c42:	60f8      	str	r0, [r7, #12]
 8001c44:	607a      	str	r2, [r7, #4]
 8001c46:	461a      	mov	r2, r3
 8001c48:	460b      	mov	r3, r1
 8001c4a:	817b      	strh	r3, [r7, #10]
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001c50:	f7ff fba8 	bl	80013a4 <HAL_GetTick>
 8001c54:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	2b20      	cmp	r3, #32
 8001c60:	f040 80e0 	bne.w	8001e24 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	9300      	str	r3, [sp, #0]
 8001c68:	2319      	movs	r3, #25
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	4970      	ldr	r1, [pc, #448]	; (8001e30 <HAL_I2C_Master_Transmit+0x1f4>)
 8001c6e:	68f8      	ldr	r0, [r7, #12]
 8001c70:	f000 f964 	bl	8001f3c <I2C_WaitOnFlagUntilTimeout>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	e0d3      	b.n	8001e26 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d101      	bne.n	8001c8c <HAL_I2C_Master_Transmit+0x50>
 8001c88:	2302      	movs	r3, #2
 8001c8a:	e0cc      	b.n	8001e26 <HAL_I2C_Master_Transmit+0x1ea>
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2201      	movs	r2, #1
 8001c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0301 	and.w	r3, r3, #1
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d007      	beq.n	8001cb2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f042 0201 	orr.w	r2, r2, #1
 8001cb0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001cc0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	2221      	movs	r2, #33	; 0x21
 8001cc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	2210      	movs	r2, #16
 8001cce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	893a      	ldrh	r2, [r7, #8]
 8001ce2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ce8:	b29a      	uxth	r2, r3
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	4a50      	ldr	r2, [pc, #320]	; (8001e34 <HAL_I2C_Master_Transmit+0x1f8>)
 8001cf2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001cf4:	8979      	ldrh	r1, [r7, #10]
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	6a3a      	ldr	r2, [r7, #32]
 8001cfa:	68f8      	ldr	r0, [r7, #12]
 8001cfc:	f000 f89c 	bl	8001e38 <I2C_MasterRequestWrite>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e08d      	b.n	8001e26 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	613b      	str	r3, [r7, #16]
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	695b      	ldr	r3, [r3, #20]
 8001d14:	613b      	str	r3, [r7, #16]
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	699b      	ldr	r3, [r3, #24]
 8001d1c:	613b      	str	r3, [r7, #16]
 8001d1e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001d20:	e066      	b.n	8001df0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d22:	697a      	ldr	r2, [r7, #20]
 8001d24:	6a39      	ldr	r1, [r7, #32]
 8001d26:	68f8      	ldr	r0, [r7, #12]
 8001d28:	f000 fa22 	bl	8002170 <I2C_WaitOnTXEFlagUntilTimeout>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d00d      	beq.n	8001d4e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d36:	2b04      	cmp	r3, #4
 8001d38:	d107      	bne.n	8001d4a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d48:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e06b      	b.n	8001e26 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d52:	781a      	ldrb	r2, [r3, #0]
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5e:	1c5a      	adds	r2, r3, #1
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d68:	b29b      	uxth	r3, r3
 8001d6a:	3b01      	subs	r3, #1
 8001d6c:	b29a      	uxth	r2, r3
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d76:	3b01      	subs	r3, #1
 8001d78:	b29a      	uxth	r2, r3
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	695b      	ldr	r3, [r3, #20]
 8001d84:	f003 0304 	and.w	r3, r3, #4
 8001d88:	2b04      	cmp	r3, #4
 8001d8a:	d11b      	bne.n	8001dc4 <HAL_I2C_Master_Transmit+0x188>
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d017      	beq.n	8001dc4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d98:	781a      	ldrb	r2, [r3, #0]
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da4:	1c5a      	adds	r2, r3, #1
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dae:	b29b      	uxth	r3, r3
 8001db0:	3b01      	subs	r3, #1
 8001db2:	b29a      	uxth	r2, r3
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dbc:	3b01      	subs	r3, #1
 8001dbe:	b29a      	uxth	r2, r3
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001dc4:	697a      	ldr	r2, [r7, #20]
 8001dc6:	6a39      	ldr	r1, [r7, #32]
 8001dc8:	68f8      	ldr	r0, [r7, #12]
 8001dca:	f000 fa19 	bl	8002200 <I2C_WaitOnBTFFlagUntilTimeout>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d00d      	beq.n	8001df0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd8:	2b04      	cmp	r3, #4
 8001dda:	d107      	bne.n	8001dec <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dea:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e01a      	b.n	8001e26 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d194      	bne.n	8001d22 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2220      	movs	r2, #32
 8001e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	2200      	movs	r2, #0
 8001e14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001e20:	2300      	movs	r3, #0
 8001e22:	e000      	b.n	8001e26 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001e24:	2302      	movs	r3, #2
  }
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3718      	adds	r7, #24
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	00100002 	.word	0x00100002
 8001e34:	ffff0000 	.word	0xffff0000

08001e38 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b088      	sub	sp, #32
 8001e3c:	af02      	add	r7, sp, #8
 8001e3e:	60f8      	str	r0, [r7, #12]
 8001e40:	607a      	str	r2, [r7, #4]
 8001e42:	603b      	str	r3, [r7, #0]
 8001e44:	460b      	mov	r3, r1
 8001e46:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e4c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	2b08      	cmp	r3, #8
 8001e52:	d006      	beq.n	8001e62 <I2C_MasterRequestWrite+0x2a>
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d003      	beq.n	8001e62 <I2C_MasterRequestWrite+0x2a>
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001e60:	d108      	bne.n	8001e74 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e70:	601a      	str	r2, [r3, #0]
 8001e72:	e00b      	b.n	8001e8c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e78:	2b12      	cmp	r3, #18
 8001e7a:	d107      	bne.n	8001e8c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e8a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	9300      	str	r3, [sp, #0]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2200      	movs	r2, #0
 8001e94:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001e98:	68f8      	ldr	r0, [r7, #12]
 8001e9a:	f000 f84f 	bl	8001f3c <I2C_WaitOnFlagUntilTimeout>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d00d      	beq.n	8001ec0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001eb2:	d103      	bne.n	8001ebc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001eba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	e035      	b.n	8001f2c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	691b      	ldr	r3, [r3, #16]
 8001ec4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001ec8:	d108      	bne.n	8001edc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001eca:	897b      	ldrh	r3, [r7, #10]
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	461a      	mov	r2, r3
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001ed8:	611a      	str	r2, [r3, #16]
 8001eda:	e01b      	b.n	8001f14 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001edc:	897b      	ldrh	r3, [r7, #10]
 8001ede:	11db      	asrs	r3, r3, #7
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	f003 0306 	and.w	r3, r3, #6
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	f063 030f 	orn	r3, r3, #15
 8001eec:	b2da      	uxtb	r2, r3
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	490e      	ldr	r1, [pc, #56]	; (8001f34 <I2C_MasterRequestWrite+0xfc>)
 8001efa:	68f8      	ldr	r0, [r7, #12]
 8001efc:	f000 f898 	bl	8002030 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e010      	b.n	8001f2c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001f0a:	897b      	ldrh	r3, [r7, #10]
 8001f0c:	b2da      	uxtb	r2, r3
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	4907      	ldr	r1, [pc, #28]	; (8001f38 <I2C_MasterRequestWrite+0x100>)
 8001f1a:	68f8      	ldr	r0, [r7, #12]
 8001f1c:	f000 f888 	bl	8002030 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e000      	b.n	8001f2c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001f2a:	2300      	movs	r3, #0
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3718      	adds	r7, #24
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	00010008 	.word	0x00010008
 8001f38:	00010002 	.word	0x00010002

08001f3c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b084      	sub	sp, #16
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	60f8      	str	r0, [r7, #12]
 8001f44:	60b9      	str	r1, [r7, #8]
 8001f46:	603b      	str	r3, [r7, #0]
 8001f48:	4613      	mov	r3, r2
 8001f4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f4c:	e048      	b.n	8001fe0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f54:	d044      	beq.n	8001fe0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f56:	f7ff fa25 	bl	80013a4 <HAL_GetTick>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	69bb      	ldr	r3, [r7, #24]
 8001f5e:	1ad3      	subs	r3, r2, r3
 8001f60:	683a      	ldr	r2, [r7, #0]
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d302      	bcc.n	8001f6c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d139      	bne.n	8001fe0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	0c1b      	lsrs	r3, r3, #16
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d10d      	bne.n	8001f92 <I2C_WaitOnFlagUntilTimeout+0x56>
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	695b      	ldr	r3, [r3, #20]
 8001f7c:	43da      	mvns	r2, r3
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	4013      	ands	r3, r2
 8001f82:	b29b      	uxth	r3, r3
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	bf0c      	ite	eq
 8001f88:	2301      	moveq	r3, #1
 8001f8a:	2300      	movne	r3, #0
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	461a      	mov	r2, r3
 8001f90:	e00c      	b.n	8001fac <I2C_WaitOnFlagUntilTimeout+0x70>
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	699b      	ldr	r3, [r3, #24]
 8001f98:	43da      	mvns	r2, r3
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	b29b      	uxth	r3, r3
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	bf0c      	ite	eq
 8001fa4:	2301      	moveq	r3, #1
 8001fa6:	2300      	movne	r3, #0
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	461a      	mov	r2, r3
 8001fac:	79fb      	ldrb	r3, [r7, #7]
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d116      	bne.n	8001fe0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2220      	movs	r2, #32
 8001fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fcc:	f043 0220 	orr.w	r2, r3, #32
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e023      	b.n	8002028 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	0c1b      	lsrs	r3, r3, #16
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d10d      	bne.n	8002006 <I2C_WaitOnFlagUntilTimeout+0xca>
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	695b      	ldr	r3, [r3, #20]
 8001ff0:	43da      	mvns	r2, r3
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	b29b      	uxth	r3, r3
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	bf0c      	ite	eq
 8001ffc:	2301      	moveq	r3, #1
 8001ffe:	2300      	movne	r3, #0
 8002000:	b2db      	uxtb	r3, r3
 8002002:	461a      	mov	r2, r3
 8002004:	e00c      	b.n	8002020 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	699b      	ldr	r3, [r3, #24]
 800200c:	43da      	mvns	r2, r3
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	4013      	ands	r3, r2
 8002012:	b29b      	uxth	r3, r3
 8002014:	2b00      	cmp	r3, #0
 8002016:	bf0c      	ite	eq
 8002018:	2301      	moveq	r3, #1
 800201a:	2300      	movne	r3, #0
 800201c:	b2db      	uxtb	r3, r3
 800201e:	461a      	mov	r2, r3
 8002020:	79fb      	ldrb	r3, [r7, #7]
 8002022:	429a      	cmp	r2, r3
 8002024:	d093      	beq.n	8001f4e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002026:	2300      	movs	r3, #0
}
 8002028:	4618      	mov	r0, r3
 800202a:	3710      	adds	r7, #16
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}

08002030 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	60f8      	str	r0, [r7, #12]
 8002038:	60b9      	str	r1, [r7, #8]
 800203a:	607a      	str	r2, [r7, #4]
 800203c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800203e:	e071      	b.n	8002124 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	695b      	ldr	r3, [r3, #20]
 8002046:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800204a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800204e:	d123      	bne.n	8002098 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800205e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002068:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	2200      	movs	r2, #0
 800206e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2220      	movs	r2, #32
 8002074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2200      	movs	r2, #0
 800207c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002084:	f043 0204 	orr.w	r2, r3, #4
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2200      	movs	r2, #0
 8002090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e067      	b.n	8002168 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800209e:	d041      	beq.n	8002124 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020a0:	f7ff f980 	bl	80013a4 <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d302      	bcc.n	80020b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d136      	bne.n	8002124 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	0c1b      	lsrs	r3, r3, #16
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d10c      	bne.n	80020da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	695b      	ldr	r3, [r3, #20]
 80020c6:	43da      	mvns	r2, r3
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	4013      	ands	r3, r2
 80020cc:	b29b      	uxth	r3, r3
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	bf14      	ite	ne
 80020d2:	2301      	movne	r3, #1
 80020d4:	2300      	moveq	r3, #0
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	e00b      	b.n	80020f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	699b      	ldr	r3, [r3, #24]
 80020e0:	43da      	mvns	r2, r3
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	4013      	ands	r3, r2
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	bf14      	ite	ne
 80020ec:	2301      	movne	r3, #1
 80020ee:	2300      	moveq	r3, #0
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d016      	beq.n	8002124 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2200      	movs	r2, #0
 80020fa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2220      	movs	r2, #32
 8002100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2200      	movs	r2, #0
 8002108:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002110:	f043 0220 	orr.w	r2, r3, #32
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2200      	movs	r2, #0
 800211c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e021      	b.n	8002168 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	0c1b      	lsrs	r3, r3, #16
 8002128:	b2db      	uxtb	r3, r3
 800212a:	2b01      	cmp	r3, #1
 800212c:	d10c      	bne.n	8002148 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	695b      	ldr	r3, [r3, #20]
 8002134:	43da      	mvns	r2, r3
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	4013      	ands	r3, r2
 800213a:	b29b      	uxth	r3, r3
 800213c:	2b00      	cmp	r3, #0
 800213e:	bf14      	ite	ne
 8002140:	2301      	movne	r3, #1
 8002142:	2300      	moveq	r3, #0
 8002144:	b2db      	uxtb	r3, r3
 8002146:	e00b      	b.n	8002160 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	699b      	ldr	r3, [r3, #24]
 800214e:	43da      	mvns	r2, r3
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	4013      	ands	r3, r2
 8002154:	b29b      	uxth	r3, r3
 8002156:	2b00      	cmp	r3, #0
 8002158:	bf14      	ite	ne
 800215a:	2301      	movne	r3, #1
 800215c:	2300      	moveq	r3, #0
 800215e:	b2db      	uxtb	r3, r3
 8002160:	2b00      	cmp	r3, #0
 8002162:	f47f af6d 	bne.w	8002040 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002166:	2300      	movs	r3, #0
}
 8002168:	4618      	mov	r0, r3
 800216a:	3710      	adds	r7, #16
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}

08002170 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af00      	add	r7, sp, #0
 8002176:	60f8      	str	r0, [r7, #12]
 8002178:	60b9      	str	r1, [r7, #8]
 800217a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800217c:	e034      	b.n	80021e8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800217e:	68f8      	ldr	r0, [r7, #12]
 8002180:	f000 f886 	bl	8002290 <I2C_IsAcknowledgeFailed>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e034      	b.n	80021f8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002194:	d028      	beq.n	80021e8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002196:	f7ff f905 	bl	80013a4 <HAL_GetTick>
 800219a:	4602      	mov	r2, r0
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	68ba      	ldr	r2, [r7, #8]
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d302      	bcc.n	80021ac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d11d      	bne.n	80021e8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	695b      	ldr	r3, [r3, #20]
 80021b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021b6:	2b80      	cmp	r3, #128	; 0x80
 80021b8:	d016      	beq.n	80021e8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2200      	movs	r2, #0
 80021be:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2220      	movs	r2, #32
 80021c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2200      	movs	r2, #0
 80021cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d4:	f043 0220 	orr.w	r2, r3, #32
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2200      	movs	r2, #0
 80021e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e007      	b.n	80021f8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	695b      	ldr	r3, [r3, #20]
 80021ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021f2:	2b80      	cmp	r3, #128	; 0x80
 80021f4:	d1c3      	bne.n	800217e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80021f6:	2300      	movs	r3, #0
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3710      	adds	r7, #16
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}

08002200 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b084      	sub	sp, #16
 8002204:	af00      	add	r7, sp, #0
 8002206:	60f8      	str	r0, [r7, #12]
 8002208:	60b9      	str	r1, [r7, #8]
 800220a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800220c:	e034      	b.n	8002278 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800220e:	68f8      	ldr	r0, [r7, #12]
 8002210:	f000 f83e 	bl	8002290 <I2C_IsAcknowledgeFailed>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e034      	b.n	8002288 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002224:	d028      	beq.n	8002278 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002226:	f7ff f8bd 	bl	80013a4 <HAL_GetTick>
 800222a:	4602      	mov	r2, r0
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	68ba      	ldr	r2, [r7, #8]
 8002232:	429a      	cmp	r2, r3
 8002234:	d302      	bcc.n	800223c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d11d      	bne.n	8002278 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	695b      	ldr	r3, [r3, #20]
 8002242:	f003 0304 	and.w	r3, r3, #4
 8002246:	2b04      	cmp	r3, #4
 8002248:	d016      	beq.n	8002278 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2200      	movs	r2, #0
 800224e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2220      	movs	r2, #32
 8002254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2200      	movs	r2, #0
 800225c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002264:	f043 0220 	orr.w	r2, r3, #32
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2200      	movs	r2, #0
 8002270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e007      	b.n	8002288 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	695b      	ldr	r3, [r3, #20]
 800227e:	f003 0304 	and.w	r3, r3, #4
 8002282:	2b04      	cmp	r3, #4
 8002284:	d1c3      	bne.n	800220e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002286:	2300      	movs	r3, #0
}
 8002288:	4618      	mov	r0, r3
 800228a:	3710      	adds	r7, #16
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}

08002290 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	695b      	ldr	r3, [r3, #20]
 800229e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022a6:	d11b      	bne.n	80022e0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80022b0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2200      	movs	r2, #0
 80022b6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2220      	movs	r2, #32
 80022bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2200      	movs	r2, #0
 80022c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022cc:	f043 0204 	orr.w	r2, r3, #4
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2200      	movs	r2, #0
 80022d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e000      	b.n	80022e2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	370c      	adds	r7, #12
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bc80      	pop	{r7}
 80022ea:	4770      	bx	lr

080022ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b086      	sub	sp, #24
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d101      	bne.n	80022fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e26c      	b.n	80027d8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0301 	and.w	r3, r3, #1
 8002306:	2b00      	cmp	r3, #0
 8002308:	f000 8087 	beq.w	800241a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800230c:	4b92      	ldr	r3, [pc, #584]	; (8002558 <HAL_RCC_OscConfig+0x26c>)
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f003 030c 	and.w	r3, r3, #12
 8002314:	2b04      	cmp	r3, #4
 8002316:	d00c      	beq.n	8002332 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002318:	4b8f      	ldr	r3, [pc, #572]	; (8002558 <HAL_RCC_OscConfig+0x26c>)
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f003 030c 	and.w	r3, r3, #12
 8002320:	2b08      	cmp	r3, #8
 8002322:	d112      	bne.n	800234a <HAL_RCC_OscConfig+0x5e>
 8002324:	4b8c      	ldr	r3, [pc, #560]	; (8002558 <HAL_RCC_OscConfig+0x26c>)
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800232c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002330:	d10b      	bne.n	800234a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002332:	4b89      	ldr	r3, [pc, #548]	; (8002558 <HAL_RCC_OscConfig+0x26c>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d06c      	beq.n	8002418 <HAL_RCC_OscConfig+0x12c>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d168      	bne.n	8002418 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e246      	b.n	80027d8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002352:	d106      	bne.n	8002362 <HAL_RCC_OscConfig+0x76>
 8002354:	4b80      	ldr	r3, [pc, #512]	; (8002558 <HAL_RCC_OscConfig+0x26c>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a7f      	ldr	r2, [pc, #508]	; (8002558 <HAL_RCC_OscConfig+0x26c>)
 800235a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800235e:	6013      	str	r3, [r2, #0]
 8002360:	e02e      	b.n	80023c0 <HAL_RCC_OscConfig+0xd4>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d10c      	bne.n	8002384 <HAL_RCC_OscConfig+0x98>
 800236a:	4b7b      	ldr	r3, [pc, #492]	; (8002558 <HAL_RCC_OscConfig+0x26c>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a7a      	ldr	r2, [pc, #488]	; (8002558 <HAL_RCC_OscConfig+0x26c>)
 8002370:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002374:	6013      	str	r3, [r2, #0]
 8002376:	4b78      	ldr	r3, [pc, #480]	; (8002558 <HAL_RCC_OscConfig+0x26c>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a77      	ldr	r2, [pc, #476]	; (8002558 <HAL_RCC_OscConfig+0x26c>)
 800237c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002380:	6013      	str	r3, [r2, #0]
 8002382:	e01d      	b.n	80023c0 <HAL_RCC_OscConfig+0xd4>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800238c:	d10c      	bne.n	80023a8 <HAL_RCC_OscConfig+0xbc>
 800238e:	4b72      	ldr	r3, [pc, #456]	; (8002558 <HAL_RCC_OscConfig+0x26c>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a71      	ldr	r2, [pc, #452]	; (8002558 <HAL_RCC_OscConfig+0x26c>)
 8002394:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002398:	6013      	str	r3, [r2, #0]
 800239a:	4b6f      	ldr	r3, [pc, #444]	; (8002558 <HAL_RCC_OscConfig+0x26c>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a6e      	ldr	r2, [pc, #440]	; (8002558 <HAL_RCC_OscConfig+0x26c>)
 80023a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023a4:	6013      	str	r3, [r2, #0]
 80023a6:	e00b      	b.n	80023c0 <HAL_RCC_OscConfig+0xd4>
 80023a8:	4b6b      	ldr	r3, [pc, #428]	; (8002558 <HAL_RCC_OscConfig+0x26c>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a6a      	ldr	r2, [pc, #424]	; (8002558 <HAL_RCC_OscConfig+0x26c>)
 80023ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023b2:	6013      	str	r3, [r2, #0]
 80023b4:	4b68      	ldr	r3, [pc, #416]	; (8002558 <HAL_RCC_OscConfig+0x26c>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a67      	ldr	r2, [pc, #412]	; (8002558 <HAL_RCC_OscConfig+0x26c>)
 80023ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023be:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d013      	beq.n	80023f0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c8:	f7fe ffec 	bl	80013a4 <HAL_GetTick>
 80023cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ce:	e008      	b.n	80023e2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023d0:	f7fe ffe8 	bl	80013a4 <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	2b64      	cmp	r3, #100	; 0x64
 80023dc:	d901      	bls.n	80023e2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e1fa      	b.n	80027d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023e2:	4b5d      	ldr	r3, [pc, #372]	; (8002558 <HAL_RCC_OscConfig+0x26c>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d0f0      	beq.n	80023d0 <HAL_RCC_OscConfig+0xe4>
 80023ee:	e014      	b.n	800241a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f0:	f7fe ffd8 	bl	80013a4 <HAL_GetTick>
 80023f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023f6:	e008      	b.n	800240a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023f8:	f7fe ffd4 	bl	80013a4 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	2b64      	cmp	r3, #100	; 0x64
 8002404:	d901      	bls.n	800240a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e1e6      	b.n	80027d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800240a:	4b53      	ldr	r3, [pc, #332]	; (8002558 <HAL_RCC_OscConfig+0x26c>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d1f0      	bne.n	80023f8 <HAL_RCC_OscConfig+0x10c>
 8002416:	e000      	b.n	800241a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002418:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0302 	and.w	r3, r3, #2
 8002422:	2b00      	cmp	r3, #0
 8002424:	d063      	beq.n	80024ee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002426:	4b4c      	ldr	r3, [pc, #304]	; (8002558 <HAL_RCC_OscConfig+0x26c>)
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f003 030c 	and.w	r3, r3, #12
 800242e:	2b00      	cmp	r3, #0
 8002430:	d00b      	beq.n	800244a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002432:	4b49      	ldr	r3, [pc, #292]	; (8002558 <HAL_RCC_OscConfig+0x26c>)
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	f003 030c 	and.w	r3, r3, #12
 800243a:	2b08      	cmp	r3, #8
 800243c:	d11c      	bne.n	8002478 <HAL_RCC_OscConfig+0x18c>
 800243e:	4b46      	ldr	r3, [pc, #280]	; (8002558 <HAL_RCC_OscConfig+0x26c>)
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d116      	bne.n	8002478 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800244a:	4b43      	ldr	r3, [pc, #268]	; (8002558 <HAL_RCC_OscConfig+0x26c>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0302 	and.w	r3, r3, #2
 8002452:	2b00      	cmp	r3, #0
 8002454:	d005      	beq.n	8002462 <HAL_RCC_OscConfig+0x176>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	691b      	ldr	r3, [r3, #16]
 800245a:	2b01      	cmp	r3, #1
 800245c:	d001      	beq.n	8002462 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e1ba      	b.n	80027d8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002462:	4b3d      	ldr	r3, [pc, #244]	; (8002558 <HAL_RCC_OscConfig+0x26c>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	695b      	ldr	r3, [r3, #20]
 800246e:	00db      	lsls	r3, r3, #3
 8002470:	4939      	ldr	r1, [pc, #228]	; (8002558 <HAL_RCC_OscConfig+0x26c>)
 8002472:	4313      	orrs	r3, r2
 8002474:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002476:	e03a      	b.n	80024ee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	691b      	ldr	r3, [r3, #16]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d020      	beq.n	80024c2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002480:	4b36      	ldr	r3, [pc, #216]	; (800255c <HAL_RCC_OscConfig+0x270>)
 8002482:	2201      	movs	r2, #1
 8002484:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002486:	f7fe ff8d 	bl	80013a4 <HAL_GetTick>
 800248a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800248c:	e008      	b.n	80024a0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800248e:	f7fe ff89 	bl	80013a4 <HAL_GetTick>
 8002492:	4602      	mov	r2, r0
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	1ad3      	subs	r3, r2, r3
 8002498:	2b02      	cmp	r3, #2
 800249a:	d901      	bls.n	80024a0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800249c:	2303      	movs	r3, #3
 800249e:	e19b      	b.n	80027d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024a0:	4b2d      	ldr	r3, [pc, #180]	; (8002558 <HAL_RCC_OscConfig+0x26c>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0302 	and.w	r3, r3, #2
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d0f0      	beq.n	800248e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024ac:	4b2a      	ldr	r3, [pc, #168]	; (8002558 <HAL_RCC_OscConfig+0x26c>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	695b      	ldr	r3, [r3, #20]
 80024b8:	00db      	lsls	r3, r3, #3
 80024ba:	4927      	ldr	r1, [pc, #156]	; (8002558 <HAL_RCC_OscConfig+0x26c>)
 80024bc:	4313      	orrs	r3, r2
 80024be:	600b      	str	r3, [r1, #0]
 80024c0:	e015      	b.n	80024ee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024c2:	4b26      	ldr	r3, [pc, #152]	; (800255c <HAL_RCC_OscConfig+0x270>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c8:	f7fe ff6c 	bl	80013a4 <HAL_GetTick>
 80024cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024ce:	e008      	b.n	80024e2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024d0:	f7fe ff68 	bl	80013a4 <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d901      	bls.n	80024e2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e17a      	b.n	80027d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024e2:	4b1d      	ldr	r3, [pc, #116]	; (8002558 <HAL_RCC_OscConfig+0x26c>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0302 	and.w	r3, r3, #2
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d1f0      	bne.n	80024d0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0308 	and.w	r3, r3, #8
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d03a      	beq.n	8002570 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	699b      	ldr	r3, [r3, #24]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d019      	beq.n	8002536 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002502:	4b17      	ldr	r3, [pc, #92]	; (8002560 <HAL_RCC_OscConfig+0x274>)
 8002504:	2201      	movs	r2, #1
 8002506:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002508:	f7fe ff4c 	bl	80013a4 <HAL_GetTick>
 800250c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800250e:	e008      	b.n	8002522 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002510:	f7fe ff48 	bl	80013a4 <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	2b02      	cmp	r3, #2
 800251c:	d901      	bls.n	8002522 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e15a      	b.n	80027d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002522:	4b0d      	ldr	r3, [pc, #52]	; (8002558 <HAL_RCC_OscConfig+0x26c>)
 8002524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002526:	f003 0302 	and.w	r3, r3, #2
 800252a:	2b00      	cmp	r3, #0
 800252c:	d0f0      	beq.n	8002510 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800252e:	2001      	movs	r0, #1
 8002530:	f000 fab8 	bl	8002aa4 <RCC_Delay>
 8002534:	e01c      	b.n	8002570 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002536:	4b0a      	ldr	r3, [pc, #40]	; (8002560 <HAL_RCC_OscConfig+0x274>)
 8002538:	2200      	movs	r2, #0
 800253a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800253c:	f7fe ff32 	bl	80013a4 <HAL_GetTick>
 8002540:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002542:	e00f      	b.n	8002564 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002544:	f7fe ff2e 	bl	80013a4 <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	2b02      	cmp	r3, #2
 8002550:	d908      	bls.n	8002564 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	e140      	b.n	80027d8 <HAL_RCC_OscConfig+0x4ec>
 8002556:	bf00      	nop
 8002558:	40021000 	.word	0x40021000
 800255c:	42420000 	.word	0x42420000
 8002560:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002564:	4b9e      	ldr	r3, [pc, #632]	; (80027e0 <HAL_RCC_OscConfig+0x4f4>)
 8002566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002568:	f003 0302 	and.w	r3, r3, #2
 800256c:	2b00      	cmp	r3, #0
 800256e:	d1e9      	bne.n	8002544 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0304 	and.w	r3, r3, #4
 8002578:	2b00      	cmp	r3, #0
 800257a:	f000 80a6 	beq.w	80026ca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800257e:	2300      	movs	r3, #0
 8002580:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002582:	4b97      	ldr	r3, [pc, #604]	; (80027e0 <HAL_RCC_OscConfig+0x4f4>)
 8002584:	69db      	ldr	r3, [r3, #28]
 8002586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d10d      	bne.n	80025aa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800258e:	4b94      	ldr	r3, [pc, #592]	; (80027e0 <HAL_RCC_OscConfig+0x4f4>)
 8002590:	69db      	ldr	r3, [r3, #28]
 8002592:	4a93      	ldr	r2, [pc, #588]	; (80027e0 <HAL_RCC_OscConfig+0x4f4>)
 8002594:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002598:	61d3      	str	r3, [r2, #28]
 800259a:	4b91      	ldr	r3, [pc, #580]	; (80027e0 <HAL_RCC_OscConfig+0x4f4>)
 800259c:	69db      	ldr	r3, [r3, #28]
 800259e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025a2:	60bb      	str	r3, [r7, #8]
 80025a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025a6:	2301      	movs	r3, #1
 80025a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025aa:	4b8e      	ldr	r3, [pc, #568]	; (80027e4 <HAL_RCC_OscConfig+0x4f8>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d118      	bne.n	80025e8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025b6:	4b8b      	ldr	r3, [pc, #556]	; (80027e4 <HAL_RCC_OscConfig+0x4f8>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a8a      	ldr	r2, [pc, #552]	; (80027e4 <HAL_RCC_OscConfig+0x4f8>)
 80025bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025c2:	f7fe feef 	bl	80013a4 <HAL_GetTick>
 80025c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025c8:	e008      	b.n	80025dc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025ca:	f7fe feeb 	bl	80013a4 <HAL_GetTick>
 80025ce:	4602      	mov	r2, r0
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	2b64      	cmp	r3, #100	; 0x64
 80025d6:	d901      	bls.n	80025dc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80025d8:	2303      	movs	r3, #3
 80025da:	e0fd      	b.n	80027d8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025dc:	4b81      	ldr	r3, [pc, #516]	; (80027e4 <HAL_RCC_OscConfig+0x4f8>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d0f0      	beq.n	80025ca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d106      	bne.n	80025fe <HAL_RCC_OscConfig+0x312>
 80025f0:	4b7b      	ldr	r3, [pc, #492]	; (80027e0 <HAL_RCC_OscConfig+0x4f4>)
 80025f2:	6a1b      	ldr	r3, [r3, #32]
 80025f4:	4a7a      	ldr	r2, [pc, #488]	; (80027e0 <HAL_RCC_OscConfig+0x4f4>)
 80025f6:	f043 0301 	orr.w	r3, r3, #1
 80025fa:	6213      	str	r3, [r2, #32]
 80025fc:	e02d      	b.n	800265a <HAL_RCC_OscConfig+0x36e>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	68db      	ldr	r3, [r3, #12]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d10c      	bne.n	8002620 <HAL_RCC_OscConfig+0x334>
 8002606:	4b76      	ldr	r3, [pc, #472]	; (80027e0 <HAL_RCC_OscConfig+0x4f4>)
 8002608:	6a1b      	ldr	r3, [r3, #32]
 800260a:	4a75      	ldr	r2, [pc, #468]	; (80027e0 <HAL_RCC_OscConfig+0x4f4>)
 800260c:	f023 0301 	bic.w	r3, r3, #1
 8002610:	6213      	str	r3, [r2, #32]
 8002612:	4b73      	ldr	r3, [pc, #460]	; (80027e0 <HAL_RCC_OscConfig+0x4f4>)
 8002614:	6a1b      	ldr	r3, [r3, #32]
 8002616:	4a72      	ldr	r2, [pc, #456]	; (80027e0 <HAL_RCC_OscConfig+0x4f4>)
 8002618:	f023 0304 	bic.w	r3, r3, #4
 800261c:	6213      	str	r3, [r2, #32]
 800261e:	e01c      	b.n	800265a <HAL_RCC_OscConfig+0x36e>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	2b05      	cmp	r3, #5
 8002626:	d10c      	bne.n	8002642 <HAL_RCC_OscConfig+0x356>
 8002628:	4b6d      	ldr	r3, [pc, #436]	; (80027e0 <HAL_RCC_OscConfig+0x4f4>)
 800262a:	6a1b      	ldr	r3, [r3, #32]
 800262c:	4a6c      	ldr	r2, [pc, #432]	; (80027e0 <HAL_RCC_OscConfig+0x4f4>)
 800262e:	f043 0304 	orr.w	r3, r3, #4
 8002632:	6213      	str	r3, [r2, #32]
 8002634:	4b6a      	ldr	r3, [pc, #424]	; (80027e0 <HAL_RCC_OscConfig+0x4f4>)
 8002636:	6a1b      	ldr	r3, [r3, #32]
 8002638:	4a69      	ldr	r2, [pc, #420]	; (80027e0 <HAL_RCC_OscConfig+0x4f4>)
 800263a:	f043 0301 	orr.w	r3, r3, #1
 800263e:	6213      	str	r3, [r2, #32]
 8002640:	e00b      	b.n	800265a <HAL_RCC_OscConfig+0x36e>
 8002642:	4b67      	ldr	r3, [pc, #412]	; (80027e0 <HAL_RCC_OscConfig+0x4f4>)
 8002644:	6a1b      	ldr	r3, [r3, #32]
 8002646:	4a66      	ldr	r2, [pc, #408]	; (80027e0 <HAL_RCC_OscConfig+0x4f4>)
 8002648:	f023 0301 	bic.w	r3, r3, #1
 800264c:	6213      	str	r3, [r2, #32]
 800264e:	4b64      	ldr	r3, [pc, #400]	; (80027e0 <HAL_RCC_OscConfig+0x4f4>)
 8002650:	6a1b      	ldr	r3, [r3, #32]
 8002652:	4a63      	ldr	r2, [pc, #396]	; (80027e0 <HAL_RCC_OscConfig+0x4f4>)
 8002654:	f023 0304 	bic.w	r3, r3, #4
 8002658:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	68db      	ldr	r3, [r3, #12]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d015      	beq.n	800268e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002662:	f7fe fe9f 	bl	80013a4 <HAL_GetTick>
 8002666:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002668:	e00a      	b.n	8002680 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800266a:	f7fe fe9b 	bl	80013a4 <HAL_GetTick>
 800266e:	4602      	mov	r2, r0
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	f241 3288 	movw	r2, #5000	; 0x1388
 8002678:	4293      	cmp	r3, r2
 800267a:	d901      	bls.n	8002680 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800267c:	2303      	movs	r3, #3
 800267e:	e0ab      	b.n	80027d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002680:	4b57      	ldr	r3, [pc, #348]	; (80027e0 <HAL_RCC_OscConfig+0x4f4>)
 8002682:	6a1b      	ldr	r3, [r3, #32]
 8002684:	f003 0302 	and.w	r3, r3, #2
 8002688:	2b00      	cmp	r3, #0
 800268a:	d0ee      	beq.n	800266a <HAL_RCC_OscConfig+0x37e>
 800268c:	e014      	b.n	80026b8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800268e:	f7fe fe89 	bl	80013a4 <HAL_GetTick>
 8002692:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002694:	e00a      	b.n	80026ac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002696:	f7fe fe85 	bl	80013a4 <HAL_GetTick>
 800269a:	4602      	mov	r2, r0
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d901      	bls.n	80026ac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80026a8:	2303      	movs	r3, #3
 80026aa:	e095      	b.n	80027d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026ac:	4b4c      	ldr	r3, [pc, #304]	; (80027e0 <HAL_RCC_OscConfig+0x4f4>)
 80026ae:	6a1b      	ldr	r3, [r3, #32]
 80026b0:	f003 0302 	and.w	r3, r3, #2
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d1ee      	bne.n	8002696 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80026b8:	7dfb      	ldrb	r3, [r7, #23]
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d105      	bne.n	80026ca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026be:	4b48      	ldr	r3, [pc, #288]	; (80027e0 <HAL_RCC_OscConfig+0x4f4>)
 80026c0:	69db      	ldr	r3, [r3, #28]
 80026c2:	4a47      	ldr	r2, [pc, #284]	; (80027e0 <HAL_RCC_OscConfig+0x4f4>)
 80026c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026c8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	69db      	ldr	r3, [r3, #28]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	f000 8081 	beq.w	80027d6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026d4:	4b42      	ldr	r3, [pc, #264]	; (80027e0 <HAL_RCC_OscConfig+0x4f4>)
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f003 030c 	and.w	r3, r3, #12
 80026dc:	2b08      	cmp	r3, #8
 80026de:	d061      	beq.n	80027a4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	69db      	ldr	r3, [r3, #28]
 80026e4:	2b02      	cmp	r3, #2
 80026e6:	d146      	bne.n	8002776 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026e8:	4b3f      	ldr	r3, [pc, #252]	; (80027e8 <HAL_RCC_OscConfig+0x4fc>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ee:	f7fe fe59 	bl	80013a4 <HAL_GetTick>
 80026f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026f4:	e008      	b.n	8002708 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026f6:	f7fe fe55 	bl	80013a4 <HAL_GetTick>
 80026fa:	4602      	mov	r2, r0
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	2b02      	cmp	r3, #2
 8002702:	d901      	bls.n	8002708 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002704:	2303      	movs	r3, #3
 8002706:	e067      	b.n	80027d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002708:	4b35      	ldr	r3, [pc, #212]	; (80027e0 <HAL_RCC_OscConfig+0x4f4>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002710:	2b00      	cmp	r3, #0
 8002712:	d1f0      	bne.n	80026f6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6a1b      	ldr	r3, [r3, #32]
 8002718:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800271c:	d108      	bne.n	8002730 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800271e:	4b30      	ldr	r3, [pc, #192]	; (80027e0 <HAL_RCC_OscConfig+0x4f4>)
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	492d      	ldr	r1, [pc, #180]	; (80027e0 <HAL_RCC_OscConfig+0x4f4>)
 800272c:	4313      	orrs	r3, r2
 800272e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002730:	4b2b      	ldr	r3, [pc, #172]	; (80027e0 <HAL_RCC_OscConfig+0x4f4>)
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6a19      	ldr	r1, [r3, #32]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002740:	430b      	orrs	r3, r1
 8002742:	4927      	ldr	r1, [pc, #156]	; (80027e0 <HAL_RCC_OscConfig+0x4f4>)
 8002744:	4313      	orrs	r3, r2
 8002746:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002748:	4b27      	ldr	r3, [pc, #156]	; (80027e8 <HAL_RCC_OscConfig+0x4fc>)
 800274a:	2201      	movs	r2, #1
 800274c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800274e:	f7fe fe29 	bl	80013a4 <HAL_GetTick>
 8002752:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002754:	e008      	b.n	8002768 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002756:	f7fe fe25 	bl	80013a4 <HAL_GetTick>
 800275a:	4602      	mov	r2, r0
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	2b02      	cmp	r3, #2
 8002762:	d901      	bls.n	8002768 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002764:	2303      	movs	r3, #3
 8002766:	e037      	b.n	80027d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002768:	4b1d      	ldr	r3, [pc, #116]	; (80027e0 <HAL_RCC_OscConfig+0x4f4>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002770:	2b00      	cmp	r3, #0
 8002772:	d0f0      	beq.n	8002756 <HAL_RCC_OscConfig+0x46a>
 8002774:	e02f      	b.n	80027d6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002776:	4b1c      	ldr	r3, [pc, #112]	; (80027e8 <HAL_RCC_OscConfig+0x4fc>)
 8002778:	2200      	movs	r2, #0
 800277a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800277c:	f7fe fe12 	bl	80013a4 <HAL_GetTick>
 8002780:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002782:	e008      	b.n	8002796 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002784:	f7fe fe0e 	bl	80013a4 <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	2b02      	cmp	r3, #2
 8002790:	d901      	bls.n	8002796 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e020      	b.n	80027d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002796:	4b12      	ldr	r3, [pc, #72]	; (80027e0 <HAL_RCC_OscConfig+0x4f4>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d1f0      	bne.n	8002784 <HAL_RCC_OscConfig+0x498>
 80027a2:	e018      	b.n	80027d6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	69db      	ldr	r3, [r3, #28]
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d101      	bne.n	80027b0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e013      	b.n	80027d8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80027b0:	4b0b      	ldr	r3, [pc, #44]	; (80027e0 <HAL_RCC_OscConfig+0x4f4>)
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6a1b      	ldr	r3, [r3, #32]
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d106      	bne.n	80027d2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d001      	beq.n	80027d6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e000      	b.n	80027d8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80027d6:	2300      	movs	r3, #0
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3718      	adds	r7, #24
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	40021000 	.word	0x40021000
 80027e4:	40007000 	.word	0x40007000
 80027e8:	42420060 	.word	0x42420060

080027ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b084      	sub	sp, #16
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d101      	bne.n	8002800 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e0d0      	b.n	80029a2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002800:	4b6a      	ldr	r3, [pc, #424]	; (80029ac <HAL_RCC_ClockConfig+0x1c0>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0307 	and.w	r3, r3, #7
 8002808:	683a      	ldr	r2, [r7, #0]
 800280a:	429a      	cmp	r2, r3
 800280c:	d910      	bls.n	8002830 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800280e:	4b67      	ldr	r3, [pc, #412]	; (80029ac <HAL_RCC_ClockConfig+0x1c0>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f023 0207 	bic.w	r2, r3, #7
 8002816:	4965      	ldr	r1, [pc, #404]	; (80029ac <HAL_RCC_ClockConfig+0x1c0>)
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	4313      	orrs	r3, r2
 800281c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800281e:	4b63      	ldr	r3, [pc, #396]	; (80029ac <HAL_RCC_ClockConfig+0x1c0>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0307 	and.w	r3, r3, #7
 8002826:	683a      	ldr	r2, [r7, #0]
 8002828:	429a      	cmp	r2, r3
 800282a:	d001      	beq.n	8002830 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e0b8      	b.n	80029a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0302 	and.w	r3, r3, #2
 8002838:	2b00      	cmp	r3, #0
 800283a:	d020      	beq.n	800287e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0304 	and.w	r3, r3, #4
 8002844:	2b00      	cmp	r3, #0
 8002846:	d005      	beq.n	8002854 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002848:	4b59      	ldr	r3, [pc, #356]	; (80029b0 <HAL_RCC_ClockConfig+0x1c4>)
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	4a58      	ldr	r2, [pc, #352]	; (80029b0 <HAL_RCC_ClockConfig+0x1c4>)
 800284e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002852:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0308 	and.w	r3, r3, #8
 800285c:	2b00      	cmp	r3, #0
 800285e:	d005      	beq.n	800286c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002860:	4b53      	ldr	r3, [pc, #332]	; (80029b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	4a52      	ldr	r2, [pc, #328]	; (80029b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002866:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800286a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800286c:	4b50      	ldr	r3, [pc, #320]	; (80029b0 <HAL_RCC_ClockConfig+0x1c4>)
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	494d      	ldr	r1, [pc, #308]	; (80029b0 <HAL_RCC_ClockConfig+0x1c4>)
 800287a:	4313      	orrs	r3, r2
 800287c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0301 	and.w	r3, r3, #1
 8002886:	2b00      	cmp	r3, #0
 8002888:	d040      	beq.n	800290c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	2b01      	cmp	r3, #1
 8002890:	d107      	bne.n	80028a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002892:	4b47      	ldr	r3, [pc, #284]	; (80029b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d115      	bne.n	80028ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e07f      	b.n	80029a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d107      	bne.n	80028ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028aa:	4b41      	ldr	r3, [pc, #260]	; (80029b0 <HAL_RCC_ClockConfig+0x1c4>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d109      	bne.n	80028ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e073      	b.n	80029a2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028ba:	4b3d      	ldr	r3, [pc, #244]	; (80029b0 <HAL_RCC_ClockConfig+0x1c4>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0302 	and.w	r3, r3, #2
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d101      	bne.n	80028ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e06b      	b.n	80029a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028ca:	4b39      	ldr	r3, [pc, #228]	; (80029b0 <HAL_RCC_ClockConfig+0x1c4>)
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f023 0203 	bic.w	r2, r3, #3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	4936      	ldr	r1, [pc, #216]	; (80029b0 <HAL_RCC_ClockConfig+0x1c4>)
 80028d8:	4313      	orrs	r3, r2
 80028da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028dc:	f7fe fd62 	bl	80013a4 <HAL_GetTick>
 80028e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028e2:	e00a      	b.n	80028fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028e4:	f7fe fd5e 	bl	80013a4 <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d901      	bls.n	80028fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e053      	b.n	80029a2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028fa:	4b2d      	ldr	r3, [pc, #180]	; (80029b0 <HAL_RCC_ClockConfig+0x1c4>)
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	f003 020c 	and.w	r2, r3, #12
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	429a      	cmp	r2, r3
 800290a:	d1eb      	bne.n	80028e4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800290c:	4b27      	ldr	r3, [pc, #156]	; (80029ac <HAL_RCC_ClockConfig+0x1c0>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0307 	and.w	r3, r3, #7
 8002914:	683a      	ldr	r2, [r7, #0]
 8002916:	429a      	cmp	r2, r3
 8002918:	d210      	bcs.n	800293c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800291a:	4b24      	ldr	r3, [pc, #144]	; (80029ac <HAL_RCC_ClockConfig+0x1c0>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f023 0207 	bic.w	r2, r3, #7
 8002922:	4922      	ldr	r1, [pc, #136]	; (80029ac <HAL_RCC_ClockConfig+0x1c0>)
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	4313      	orrs	r3, r2
 8002928:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800292a:	4b20      	ldr	r3, [pc, #128]	; (80029ac <HAL_RCC_ClockConfig+0x1c0>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0307 	and.w	r3, r3, #7
 8002932:	683a      	ldr	r2, [r7, #0]
 8002934:	429a      	cmp	r2, r3
 8002936:	d001      	beq.n	800293c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e032      	b.n	80029a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0304 	and.w	r3, r3, #4
 8002944:	2b00      	cmp	r3, #0
 8002946:	d008      	beq.n	800295a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002948:	4b19      	ldr	r3, [pc, #100]	; (80029b0 <HAL_RCC_ClockConfig+0x1c4>)
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	4916      	ldr	r1, [pc, #88]	; (80029b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002956:	4313      	orrs	r3, r2
 8002958:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0308 	and.w	r3, r3, #8
 8002962:	2b00      	cmp	r3, #0
 8002964:	d009      	beq.n	800297a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002966:	4b12      	ldr	r3, [pc, #72]	; (80029b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	691b      	ldr	r3, [r3, #16]
 8002972:	00db      	lsls	r3, r3, #3
 8002974:	490e      	ldr	r1, [pc, #56]	; (80029b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002976:	4313      	orrs	r3, r2
 8002978:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800297a:	f000 f821 	bl	80029c0 <HAL_RCC_GetSysClockFreq>
 800297e:	4602      	mov	r2, r0
 8002980:	4b0b      	ldr	r3, [pc, #44]	; (80029b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	091b      	lsrs	r3, r3, #4
 8002986:	f003 030f 	and.w	r3, r3, #15
 800298a:	490a      	ldr	r1, [pc, #40]	; (80029b4 <HAL_RCC_ClockConfig+0x1c8>)
 800298c:	5ccb      	ldrb	r3, [r1, r3]
 800298e:	fa22 f303 	lsr.w	r3, r2, r3
 8002992:	4a09      	ldr	r2, [pc, #36]	; (80029b8 <HAL_RCC_ClockConfig+0x1cc>)
 8002994:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002996:	4b09      	ldr	r3, [pc, #36]	; (80029bc <HAL_RCC_ClockConfig+0x1d0>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4618      	mov	r0, r3
 800299c:	f7fe fcc0 	bl	8001320 <HAL_InitTick>

  return HAL_OK;
 80029a0:	2300      	movs	r3, #0
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3710      	adds	r7, #16
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	40022000 	.word	0x40022000
 80029b0:	40021000 	.word	0x40021000
 80029b4:	08003c08 	.word	0x08003c08
 80029b8:	20000018 	.word	0x20000018
 80029bc:	2000002c 	.word	0x2000002c

080029c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b087      	sub	sp, #28
 80029c4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80029c6:	2300      	movs	r3, #0
 80029c8:	60fb      	str	r3, [r7, #12]
 80029ca:	2300      	movs	r3, #0
 80029cc:	60bb      	str	r3, [r7, #8]
 80029ce:	2300      	movs	r3, #0
 80029d0:	617b      	str	r3, [r7, #20]
 80029d2:	2300      	movs	r3, #0
 80029d4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80029d6:	2300      	movs	r3, #0
 80029d8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80029da:	4b1e      	ldr	r3, [pc, #120]	; (8002a54 <HAL_RCC_GetSysClockFreq+0x94>)
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	f003 030c 	and.w	r3, r3, #12
 80029e6:	2b04      	cmp	r3, #4
 80029e8:	d002      	beq.n	80029f0 <HAL_RCC_GetSysClockFreq+0x30>
 80029ea:	2b08      	cmp	r3, #8
 80029ec:	d003      	beq.n	80029f6 <HAL_RCC_GetSysClockFreq+0x36>
 80029ee:	e027      	b.n	8002a40 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80029f0:	4b19      	ldr	r3, [pc, #100]	; (8002a58 <HAL_RCC_GetSysClockFreq+0x98>)
 80029f2:	613b      	str	r3, [r7, #16]
      break;
 80029f4:	e027      	b.n	8002a46 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	0c9b      	lsrs	r3, r3, #18
 80029fa:	f003 030f 	and.w	r3, r3, #15
 80029fe:	4a17      	ldr	r2, [pc, #92]	; (8002a5c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002a00:	5cd3      	ldrb	r3, [r2, r3]
 8002a02:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d010      	beq.n	8002a30 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a0e:	4b11      	ldr	r3, [pc, #68]	; (8002a54 <HAL_RCC_GetSysClockFreq+0x94>)
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	0c5b      	lsrs	r3, r3, #17
 8002a14:	f003 0301 	and.w	r3, r3, #1
 8002a18:	4a11      	ldr	r2, [pc, #68]	; (8002a60 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002a1a:	5cd3      	ldrb	r3, [r2, r3]
 8002a1c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4a0d      	ldr	r2, [pc, #52]	; (8002a58 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a22:	fb02 f203 	mul.w	r2, r2, r3
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a2c:	617b      	str	r3, [r7, #20]
 8002a2e:	e004      	b.n	8002a3a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	4a0c      	ldr	r2, [pc, #48]	; (8002a64 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002a34:	fb02 f303 	mul.w	r3, r2, r3
 8002a38:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	613b      	str	r3, [r7, #16]
      break;
 8002a3e:	e002      	b.n	8002a46 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a40:	4b05      	ldr	r3, [pc, #20]	; (8002a58 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a42:	613b      	str	r3, [r7, #16]
      break;
 8002a44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a46:	693b      	ldr	r3, [r7, #16]
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	371c      	adds	r7, #28
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bc80      	pop	{r7}
 8002a50:	4770      	bx	lr
 8002a52:	bf00      	nop
 8002a54:	40021000 	.word	0x40021000
 8002a58:	007a1200 	.word	0x007a1200
 8002a5c:	08003c20 	.word	0x08003c20
 8002a60:	08003c30 	.word	0x08003c30
 8002a64:	003d0900 	.word	0x003d0900

08002a68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a6c:	4b02      	ldr	r3, [pc, #8]	; (8002a78 <HAL_RCC_GetHCLKFreq+0x10>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bc80      	pop	{r7}
 8002a76:	4770      	bx	lr
 8002a78:	20000018 	.word	0x20000018

08002a7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a80:	f7ff fff2 	bl	8002a68 <HAL_RCC_GetHCLKFreq>
 8002a84:	4602      	mov	r2, r0
 8002a86:	4b05      	ldr	r3, [pc, #20]	; (8002a9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	0a1b      	lsrs	r3, r3, #8
 8002a8c:	f003 0307 	and.w	r3, r3, #7
 8002a90:	4903      	ldr	r1, [pc, #12]	; (8002aa0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a92:	5ccb      	ldrb	r3, [r1, r3]
 8002a94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	40021000 	.word	0x40021000
 8002aa0:	08003c18 	.word	0x08003c18

08002aa4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b085      	sub	sp, #20
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002aac:	4b0a      	ldr	r3, [pc, #40]	; (8002ad8 <RCC_Delay+0x34>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a0a      	ldr	r2, [pc, #40]	; (8002adc <RCC_Delay+0x38>)
 8002ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ab6:	0a5b      	lsrs	r3, r3, #9
 8002ab8:	687a      	ldr	r2, [r7, #4]
 8002aba:	fb02 f303 	mul.w	r3, r2, r3
 8002abe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002ac0:	bf00      	nop
  }
  while (Delay --);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	1e5a      	subs	r2, r3, #1
 8002ac6:	60fa      	str	r2, [r7, #12]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d1f9      	bne.n	8002ac0 <RCC_Delay+0x1c>
}
 8002acc:	bf00      	nop
 8002ace:	bf00      	nop
 8002ad0:	3714      	adds	r7, #20
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bc80      	pop	{r7}
 8002ad6:	4770      	bx	lr
 8002ad8:	20000018 	.word	0x20000018
 8002adc:	10624dd3 	.word	0x10624dd3

08002ae0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b082      	sub	sp, #8
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d101      	bne.n	8002af2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e041      	b.n	8002b76 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d106      	bne.n	8002b0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2200      	movs	r2, #0
 8002b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f7fe f99a 	bl	8000e40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2202      	movs	r2, #2
 8002b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	3304      	adds	r3, #4
 8002b1c:	4619      	mov	r1, r3
 8002b1e:	4610      	mov	r0, r2
 8002b20:	f000 fa5c 	bl	8002fdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2201      	movs	r2, #1
 8002b58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2201      	movs	r2, #1
 8002b68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b74:	2300      	movs	r3, #0
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3708      	adds	r7, #8
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
	...

08002b80 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b085      	sub	sp, #20
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d001      	beq.n	8002b98 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e03a      	b.n	8002c0e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2202      	movs	r2, #2
 8002b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	68da      	ldr	r2, [r3, #12]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f042 0201 	orr.w	r2, r2, #1
 8002bae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a18      	ldr	r2, [pc, #96]	; (8002c18 <HAL_TIM_Base_Start_IT+0x98>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d00e      	beq.n	8002bd8 <HAL_TIM_Base_Start_IT+0x58>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bc2:	d009      	beq.n	8002bd8 <HAL_TIM_Base_Start_IT+0x58>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a14      	ldr	r2, [pc, #80]	; (8002c1c <HAL_TIM_Base_Start_IT+0x9c>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d004      	beq.n	8002bd8 <HAL_TIM_Base_Start_IT+0x58>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a13      	ldr	r2, [pc, #76]	; (8002c20 <HAL_TIM_Base_Start_IT+0xa0>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d111      	bne.n	8002bfc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	f003 0307 	and.w	r3, r3, #7
 8002be2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2b06      	cmp	r3, #6
 8002be8:	d010      	beq.n	8002c0c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f042 0201 	orr.w	r2, r2, #1
 8002bf8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bfa:	e007      	b.n	8002c0c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f042 0201 	orr.w	r2, r2, #1
 8002c0a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3714      	adds	r7, #20
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bc80      	pop	{r7}
 8002c16:	4770      	bx	lr
 8002c18:	40012c00 	.word	0x40012c00
 8002c1c:	40000400 	.word	0x40000400
 8002c20:	40000800 	.word	0x40000800

08002c24 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b084      	sub	sp, #16
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	691b      	ldr	r3, [r3, #16]
 8002c3a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	f003 0302 	and.w	r3, r3, #2
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d020      	beq.n	8002c88 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	f003 0302 	and.w	r3, r3, #2
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d01b      	beq.n	8002c88 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f06f 0202 	mvn.w	r2, #2
 8002c58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	699b      	ldr	r3, [r3, #24]
 8002c66:	f003 0303 	and.w	r3, r3, #3
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d003      	beq.n	8002c76 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f000 f998 	bl	8002fa4 <HAL_TIM_IC_CaptureCallback>
 8002c74:	e005      	b.n	8002c82 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f000 f98b 	bl	8002f92 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f000 f99a 	bl	8002fb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2200      	movs	r2, #0
 8002c86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	f003 0304 	and.w	r3, r3, #4
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d020      	beq.n	8002cd4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	f003 0304 	and.w	r3, r3, #4
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d01b      	beq.n	8002cd4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f06f 0204 	mvn.w	r2, #4
 8002ca4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2202      	movs	r2, #2
 8002caa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	699b      	ldr	r3, [r3, #24]
 8002cb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d003      	beq.n	8002cc2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f000 f972 	bl	8002fa4 <HAL_TIM_IC_CaptureCallback>
 8002cc0:	e005      	b.n	8002cce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f000 f965 	bl	8002f92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f000 f974 	bl	8002fb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	f003 0308 	and.w	r3, r3, #8
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d020      	beq.n	8002d20 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	f003 0308 	and.w	r3, r3, #8
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d01b      	beq.n	8002d20 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f06f 0208 	mvn.w	r2, #8
 8002cf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2204      	movs	r2, #4
 8002cf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	69db      	ldr	r3, [r3, #28]
 8002cfe:	f003 0303 	and.w	r3, r3, #3
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d003      	beq.n	8002d0e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f000 f94c 	bl	8002fa4 <HAL_TIM_IC_CaptureCallback>
 8002d0c:	e005      	b.n	8002d1a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f000 f93f 	bl	8002f92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	f000 f94e 	bl	8002fb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	f003 0310 	and.w	r3, r3, #16
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d020      	beq.n	8002d6c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	f003 0310 	and.w	r3, r3, #16
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d01b      	beq.n	8002d6c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f06f 0210 	mvn.w	r2, #16
 8002d3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2208      	movs	r2, #8
 8002d42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	69db      	ldr	r3, [r3, #28]
 8002d4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d003      	beq.n	8002d5a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f000 f926 	bl	8002fa4 <HAL_TIM_IC_CaptureCallback>
 8002d58:	e005      	b.n	8002d66 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f000 f919 	bl	8002f92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f000 f928 	bl	8002fb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	f003 0301 	and.w	r3, r3, #1
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d00c      	beq.n	8002d90 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	f003 0301 	and.w	r3, r3, #1
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d007      	beq.n	8002d90 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f06f 0201 	mvn.w	r2, #1
 8002d88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f7fd ff38 	bl	8000c00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d00c      	beq.n	8002db4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d007      	beq.n	8002db4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002dac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f000 fa7f 	bl	80032b2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d00c      	beq.n	8002dd8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d007      	beq.n	8002dd8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002dd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f000 f8f8 	bl	8002fc8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	f003 0320 	and.w	r3, r3, #32
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d00c      	beq.n	8002dfc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	f003 0320 	and.w	r3, r3, #32
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d007      	beq.n	8002dfc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f06f 0220 	mvn.w	r2, #32
 8002df4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f000 fa52 	bl	80032a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002dfc:	bf00      	nop
 8002dfe:	3710      	adds	r7, #16
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d101      	bne.n	8002e20 <HAL_TIM_ConfigClockSource+0x1c>
 8002e1c:	2302      	movs	r3, #2
 8002e1e:	e0b4      	b.n	8002f8a <HAL_TIM_ConfigClockSource+0x186>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2202      	movs	r2, #2
 8002e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002e3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e46:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	68ba      	ldr	r2, [r7, #8]
 8002e4e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e58:	d03e      	beq.n	8002ed8 <HAL_TIM_ConfigClockSource+0xd4>
 8002e5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e5e:	f200 8087 	bhi.w	8002f70 <HAL_TIM_ConfigClockSource+0x16c>
 8002e62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e66:	f000 8086 	beq.w	8002f76 <HAL_TIM_ConfigClockSource+0x172>
 8002e6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e6e:	d87f      	bhi.n	8002f70 <HAL_TIM_ConfigClockSource+0x16c>
 8002e70:	2b70      	cmp	r3, #112	; 0x70
 8002e72:	d01a      	beq.n	8002eaa <HAL_TIM_ConfigClockSource+0xa6>
 8002e74:	2b70      	cmp	r3, #112	; 0x70
 8002e76:	d87b      	bhi.n	8002f70 <HAL_TIM_ConfigClockSource+0x16c>
 8002e78:	2b60      	cmp	r3, #96	; 0x60
 8002e7a:	d050      	beq.n	8002f1e <HAL_TIM_ConfigClockSource+0x11a>
 8002e7c:	2b60      	cmp	r3, #96	; 0x60
 8002e7e:	d877      	bhi.n	8002f70 <HAL_TIM_ConfigClockSource+0x16c>
 8002e80:	2b50      	cmp	r3, #80	; 0x50
 8002e82:	d03c      	beq.n	8002efe <HAL_TIM_ConfigClockSource+0xfa>
 8002e84:	2b50      	cmp	r3, #80	; 0x50
 8002e86:	d873      	bhi.n	8002f70 <HAL_TIM_ConfigClockSource+0x16c>
 8002e88:	2b40      	cmp	r3, #64	; 0x40
 8002e8a:	d058      	beq.n	8002f3e <HAL_TIM_ConfigClockSource+0x13a>
 8002e8c:	2b40      	cmp	r3, #64	; 0x40
 8002e8e:	d86f      	bhi.n	8002f70 <HAL_TIM_ConfigClockSource+0x16c>
 8002e90:	2b30      	cmp	r3, #48	; 0x30
 8002e92:	d064      	beq.n	8002f5e <HAL_TIM_ConfigClockSource+0x15a>
 8002e94:	2b30      	cmp	r3, #48	; 0x30
 8002e96:	d86b      	bhi.n	8002f70 <HAL_TIM_ConfigClockSource+0x16c>
 8002e98:	2b20      	cmp	r3, #32
 8002e9a:	d060      	beq.n	8002f5e <HAL_TIM_ConfigClockSource+0x15a>
 8002e9c:	2b20      	cmp	r3, #32
 8002e9e:	d867      	bhi.n	8002f70 <HAL_TIM_ConfigClockSource+0x16c>
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d05c      	beq.n	8002f5e <HAL_TIM_ConfigClockSource+0x15a>
 8002ea4:	2b10      	cmp	r3, #16
 8002ea6:	d05a      	beq.n	8002f5e <HAL_TIM_ConfigClockSource+0x15a>
 8002ea8:	e062      	b.n	8002f70 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6818      	ldr	r0, [r3, #0]
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	6899      	ldr	r1, [r3, #8]
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	685a      	ldr	r2, [r3, #4]
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	68db      	ldr	r3, [r3, #12]
 8002eba:	f000 f974 	bl	80031a6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002ecc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	68ba      	ldr	r2, [r7, #8]
 8002ed4:	609a      	str	r2, [r3, #8]
      break;
 8002ed6:	e04f      	b.n	8002f78 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6818      	ldr	r0, [r3, #0]
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	6899      	ldr	r1, [r3, #8]
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	685a      	ldr	r2, [r3, #4]
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	f000 f95d 	bl	80031a6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	689a      	ldr	r2, [r3, #8]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002efa:	609a      	str	r2, [r3, #8]
      break;
 8002efc:	e03c      	b.n	8002f78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6818      	ldr	r0, [r3, #0]
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	6859      	ldr	r1, [r3, #4]
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	f000 f8d4 	bl	80030b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	2150      	movs	r1, #80	; 0x50
 8002f16:	4618      	mov	r0, r3
 8002f18:	f000 f92b 	bl	8003172 <TIM_ITRx_SetConfig>
      break;
 8002f1c:	e02c      	b.n	8002f78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6818      	ldr	r0, [r3, #0]
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	6859      	ldr	r1, [r3, #4]
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	68db      	ldr	r3, [r3, #12]
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	f000 f8f2 	bl	8003114 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	2160      	movs	r1, #96	; 0x60
 8002f36:	4618      	mov	r0, r3
 8002f38:	f000 f91b 	bl	8003172 <TIM_ITRx_SetConfig>
      break;
 8002f3c:	e01c      	b.n	8002f78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6818      	ldr	r0, [r3, #0]
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	6859      	ldr	r1, [r3, #4]
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	f000 f8b4 	bl	80030b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	2140      	movs	r1, #64	; 0x40
 8002f56:	4618      	mov	r0, r3
 8002f58:	f000 f90b 	bl	8003172 <TIM_ITRx_SetConfig>
      break;
 8002f5c:	e00c      	b.n	8002f78 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4619      	mov	r1, r3
 8002f68:	4610      	mov	r0, r2
 8002f6a:	f000 f902 	bl	8003172 <TIM_ITRx_SetConfig>
      break;
 8002f6e:	e003      	b.n	8002f78 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	73fb      	strb	r3, [r7, #15]
      break;
 8002f74:	e000      	b.n	8002f78 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002f76:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002f88:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3710      	adds	r7, #16
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}

08002f92 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f92:	b480      	push	{r7}
 8002f94:	b083      	sub	sp, #12
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f9a:	bf00      	nop
 8002f9c:	370c      	adds	r7, #12
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bc80      	pop	{r7}
 8002fa2:	4770      	bx	lr

08002fa4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002fac:	bf00      	nop
 8002fae:	370c      	adds	r7, #12
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bc80      	pop	{r7}
 8002fb4:	4770      	bx	lr

08002fb6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002fb6:	b480      	push	{r7}
 8002fb8:	b083      	sub	sp, #12
 8002fba:	af00      	add	r7, sp, #0
 8002fbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002fbe:	bf00      	nop
 8002fc0:	370c      	adds	r7, #12
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bc80      	pop	{r7}
 8002fc6:	4770      	bx	lr

08002fc8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002fd0:	bf00      	nop
 8002fd2:	370c      	adds	r7, #12
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bc80      	pop	{r7}
 8002fd8:	4770      	bx	lr
	...

08002fdc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b085      	sub	sp, #20
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	4a2f      	ldr	r2, [pc, #188]	; (80030ac <TIM_Base_SetConfig+0xd0>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d00b      	beq.n	800300c <TIM_Base_SetConfig+0x30>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ffa:	d007      	beq.n	800300c <TIM_Base_SetConfig+0x30>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	4a2c      	ldr	r2, [pc, #176]	; (80030b0 <TIM_Base_SetConfig+0xd4>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d003      	beq.n	800300c <TIM_Base_SetConfig+0x30>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	4a2b      	ldr	r2, [pc, #172]	; (80030b4 <TIM_Base_SetConfig+0xd8>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d108      	bne.n	800301e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003012:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	68fa      	ldr	r2, [r7, #12]
 800301a:	4313      	orrs	r3, r2
 800301c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4a22      	ldr	r2, [pc, #136]	; (80030ac <TIM_Base_SetConfig+0xd0>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d00b      	beq.n	800303e <TIM_Base_SetConfig+0x62>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800302c:	d007      	beq.n	800303e <TIM_Base_SetConfig+0x62>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	4a1f      	ldr	r2, [pc, #124]	; (80030b0 <TIM_Base_SetConfig+0xd4>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d003      	beq.n	800303e <TIM_Base_SetConfig+0x62>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4a1e      	ldr	r2, [pc, #120]	; (80030b4 <TIM_Base_SetConfig+0xd8>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d108      	bne.n	8003050 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003044:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	68fa      	ldr	r2, [r7, #12]
 800304c:	4313      	orrs	r3, r2
 800304e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	695b      	ldr	r3, [r3, #20]
 800305a:	4313      	orrs	r3, r2
 800305c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	68fa      	ldr	r2, [r7, #12]
 8003062:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	689a      	ldr	r2, [r3, #8]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	4a0d      	ldr	r2, [pc, #52]	; (80030ac <TIM_Base_SetConfig+0xd0>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d103      	bne.n	8003084 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	691a      	ldr	r2, [r3, #16]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	691b      	ldr	r3, [r3, #16]
 800308e:	f003 0301 	and.w	r3, r3, #1
 8003092:	2b00      	cmp	r3, #0
 8003094:	d005      	beq.n	80030a2 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	691b      	ldr	r3, [r3, #16]
 800309a:	f023 0201 	bic.w	r2, r3, #1
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	611a      	str	r2, [r3, #16]
  }
}
 80030a2:	bf00      	nop
 80030a4:	3714      	adds	r7, #20
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bc80      	pop	{r7}
 80030aa:	4770      	bx	lr
 80030ac:	40012c00 	.word	0x40012c00
 80030b0:	40000400 	.word	0x40000400
 80030b4:	40000800 	.word	0x40000800

080030b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b087      	sub	sp, #28
 80030bc:	af00      	add	r7, sp, #0
 80030be:	60f8      	str	r0, [r7, #12]
 80030c0:	60b9      	str	r1, [r7, #8]
 80030c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	6a1b      	ldr	r3, [r3, #32]
 80030c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	6a1b      	ldr	r3, [r3, #32]
 80030ce:	f023 0201 	bic.w	r2, r3, #1
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	699b      	ldr	r3, [r3, #24]
 80030da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80030e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	011b      	lsls	r3, r3, #4
 80030e8:	693a      	ldr	r2, [r7, #16]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	f023 030a 	bic.w	r3, r3, #10
 80030f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80030f6:	697a      	ldr	r2, [r7, #20]
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	693a      	ldr	r2, [r7, #16]
 8003102:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	697a      	ldr	r2, [r7, #20]
 8003108:	621a      	str	r2, [r3, #32]
}
 800310a:	bf00      	nop
 800310c:	371c      	adds	r7, #28
 800310e:	46bd      	mov	sp, r7
 8003110:	bc80      	pop	{r7}
 8003112:	4770      	bx	lr

08003114 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003114:	b480      	push	{r7}
 8003116:	b087      	sub	sp, #28
 8003118:	af00      	add	r7, sp, #0
 800311a:	60f8      	str	r0, [r7, #12]
 800311c:	60b9      	str	r1, [r7, #8]
 800311e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	6a1b      	ldr	r3, [r3, #32]
 8003124:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	6a1b      	ldr	r3, [r3, #32]
 800312a:	f023 0210 	bic.w	r2, r3, #16
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	699b      	ldr	r3, [r3, #24]
 8003136:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800313e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	031b      	lsls	r3, r3, #12
 8003144:	693a      	ldr	r2, [r7, #16]
 8003146:	4313      	orrs	r3, r2
 8003148:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003150:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	011b      	lsls	r3, r3, #4
 8003156:	697a      	ldr	r2, [r7, #20]
 8003158:	4313      	orrs	r3, r2
 800315a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	693a      	ldr	r2, [r7, #16]
 8003160:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	697a      	ldr	r2, [r7, #20]
 8003166:	621a      	str	r2, [r3, #32]
}
 8003168:	bf00      	nop
 800316a:	371c      	adds	r7, #28
 800316c:	46bd      	mov	sp, r7
 800316e:	bc80      	pop	{r7}
 8003170:	4770      	bx	lr

08003172 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003172:	b480      	push	{r7}
 8003174:	b085      	sub	sp, #20
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]
 800317a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003188:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800318a:	683a      	ldr	r2, [r7, #0]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	4313      	orrs	r3, r2
 8003190:	f043 0307 	orr.w	r3, r3, #7
 8003194:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	68fa      	ldr	r2, [r7, #12]
 800319a:	609a      	str	r2, [r3, #8]
}
 800319c:	bf00      	nop
 800319e:	3714      	adds	r7, #20
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bc80      	pop	{r7}
 80031a4:	4770      	bx	lr

080031a6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80031a6:	b480      	push	{r7}
 80031a8:	b087      	sub	sp, #28
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	60f8      	str	r0, [r7, #12]
 80031ae:	60b9      	str	r1, [r7, #8]
 80031b0:	607a      	str	r2, [r7, #4]
 80031b2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80031c0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	021a      	lsls	r2, r3, #8
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	431a      	orrs	r2, r3
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	697a      	ldr	r2, [r7, #20]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	697a      	ldr	r2, [r7, #20]
 80031d8:	609a      	str	r2, [r3, #8]
}
 80031da:	bf00      	nop
 80031dc:	371c      	adds	r7, #28
 80031de:	46bd      	mov	sp, r7
 80031e0:	bc80      	pop	{r7}
 80031e2:	4770      	bx	lr

080031e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b085      	sub	sp, #20
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d101      	bne.n	80031fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80031f8:	2302      	movs	r3, #2
 80031fa:	e046      	b.n	800328a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2202      	movs	r2, #2
 8003208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003222:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	68fa      	ldr	r2, [r7, #12]
 800322a:	4313      	orrs	r3, r2
 800322c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	68fa      	ldr	r2, [r7, #12]
 8003234:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a16      	ldr	r2, [pc, #88]	; (8003294 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d00e      	beq.n	800325e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003248:	d009      	beq.n	800325e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a12      	ldr	r2, [pc, #72]	; (8003298 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d004      	beq.n	800325e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a10      	ldr	r2, [pc, #64]	; (800329c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d10c      	bne.n	8003278 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003264:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	68ba      	ldr	r2, [r7, #8]
 800326c:	4313      	orrs	r3, r2
 800326e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	68ba      	ldr	r2, [r7, #8]
 8003276:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2201      	movs	r2, #1
 800327c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2200      	movs	r2, #0
 8003284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003288:	2300      	movs	r3, #0
}
 800328a:	4618      	mov	r0, r3
 800328c:	3714      	adds	r7, #20
 800328e:	46bd      	mov	sp, r7
 8003290:	bc80      	pop	{r7}
 8003292:	4770      	bx	lr
 8003294:	40012c00 	.word	0x40012c00
 8003298:	40000400 	.word	0x40000400
 800329c:	40000800 	.word	0x40000800

080032a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80032a8:	bf00      	nop
 80032aa:	370c      	adds	r7, #12
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bc80      	pop	{r7}
 80032b0:	4770      	bx	lr

080032b2 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80032b2:	b480      	push	{r7}
 80032b4:	b083      	sub	sp, #12
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80032ba:	bf00      	nop
 80032bc:	370c      	adds	r7, #12
 80032be:	46bd      	mov	sp, r7
 80032c0:	bc80      	pop	{r7}
 80032c2:	4770      	bx	lr

080032c4 <__errno>:
 80032c4:	4b01      	ldr	r3, [pc, #4]	; (80032cc <__errno+0x8>)
 80032c6:	6818      	ldr	r0, [r3, #0]
 80032c8:	4770      	bx	lr
 80032ca:	bf00      	nop
 80032cc:	20000034 	.word	0x20000034

080032d0 <__libc_init_array>:
 80032d0:	b570      	push	{r4, r5, r6, lr}
 80032d2:	2600      	movs	r6, #0
 80032d4:	4d0c      	ldr	r5, [pc, #48]	; (8003308 <__libc_init_array+0x38>)
 80032d6:	4c0d      	ldr	r4, [pc, #52]	; (800330c <__libc_init_array+0x3c>)
 80032d8:	1b64      	subs	r4, r4, r5
 80032da:	10a4      	asrs	r4, r4, #2
 80032dc:	42a6      	cmp	r6, r4
 80032de:	d109      	bne.n	80032f4 <__libc_init_array+0x24>
 80032e0:	f000 fc5c 	bl	8003b9c <_init>
 80032e4:	2600      	movs	r6, #0
 80032e6:	4d0a      	ldr	r5, [pc, #40]	; (8003310 <__libc_init_array+0x40>)
 80032e8:	4c0a      	ldr	r4, [pc, #40]	; (8003314 <__libc_init_array+0x44>)
 80032ea:	1b64      	subs	r4, r4, r5
 80032ec:	10a4      	asrs	r4, r4, #2
 80032ee:	42a6      	cmp	r6, r4
 80032f0:	d105      	bne.n	80032fe <__libc_init_array+0x2e>
 80032f2:	bd70      	pop	{r4, r5, r6, pc}
 80032f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80032f8:	4798      	blx	r3
 80032fa:	3601      	adds	r6, #1
 80032fc:	e7ee      	b.n	80032dc <__libc_init_array+0xc>
 80032fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8003302:	4798      	blx	r3
 8003304:	3601      	adds	r6, #1
 8003306:	e7f2      	b.n	80032ee <__libc_init_array+0x1e>
 8003308:	08003c68 	.word	0x08003c68
 800330c:	08003c68 	.word	0x08003c68
 8003310:	08003c68 	.word	0x08003c68
 8003314:	08003c6c 	.word	0x08003c6c

08003318 <memset>:
 8003318:	4603      	mov	r3, r0
 800331a:	4402      	add	r2, r0
 800331c:	4293      	cmp	r3, r2
 800331e:	d100      	bne.n	8003322 <memset+0xa>
 8003320:	4770      	bx	lr
 8003322:	f803 1b01 	strb.w	r1, [r3], #1
 8003326:	e7f9      	b.n	800331c <memset+0x4>

08003328 <siprintf>:
 8003328:	b40e      	push	{r1, r2, r3}
 800332a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800332e:	b500      	push	{lr}
 8003330:	b09c      	sub	sp, #112	; 0x70
 8003332:	ab1d      	add	r3, sp, #116	; 0x74
 8003334:	9002      	str	r0, [sp, #8]
 8003336:	9006      	str	r0, [sp, #24]
 8003338:	9107      	str	r1, [sp, #28]
 800333a:	9104      	str	r1, [sp, #16]
 800333c:	4808      	ldr	r0, [pc, #32]	; (8003360 <siprintf+0x38>)
 800333e:	4909      	ldr	r1, [pc, #36]	; (8003364 <siprintf+0x3c>)
 8003340:	f853 2b04 	ldr.w	r2, [r3], #4
 8003344:	9105      	str	r1, [sp, #20]
 8003346:	6800      	ldr	r0, [r0, #0]
 8003348:	a902      	add	r1, sp, #8
 800334a:	9301      	str	r3, [sp, #4]
 800334c:	f000 f868 	bl	8003420 <_svfiprintf_r>
 8003350:	2200      	movs	r2, #0
 8003352:	9b02      	ldr	r3, [sp, #8]
 8003354:	701a      	strb	r2, [r3, #0]
 8003356:	b01c      	add	sp, #112	; 0x70
 8003358:	f85d eb04 	ldr.w	lr, [sp], #4
 800335c:	b003      	add	sp, #12
 800335e:	4770      	bx	lr
 8003360:	20000034 	.word	0x20000034
 8003364:	ffff0208 	.word	0xffff0208

08003368 <__ssputs_r>:
 8003368:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800336c:	688e      	ldr	r6, [r1, #8]
 800336e:	4682      	mov	sl, r0
 8003370:	429e      	cmp	r6, r3
 8003372:	460c      	mov	r4, r1
 8003374:	4690      	mov	r8, r2
 8003376:	461f      	mov	r7, r3
 8003378:	d838      	bhi.n	80033ec <__ssputs_r+0x84>
 800337a:	898a      	ldrh	r2, [r1, #12]
 800337c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003380:	d032      	beq.n	80033e8 <__ssputs_r+0x80>
 8003382:	6825      	ldr	r5, [r4, #0]
 8003384:	6909      	ldr	r1, [r1, #16]
 8003386:	3301      	adds	r3, #1
 8003388:	eba5 0901 	sub.w	r9, r5, r1
 800338c:	6965      	ldr	r5, [r4, #20]
 800338e:	444b      	add	r3, r9
 8003390:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003394:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003398:	106d      	asrs	r5, r5, #1
 800339a:	429d      	cmp	r5, r3
 800339c:	bf38      	it	cc
 800339e:	461d      	movcc	r5, r3
 80033a0:	0553      	lsls	r3, r2, #21
 80033a2:	d531      	bpl.n	8003408 <__ssputs_r+0xa0>
 80033a4:	4629      	mov	r1, r5
 80033a6:	f000 fb53 	bl	8003a50 <_malloc_r>
 80033aa:	4606      	mov	r6, r0
 80033ac:	b950      	cbnz	r0, 80033c4 <__ssputs_r+0x5c>
 80033ae:	230c      	movs	r3, #12
 80033b0:	f04f 30ff 	mov.w	r0, #4294967295
 80033b4:	f8ca 3000 	str.w	r3, [sl]
 80033b8:	89a3      	ldrh	r3, [r4, #12]
 80033ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033be:	81a3      	strh	r3, [r4, #12]
 80033c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033c4:	464a      	mov	r2, r9
 80033c6:	6921      	ldr	r1, [r4, #16]
 80033c8:	f000 face 	bl	8003968 <memcpy>
 80033cc:	89a3      	ldrh	r3, [r4, #12]
 80033ce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80033d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033d6:	81a3      	strh	r3, [r4, #12]
 80033d8:	6126      	str	r6, [r4, #16]
 80033da:	444e      	add	r6, r9
 80033dc:	6026      	str	r6, [r4, #0]
 80033de:	463e      	mov	r6, r7
 80033e0:	6165      	str	r5, [r4, #20]
 80033e2:	eba5 0509 	sub.w	r5, r5, r9
 80033e6:	60a5      	str	r5, [r4, #8]
 80033e8:	42be      	cmp	r6, r7
 80033ea:	d900      	bls.n	80033ee <__ssputs_r+0x86>
 80033ec:	463e      	mov	r6, r7
 80033ee:	4632      	mov	r2, r6
 80033f0:	4641      	mov	r1, r8
 80033f2:	6820      	ldr	r0, [r4, #0]
 80033f4:	f000 fac6 	bl	8003984 <memmove>
 80033f8:	68a3      	ldr	r3, [r4, #8]
 80033fa:	6822      	ldr	r2, [r4, #0]
 80033fc:	1b9b      	subs	r3, r3, r6
 80033fe:	4432      	add	r2, r6
 8003400:	2000      	movs	r0, #0
 8003402:	60a3      	str	r3, [r4, #8]
 8003404:	6022      	str	r2, [r4, #0]
 8003406:	e7db      	b.n	80033c0 <__ssputs_r+0x58>
 8003408:	462a      	mov	r2, r5
 800340a:	f000 fb7b 	bl	8003b04 <_realloc_r>
 800340e:	4606      	mov	r6, r0
 8003410:	2800      	cmp	r0, #0
 8003412:	d1e1      	bne.n	80033d8 <__ssputs_r+0x70>
 8003414:	4650      	mov	r0, sl
 8003416:	6921      	ldr	r1, [r4, #16]
 8003418:	f000 face 	bl	80039b8 <_free_r>
 800341c:	e7c7      	b.n	80033ae <__ssputs_r+0x46>
	...

08003420 <_svfiprintf_r>:
 8003420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003424:	4698      	mov	r8, r3
 8003426:	898b      	ldrh	r3, [r1, #12]
 8003428:	4607      	mov	r7, r0
 800342a:	061b      	lsls	r3, r3, #24
 800342c:	460d      	mov	r5, r1
 800342e:	4614      	mov	r4, r2
 8003430:	b09d      	sub	sp, #116	; 0x74
 8003432:	d50e      	bpl.n	8003452 <_svfiprintf_r+0x32>
 8003434:	690b      	ldr	r3, [r1, #16]
 8003436:	b963      	cbnz	r3, 8003452 <_svfiprintf_r+0x32>
 8003438:	2140      	movs	r1, #64	; 0x40
 800343a:	f000 fb09 	bl	8003a50 <_malloc_r>
 800343e:	6028      	str	r0, [r5, #0]
 8003440:	6128      	str	r0, [r5, #16]
 8003442:	b920      	cbnz	r0, 800344e <_svfiprintf_r+0x2e>
 8003444:	230c      	movs	r3, #12
 8003446:	603b      	str	r3, [r7, #0]
 8003448:	f04f 30ff 	mov.w	r0, #4294967295
 800344c:	e0d1      	b.n	80035f2 <_svfiprintf_r+0x1d2>
 800344e:	2340      	movs	r3, #64	; 0x40
 8003450:	616b      	str	r3, [r5, #20]
 8003452:	2300      	movs	r3, #0
 8003454:	9309      	str	r3, [sp, #36]	; 0x24
 8003456:	2320      	movs	r3, #32
 8003458:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800345c:	2330      	movs	r3, #48	; 0x30
 800345e:	f04f 0901 	mov.w	r9, #1
 8003462:	f8cd 800c 	str.w	r8, [sp, #12]
 8003466:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800360c <_svfiprintf_r+0x1ec>
 800346a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800346e:	4623      	mov	r3, r4
 8003470:	469a      	mov	sl, r3
 8003472:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003476:	b10a      	cbz	r2, 800347c <_svfiprintf_r+0x5c>
 8003478:	2a25      	cmp	r2, #37	; 0x25
 800347a:	d1f9      	bne.n	8003470 <_svfiprintf_r+0x50>
 800347c:	ebba 0b04 	subs.w	fp, sl, r4
 8003480:	d00b      	beq.n	800349a <_svfiprintf_r+0x7a>
 8003482:	465b      	mov	r3, fp
 8003484:	4622      	mov	r2, r4
 8003486:	4629      	mov	r1, r5
 8003488:	4638      	mov	r0, r7
 800348a:	f7ff ff6d 	bl	8003368 <__ssputs_r>
 800348e:	3001      	adds	r0, #1
 8003490:	f000 80aa 	beq.w	80035e8 <_svfiprintf_r+0x1c8>
 8003494:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003496:	445a      	add	r2, fp
 8003498:	9209      	str	r2, [sp, #36]	; 0x24
 800349a:	f89a 3000 	ldrb.w	r3, [sl]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	f000 80a2 	beq.w	80035e8 <_svfiprintf_r+0x1c8>
 80034a4:	2300      	movs	r3, #0
 80034a6:	f04f 32ff 	mov.w	r2, #4294967295
 80034aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80034ae:	f10a 0a01 	add.w	sl, sl, #1
 80034b2:	9304      	str	r3, [sp, #16]
 80034b4:	9307      	str	r3, [sp, #28]
 80034b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80034ba:	931a      	str	r3, [sp, #104]	; 0x68
 80034bc:	4654      	mov	r4, sl
 80034be:	2205      	movs	r2, #5
 80034c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80034c4:	4851      	ldr	r0, [pc, #324]	; (800360c <_svfiprintf_r+0x1ec>)
 80034c6:	f000 fa41 	bl	800394c <memchr>
 80034ca:	9a04      	ldr	r2, [sp, #16]
 80034cc:	b9d8      	cbnz	r0, 8003506 <_svfiprintf_r+0xe6>
 80034ce:	06d0      	lsls	r0, r2, #27
 80034d0:	bf44      	itt	mi
 80034d2:	2320      	movmi	r3, #32
 80034d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80034d8:	0711      	lsls	r1, r2, #28
 80034da:	bf44      	itt	mi
 80034dc:	232b      	movmi	r3, #43	; 0x2b
 80034de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80034e2:	f89a 3000 	ldrb.w	r3, [sl]
 80034e6:	2b2a      	cmp	r3, #42	; 0x2a
 80034e8:	d015      	beq.n	8003516 <_svfiprintf_r+0xf6>
 80034ea:	4654      	mov	r4, sl
 80034ec:	2000      	movs	r0, #0
 80034ee:	f04f 0c0a 	mov.w	ip, #10
 80034f2:	9a07      	ldr	r2, [sp, #28]
 80034f4:	4621      	mov	r1, r4
 80034f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80034fa:	3b30      	subs	r3, #48	; 0x30
 80034fc:	2b09      	cmp	r3, #9
 80034fe:	d94e      	bls.n	800359e <_svfiprintf_r+0x17e>
 8003500:	b1b0      	cbz	r0, 8003530 <_svfiprintf_r+0x110>
 8003502:	9207      	str	r2, [sp, #28]
 8003504:	e014      	b.n	8003530 <_svfiprintf_r+0x110>
 8003506:	eba0 0308 	sub.w	r3, r0, r8
 800350a:	fa09 f303 	lsl.w	r3, r9, r3
 800350e:	4313      	orrs	r3, r2
 8003510:	46a2      	mov	sl, r4
 8003512:	9304      	str	r3, [sp, #16]
 8003514:	e7d2      	b.n	80034bc <_svfiprintf_r+0x9c>
 8003516:	9b03      	ldr	r3, [sp, #12]
 8003518:	1d19      	adds	r1, r3, #4
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	9103      	str	r1, [sp, #12]
 800351e:	2b00      	cmp	r3, #0
 8003520:	bfbb      	ittet	lt
 8003522:	425b      	neglt	r3, r3
 8003524:	f042 0202 	orrlt.w	r2, r2, #2
 8003528:	9307      	strge	r3, [sp, #28]
 800352a:	9307      	strlt	r3, [sp, #28]
 800352c:	bfb8      	it	lt
 800352e:	9204      	strlt	r2, [sp, #16]
 8003530:	7823      	ldrb	r3, [r4, #0]
 8003532:	2b2e      	cmp	r3, #46	; 0x2e
 8003534:	d10c      	bne.n	8003550 <_svfiprintf_r+0x130>
 8003536:	7863      	ldrb	r3, [r4, #1]
 8003538:	2b2a      	cmp	r3, #42	; 0x2a
 800353a:	d135      	bne.n	80035a8 <_svfiprintf_r+0x188>
 800353c:	9b03      	ldr	r3, [sp, #12]
 800353e:	3402      	adds	r4, #2
 8003540:	1d1a      	adds	r2, r3, #4
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	9203      	str	r2, [sp, #12]
 8003546:	2b00      	cmp	r3, #0
 8003548:	bfb8      	it	lt
 800354a:	f04f 33ff 	movlt.w	r3, #4294967295
 800354e:	9305      	str	r3, [sp, #20]
 8003550:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800361c <_svfiprintf_r+0x1fc>
 8003554:	2203      	movs	r2, #3
 8003556:	4650      	mov	r0, sl
 8003558:	7821      	ldrb	r1, [r4, #0]
 800355a:	f000 f9f7 	bl	800394c <memchr>
 800355e:	b140      	cbz	r0, 8003572 <_svfiprintf_r+0x152>
 8003560:	2340      	movs	r3, #64	; 0x40
 8003562:	eba0 000a 	sub.w	r0, r0, sl
 8003566:	fa03 f000 	lsl.w	r0, r3, r0
 800356a:	9b04      	ldr	r3, [sp, #16]
 800356c:	3401      	adds	r4, #1
 800356e:	4303      	orrs	r3, r0
 8003570:	9304      	str	r3, [sp, #16]
 8003572:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003576:	2206      	movs	r2, #6
 8003578:	4825      	ldr	r0, [pc, #148]	; (8003610 <_svfiprintf_r+0x1f0>)
 800357a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800357e:	f000 f9e5 	bl	800394c <memchr>
 8003582:	2800      	cmp	r0, #0
 8003584:	d038      	beq.n	80035f8 <_svfiprintf_r+0x1d8>
 8003586:	4b23      	ldr	r3, [pc, #140]	; (8003614 <_svfiprintf_r+0x1f4>)
 8003588:	bb1b      	cbnz	r3, 80035d2 <_svfiprintf_r+0x1b2>
 800358a:	9b03      	ldr	r3, [sp, #12]
 800358c:	3307      	adds	r3, #7
 800358e:	f023 0307 	bic.w	r3, r3, #7
 8003592:	3308      	adds	r3, #8
 8003594:	9303      	str	r3, [sp, #12]
 8003596:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003598:	4433      	add	r3, r6
 800359a:	9309      	str	r3, [sp, #36]	; 0x24
 800359c:	e767      	b.n	800346e <_svfiprintf_r+0x4e>
 800359e:	460c      	mov	r4, r1
 80035a0:	2001      	movs	r0, #1
 80035a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80035a6:	e7a5      	b.n	80034f4 <_svfiprintf_r+0xd4>
 80035a8:	2300      	movs	r3, #0
 80035aa:	f04f 0c0a 	mov.w	ip, #10
 80035ae:	4619      	mov	r1, r3
 80035b0:	3401      	adds	r4, #1
 80035b2:	9305      	str	r3, [sp, #20]
 80035b4:	4620      	mov	r0, r4
 80035b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80035ba:	3a30      	subs	r2, #48	; 0x30
 80035bc:	2a09      	cmp	r2, #9
 80035be:	d903      	bls.n	80035c8 <_svfiprintf_r+0x1a8>
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d0c5      	beq.n	8003550 <_svfiprintf_r+0x130>
 80035c4:	9105      	str	r1, [sp, #20]
 80035c6:	e7c3      	b.n	8003550 <_svfiprintf_r+0x130>
 80035c8:	4604      	mov	r4, r0
 80035ca:	2301      	movs	r3, #1
 80035cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80035d0:	e7f0      	b.n	80035b4 <_svfiprintf_r+0x194>
 80035d2:	ab03      	add	r3, sp, #12
 80035d4:	9300      	str	r3, [sp, #0]
 80035d6:	462a      	mov	r2, r5
 80035d8:	4638      	mov	r0, r7
 80035da:	4b0f      	ldr	r3, [pc, #60]	; (8003618 <_svfiprintf_r+0x1f8>)
 80035dc:	a904      	add	r1, sp, #16
 80035de:	f3af 8000 	nop.w
 80035e2:	1c42      	adds	r2, r0, #1
 80035e4:	4606      	mov	r6, r0
 80035e6:	d1d6      	bne.n	8003596 <_svfiprintf_r+0x176>
 80035e8:	89ab      	ldrh	r3, [r5, #12]
 80035ea:	065b      	lsls	r3, r3, #25
 80035ec:	f53f af2c 	bmi.w	8003448 <_svfiprintf_r+0x28>
 80035f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80035f2:	b01d      	add	sp, #116	; 0x74
 80035f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035f8:	ab03      	add	r3, sp, #12
 80035fa:	9300      	str	r3, [sp, #0]
 80035fc:	462a      	mov	r2, r5
 80035fe:	4638      	mov	r0, r7
 8003600:	4b05      	ldr	r3, [pc, #20]	; (8003618 <_svfiprintf_r+0x1f8>)
 8003602:	a904      	add	r1, sp, #16
 8003604:	f000 f87c 	bl	8003700 <_printf_i>
 8003608:	e7eb      	b.n	80035e2 <_svfiprintf_r+0x1c2>
 800360a:	bf00      	nop
 800360c:	08003c32 	.word	0x08003c32
 8003610:	08003c3c 	.word	0x08003c3c
 8003614:	00000000 	.word	0x00000000
 8003618:	08003369 	.word	0x08003369
 800361c:	08003c38 	.word	0x08003c38

08003620 <_printf_common>:
 8003620:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003624:	4616      	mov	r6, r2
 8003626:	4699      	mov	r9, r3
 8003628:	688a      	ldr	r2, [r1, #8]
 800362a:	690b      	ldr	r3, [r1, #16]
 800362c:	4607      	mov	r7, r0
 800362e:	4293      	cmp	r3, r2
 8003630:	bfb8      	it	lt
 8003632:	4613      	movlt	r3, r2
 8003634:	6033      	str	r3, [r6, #0]
 8003636:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800363a:	460c      	mov	r4, r1
 800363c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003640:	b10a      	cbz	r2, 8003646 <_printf_common+0x26>
 8003642:	3301      	adds	r3, #1
 8003644:	6033      	str	r3, [r6, #0]
 8003646:	6823      	ldr	r3, [r4, #0]
 8003648:	0699      	lsls	r1, r3, #26
 800364a:	bf42      	ittt	mi
 800364c:	6833      	ldrmi	r3, [r6, #0]
 800364e:	3302      	addmi	r3, #2
 8003650:	6033      	strmi	r3, [r6, #0]
 8003652:	6825      	ldr	r5, [r4, #0]
 8003654:	f015 0506 	ands.w	r5, r5, #6
 8003658:	d106      	bne.n	8003668 <_printf_common+0x48>
 800365a:	f104 0a19 	add.w	sl, r4, #25
 800365e:	68e3      	ldr	r3, [r4, #12]
 8003660:	6832      	ldr	r2, [r6, #0]
 8003662:	1a9b      	subs	r3, r3, r2
 8003664:	42ab      	cmp	r3, r5
 8003666:	dc28      	bgt.n	80036ba <_printf_common+0x9a>
 8003668:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800366c:	1e13      	subs	r3, r2, #0
 800366e:	6822      	ldr	r2, [r4, #0]
 8003670:	bf18      	it	ne
 8003672:	2301      	movne	r3, #1
 8003674:	0692      	lsls	r2, r2, #26
 8003676:	d42d      	bmi.n	80036d4 <_printf_common+0xb4>
 8003678:	4649      	mov	r1, r9
 800367a:	4638      	mov	r0, r7
 800367c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003680:	47c0      	blx	r8
 8003682:	3001      	adds	r0, #1
 8003684:	d020      	beq.n	80036c8 <_printf_common+0xa8>
 8003686:	6823      	ldr	r3, [r4, #0]
 8003688:	68e5      	ldr	r5, [r4, #12]
 800368a:	f003 0306 	and.w	r3, r3, #6
 800368e:	2b04      	cmp	r3, #4
 8003690:	bf18      	it	ne
 8003692:	2500      	movne	r5, #0
 8003694:	6832      	ldr	r2, [r6, #0]
 8003696:	f04f 0600 	mov.w	r6, #0
 800369a:	68a3      	ldr	r3, [r4, #8]
 800369c:	bf08      	it	eq
 800369e:	1aad      	subeq	r5, r5, r2
 80036a0:	6922      	ldr	r2, [r4, #16]
 80036a2:	bf08      	it	eq
 80036a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80036a8:	4293      	cmp	r3, r2
 80036aa:	bfc4      	itt	gt
 80036ac:	1a9b      	subgt	r3, r3, r2
 80036ae:	18ed      	addgt	r5, r5, r3
 80036b0:	341a      	adds	r4, #26
 80036b2:	42b5      	cmp	r5, r6
 80036b4:	d11a      	bne.n	80036ec <_printf_common+0xcc>
 80036b6:	2000      	movs	r0, #0
 80036b8:	e008      	b.n	80036cc <_printf_common+0xac>
 80036ba:	2301      	movs	r3, #1
 80036bc:	4652      	mov	r2, sl
 80036be:	4649      	mov	r1, r9
 80036c0:	4638      	mov	r0, r7
 80036c2:	47c0      	blx	r8
 80036c4:	3001      	adds	r0, #1
 80036c6:	d103      	bne.n	80036d0 <_printf_common+0xb0>
 80036c8:	f04f 30ff 	mov.w	r0, #4294967295
 80036cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036d0:	3501      	adds	r5, #1
 80036d2:	e7c4      	b.n	800365e <_printf_common+0x3e>
 80036d4:	2030      	movs	r0, #48	; 0x30
 80036d6:	18e1      	adds	r1, r4, r3
 80036d8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80036dc:	1c5a      	adds	r2, r3, #1
 80036de:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80036e2:	4422      	add	r2, r4
 80036e4:	3302      	adds	r3, #2
 80036e6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80036ea:	e7c5      	b.n	8003678 <_printf_common+0x58>
 80036ec:	2301      	movs	r3, #1
 80036ee:	4622      	mov	r2, r4
 80036f0:	4649      	mov	r1, r9
 80036f2:	4638      	mov	r0, r7
 80036f4:	47c0      	blx	r8
 80036f6:	3001      	adds	r0, #1
 80036f8:	d0e6      	beq.n	80036c8 <_printf_common+0xa8>
 80036fa:	3601      	adds	r6, #1
 80036fc:	e7d9      	b.n	80036b2 <_printf_common+0x92>
	...

08003700 <_printf_i>:
 8003700:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003704:	460c      	mov	r4, r1
 8003706:	7e27      	ldrb	r7, [r4, #24]
 8003708:	4691      	mov	r9, r2
 800370a:	2f78      	cmp	r7, #120	; 0x78
 800370c:	4680      	mov	r8, r0
 800370e:	469a      	mov	sl, r3
 8003710:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003712:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003716:	d807      	bhi.n	8003728 <_printf_i+0x28>
 8003718:	2f62      	cmp	r7, #98	; 0x62
 800371a:	d80a      	bhi.n	8003732 <_printf_i+0x32>
 800371c:	2f00      	cmp	r7, #0
 800371e:	f000 80d9 	beq.w	80038d4 <_printf_i+0x1d4>
 8003722:	2f58      	cmp	r7, #88	; 0x58
 8003724:	f000 80a4 	beq.w	8003870 <_printf_i+0x170>
 8003728:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800372c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003730:	e03a      	b.n	80037a8 <_printf_i+0xa8>
 8003732:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003736:	2b15      	cmp	r3, #21
 8003738:	d8f6      	bhi.n	8003728 <_printf_i+0x28>
 800373a:	a001      	add	r0, pc, #4	; (adr r0, 8003740 <_printf_i+0x40>)
 800373c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003740:	08003799 	.word	0x08003799
 8003744:	080037ad 	.word	0x080037ad
 8003748:	08003729 	.word	0x08003729
 800374c:	08003729 	.word	0x08003729
 8003750:	08003729 	.word	0x08003729
 8003754:	08003729 	.word	0x08003729
 8003758:	080037ad 	.word	0x080037ad
 800375c:	08003729 	.word	0x08003729
 8003760:	08003729 	.word	0x08003729
 8003764:	08003729 	.word	0x08003729
 8003768:	08003729 	.word	0x08003729
 800376c:	080038bb 	.word	0x080038bb
 8003770:	080037dd 	.word	0x080037dd
 8003774:	0800389d 	.word	0x0800389d
 8003778:	08003729 	.word	0x08003729
 800377c:	08003729 	.word	0x08003729
 8003780:	080038dd 	.word	0x080038dd
 8003784:	08003729 	.word	0x08003729
 8003788:	080037dd 	.word	0x080037dd
 800378c:	08003729 	.word	0x08003729
 8003790:	08003729 	.word	0x08003729
 8003794:	080038a5 	.word	0x080038a5
 8003798:	680b      	ldr	r3, [r1, #0]
 800379a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800379e:	1d1a      	adds	r2, r3, #4
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	600a      	str	r2, [r1, #0]
 80037a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80037a8:	2301      	movs	r3, #1
 80037aa:	e0a4      	b.n	80038f6 <_printf_i+0x1f6>
 80037ac:	6825      	ldr	r5, [r4, #0]
 80037ae:	6808      	ldr	r0, [r1, #0]
 80037b0:	062e      	lsls	r6, r5, #24
 80037b2:	f100 0304 	add.w	r3, r0, #4
 80037b6:	d50a      	bpl.n	80037ce <_printf_i+0xce>
 80037b8:	6805      	ldr	r5, [r0, #0]
 80037ba:	600b      	str	r3, [r1, #0]
 80037bc:	2d00      	cmp	r5, #0
 80037be:	da03      	bge.n	80037c8 <_printf_i+0xc8>
 80037c0:	232d      	movs	r3, #45	; 0x2d
 80037c2:	426d      	negs	r5, r5
 80037c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80037c8:	230a      	movs	r3, #10
 80037ca:	485e      	ldr	r0, [pc, #376]	; (8003944 <_printf_i+0x244>)
 80037cc:	e019      	b.n	8003802 <_printf_i+0x102>
 80037ce:	f015 0f40 	tst.w	r5, #64	; 0x40
 80037d2:	6805      	ldr	r5, [r0, #0]
 80037d4:	600b      	str	r3, [r1, #0]
 80037d6:	bf18      	it	ne
 80037d8:	b22d      	sxthne	r5, r5
 80037da:	e7ef      	b.n	80037bc <_printf_i+0xbc>
 80037dc:	680b      	ldr	r3, [r1, #0]
 80037de:	6825      	ldr	r5, [r4, #0]
 80037e0:	1d18      	adds	r0, r3, #4
 80037e2:	6008      	str	r0, [r1, #0]
 80037e4:	0628      	lsls	r0, r5, #24
 80037e6:	d501      	bpl.n	80037ec <_printf_i+0xec>
 80037e8:	681d      	ldr	r5, [r3, #0]
 80037ea:	e002      	b.n	80037f2 <_printf_i+0xf2>
 80037ec:	0669      	lsls	r1, r5, #25
 80037ee:	d5fb      	bpl.n	80037e8 <_printf_i+0xe8>
 80037f0:	881d      	ldrh	r5, [r3, #0]
 80037f2:	2f6f      	cmp	r7, #111	; 0x6f
 80037f4:	bf0c      	ite	eq
 80037f6:	2308      	moveq	r3, #8
 80037f8:	230a      	movne	r3, #10
 80037fa:	4852      	ldr	r0, [pc, #328]	; (8003944 <_printf_i+0x244>)
 80037fc:	2100      	movs	r1, #0
 80037fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003802:	6866      	ldr	r6, [r4, #4]
 8003804:	2e00      	cmp	r6, #0
 8003806:	bfa8      	it	ge
 8003808:	6821      	ldrge	r1, [r4, #0]
 800380a:	60a6      	str	r6, [r4, #8]
 800380c:	bfa4      	itt	ge
 800380e:	f021 0104 	bicge.w	r1, r1, #4
 8003812:	6021      	strge	r1, [r4, #0]
 8003814:	b90d      	cbnz	r5, 800381a <_printf_i+0x11a>
 8003816:	2e00      	cmp	r6, #0
 8003818:	d04d      	beq.n	80038b6 <_printf_i+0x1b6>
 800381a:	4616      	mov	r6, r2
 800381c:	fbb5 f1f3 	udiv	r1, r5, r3
 8003820:	fb03 5711 	mls	r7, r3, r1, r5
 8003824:	5dc7      	ldrb	r7, [r0, r7]
 8003826:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800382a:	462f      	mov	r7, r5
 800382c:	42bb      	cmp	r3, r7
 800382e:	460d      	mov	r5, r1
 8003830:	d9f4      	bls.n	800381c <_printf_i+0x11c>
 8003832:	2b08      	cmp	r3, #8
 8003834:	d10b      	bne.n	800384e <_printf_i+0x14e>
 8003836:	6823      	ldr	r3, [r4, #0]
 8003838:	07df      	lsls	r7, r3, #31
 800383a:	d508      	bpl.n	800384e <_printf_i+0x14e>
 800383c:	6923      	ldr	r3, [r4, #16]
 800383e:	6861      	ldr	r1, [r4, #4]
 8003840:	4299      	cmp	r1, r3
 8003842:	bfde      	ittt	le
 8003844:	2330      	movle	r3, #48	; 0x30
 8003846:	f806 3c01 	strble.w	r3, [r6, #-1]
 800384a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800384e:	1b92      	subs	r2, r2, r6
 8003850:	6122      	str	r2, [r4, #16]
 8003852:	464b      	mov	r3, r9
 8003854:	4621      	mov	r1, r4
 8003856:	4640      	mov	r0, r8
 8003858:	f8cd a000 	str.w	sl, [sp]
 800385c:	aa03      	add	r2, sp, #12
 800385e:	f7ff fedf 	bl	8003620 <_printf_common>
 8003862:	3001      	adds	r0, #1
 8003864:	d14c      	bne.n	8003900 <_printf_i+0x200>
 8003866:	f04f 30ff 	mov.w	r0, #4294967295
 800386a:	b004      	add	sp, #16
 800386c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003870:	4834      	ldr	r0, [pc, #208]	; (8003944 <_printf_i+0x244>)
 8003872:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003876:	680e      	ldr	r6, [r1, #0]
 8003878:	6823      	ldr	r3, [r4, #0]
 800387a:	f856 5b04 	ldr.w	r5, [r6], #4
 800387e:	061f      	lsls	r7, r3, #24
 8003880:	600e      	str	r6, [r1, #0]
 8003882:	d514      	bpl.n	80038ae <_printf_i+0x1ae>
 8003884:	07d9      	lsls	r1, r3, #31
 8003886:	bf44      	itt	mi
 8003888:	f043 0320 	orrmi.w	r3, r3, #32
 800388c:	6023      	strmi	r3, [r4, #0]
 800388e:	b91d      	cbnz	r5, 8003898 <_printf_i+0x198>
 8003890:	6823      	ldr	r3, [r4, #0]
 8003892:	f023 0320 	bic.w	r3, r3, #32
 8003896:	6023      	str	r3, [r4, #0]
 8003898:	2310      	movs	r3, #16
 800389a:	e7af      	b.n	80037fc <_printf_i+0xfc>
 800389c:	6823      	ldr	r3, [r4, #0]
 800389e:	f043 0320 	orr.w	r3, r3, #32
 80038a2:	6023      	str	r3, [r4, #0]
 80038a4:	2378      	movs	r3, #120	; 0x78
 80038a6:	4828      	ldr	r0, [pc, #160]	; (8003948 <_printf_i+0x248>)
 80038a8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80038ac:	e7e3      	b.n	8003876 <_printf_i+0x176>
 80038ae:	065e      	lsls	r6, r3, #25
 80038b0:	bf48      	it	mi
 80038b2:	b2ad      	uxthmi	r5, r5
 80038b4:	e7e6      	b.n	8003884 <_printf_i+0x184>
 80038b6:	4616      	mov	r6, r2
 80038b8:	e7bb      	b.n	8003832 <_printf_i+0x132>
 80038ba:	680b      	ldr	r3, [r1, #0]
 80038bc:	6826      	ldr	r6, [r4, #0]
 80038be:	1d1d      	adds	r5, r3, #4
 80038c0:	6960      	ldr	r0, [r4, #20]
 80038c2:	600d      	str	r5, [r1, #0]
 80038c4:	0635      	lsls	r5, r6, #24
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	d501      	bpl.n	80038ce <_printf_i+0x1ce>
 80038ca:	6018      	str	r0, [r3, #0]
 80038cc:	e002      	b.n	80038d4 <_printf_i+0x1d4>
 80038ce:	0671      	lsls	r1, r6, #25
 80038d0:	d5fb      	bpl.n	80038ca <_printf_i+0x1ca>
 80038d2:	8018      	strh	r0, [r3, #0]
 80038d4:	2300      	movs	r3, #0
 80038d6:	4616      	mov	r6, r2
 80038d8:	6123      	str	r3, [r4, #16]
 80038da:	e7ba      	b.n	8003852 <_printf_i+0x152>
 80038dc:	680b      	ldr	r3, [r1, #0]
 80038de:	1d1a      	adds	r2, r3, #4
 80038e0:	600a      	str	r2, [r1, #0]
 80038e2:	681e      	ldr	r6, [r3, #0]
 80038e4:	2100      	movs	r1, #0
 80038e6:	4630      	mov	r0, r6
 80038e8:	6862      	ldr	r2, [r4, #4]
 80038ea:	f000 f82f 	bl	800394c <memchr>
 80038ee:	b108      	cbz	r0, 80038f4 <_printf_i+0x1f4>
 80038f0:	1b80      	subs	r0, r0, r6
 80038f2:	6060      	str	r0, [r4, #4]
 80038f4:	6863      	ldr	r3, [r4, #4]
 80038f6:	6123      	str	r3, [r4, #16]
 80038f8:	2300      	movs	r3, #0
 80038fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80038fe:	e7a8      	b.n	8003852 <_printf_i+0x152>
 8003900:	4632      	mov	r2, r6
 8003902:	4649      	mov	r1, r9
 8003904:	4640      	mov	r0, r8
 8003906:	6923      	ldr	r3, [r4, #16]
 8003908:	47d0      	blx	sl
 800390a:	3001      	adds	r0, #1
 800390c:	d0ab      	beq.n	8003866 <_printf_i+0x166>
 800390e:	6823      	ldr	r3, [r4, #0]
 8003910:	079b      	lsls	r3, r3, #30
 8003912:	d413      	bmi.n	800393c <_printf_i+0x23c>
 8003914:	68e0      	ldr	r0, [r4, #12]
 8003916:	9b03      	ldr	r3, [sp, #12]
 8003918:	4298      	cmp	r0, r3
 800391a:	bfb8      	it	lt
 800391c:	4618      	movlt	r0, r3
 800391e:	e7a4      	b.n	800386a <_printf_i+0x16a>
 8003920:	2301      	movs	r3, #1
 8003922:	4632      	mov	r2, r6
 8003924:	4649      	mov	r1, r9
 8003926:	4640      	mov	r0, r8
 8003928:	47d0      	blx	sl
 800392a:	3001      	adds	r0, #1
 800392c:	d09b      	beq.n	8003866 <_printf_i+0x166>
 800392e:	3501      	adds	r5, #1
 8003930:	68e3      	ldr	r3, [r4, #12]
 8003932:	9903      	ldr	r1, [sp, #12]
 8003934:	1a5b      	subs	r3, r3, r1
 8003936:	42ab      	cmp	r3, r5
 8003938:	dcf2      	bgt.n	8003920 <_printf_i+0x220>
 800393a:	e7eb      	b.n	8003914 <_printf_i+0x214>
 800393c:	2500      	movs	r5, #0
 800393e:	f104 0619 	add.w	r6, r4, #25
 8003942:	e7f5      	b.n	8003930 <_printf_i+0x230>
 8003944:	08003c43 	.word	0x08003c43
 8003948:	08003c54 	.word	0x08003c54

0800394c <memchr>:
 800394c:	4603      	mov	r3, r0
 800394e:	b510      	push	{r4, lr}
 8003950:	b2c9      	uxtb	r1, r1
 8003952:	4402      	add	r2, r0
 8003954:	4293      	cmp	r3, r2
 8003956:	4618      	mov	r0, r3
 8003958:	d101      	bne.n	800395e <memchr+0x12>
 800395a:	2000      	movs	r0, #0
 800395c:	e003      	b.n	8003966 <memchr+0x1a>
 800395e:	7804      	ldrb	r4, [r0, #0]
 8003960:	3301      	adds	r3, #1
 8003962:	428c      	cmp	r4, r1
 8003964:	d1f6      	bne.n	8003954 <memchr+0x8>
 8003966:	bd10      	pop	{r4, pc}

08003968 <memcpy>:
 8003968:	440a      	add	r2, r1
 800396a:	4291      	cmp	r1, r2
 800396c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003970:	d100      	bne.n	8003974 <memcpy+0xc>
 8003972:	4770      	bx	lr
 8003974:	b510      	push	{r4, lr}
 8003976:	f811 4b01 	ldrb.w	r4, [r1], #1
 800397a:	4291      	cmp	r1, r2
 800397c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003980:	d1f9      	bne.n	8003976 <memcpy+0xe>
 8003982:	bd10      	pop	{r4, pc}

08003984 <memmove>:
 8003984:	4288      	cmp	r0, r1
 8003986:	b510      	push	{r4, lr}
 8003988:	eb01 0402 	add.w	r4, r1, r2
 800398c:	d902      	bls.n	8003994 <memmove+0x10>
 800398e:	4284      	cmp	r4, r0
 8003990:	4623      	mov	r3, r4
 8003992:	d807      	bhi.n	80039a4 <memmove+0x20>
 8003994:	1e43      	subs	r3, r0, #1
 8003996:	42a1      	cmp	r1, r4
 8003998:	d008      	beq.n	80039ac <memmove+0x28>
 800399a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800399e:	f803 2f01 	strb.w	r2, [r3, #1]!
 80039a2:	e7f8      	b.n	8003996 <memmove+0x12>
 80039a4:	4601      	mov	r1, r0
 80039a6:	4402      	add	r2, r0
 80039a8:	428a      	cmp	r2, r1
 80039aa:	d100      	bne.n	80039ae <memmove+0x2a>
 80039ac:	bd10      	pop	{r4, pc}
 80039ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80039b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80039b6:	e7f7      	b.n	80039a8 <memmove+0x24>

080039b8 <_free_r>:
 80039b8:	b538      	push	{r3, r4, r5, lr}
 80039ba:	4605      	mov	r5, r0
 80039bc:	2900      	cmp	r1, #0
 80039be:	d043      	beq.n	8003a48 <_free_r+0x90>
 80039c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80039c4:	1f0c      	subs	r4, r1, #4
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	bfb8      	it	lt
 80039ca:	18e4      	addlt	r4, r4, r3
 80039cc:	f000 f8d0 	bl	8003b70 <__malloc_lock>
 80039d0:	4a1e      	ldr	r2, [pc, #120]	; (8003a4c <_free_r+0x94>)
 80039d2:	6813      	ldr	r3, [r2, #0]
 80039d4:	4610      	mov	r0, r2
 80039d6:	b933      	cbnz	r3, 80039e6 <_free_r+0x2e>
 80039d8:	6063      	str	r3, [r4, #4]
 80039da:	6014      	str	r4, [r2, #0]
 80039dc:	4628      	mov	r0, r5
 80039de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80039e2:	f000 b8cb 	b.w	8003b7c <__malloc_unlock>
 80039e6:	42a3      	cmp	r3, r4
 80039e8:	d90a      	bls.n	8003a00 <_free_r+0x48>
 80039ea:	6821      	ldr	r1, [r4, #0]
 80039ec:	1862      	adds	r2, r4, r1
 80039ee:	4293      	cmp	r3, r2
 80039f0:	bf01      	itttt	eq
 80039f2:	681a      	ldreq	r2, [r3, #0]
 80039f4:	685b      	ldreq	r3, [r3, #4]
 80039f6:	1852      	addeq	r2, r2, r1
 80039f8:	6022      	streq	r2, [r4, #0]
 80039fa:	6063      	str	r3, [r4, #4]
 80039fc:	6004      	str	r4, [r0, #0]
 80039fe:	e7ed      	b.n	80039dc <_free_r+0x24>
 8003a00:	461a      	mov	r2, r3
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	b10b      	cbz	r3, 8003a0a <_free_r+0x52>
 8003a06:	42a3      	cmp	r3, r4
 8003a08:	d9fa      	bls.n	8003a00 <_free_r+0x48>
 8003a0a:	6811      	ldr	r1, [r2, #0]
 8003a0c:	1850      	adds	r0, r2, r1
 8003a0e:	42a0      	cmp	r0, r4
 8003a10:	d10b      	bne.n	8003a2a <_free_r+0x72>
 8003a12:	6820      	ldr	r0, [r4, #0]
 8003a14:	4401      	add	r1, r0
 8003a16:	1850      	adds	r0, r2, r1
 8003a18:	4283      	cmp	r3, r0
 8003a1a:	6011      	str	r1, [r2, #0]
 8003a1c:	d1de      	bne.n	80039dc <_free_r+0x24>
 8003a1e:	6818      	ldr	r0, [r3, #0]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	4401      	add	r1, r0
 8003a24:	6011      	str	r1, [r2, #0]
 8003a26:	6053      	str	r3, [r2, #4]
 8003a28:	e7d8      	b.n	80039dc <_free_r+0x24>
 8003a2a:	d902      	bls.n	8003a32 <_free_r+0x7a>
 8003a2c:	230c      	movs	r3, #12
 8003a2e:	602b      	str	r3, [r5, #0]
 8003a30:	e7d4      	b.n	80039dc <_free_r+0x24>
 8003a32:	6820      	ldr	r0, [r4, #0]
 8003a34:	1821      	adds	r1, r4, r0
 8003a36:	428b      	cmp	r3, r1
 8003a38:	bf01      	itttt	eq
 8003a3a:	6819      	ldreq	r1, [r3, #0]
 8003a3c:	685b      	ldreq	r3, [r3, #4]
 8003a3e:	1809      	addeq	r1, r1, r0
 8003a40:	6021      	streq	r1, [r4, #0]
 8003a42:	6063      	str	r3, [r4, #4]
 8003a44:	6054      	str	r4, [r2, #4]
 8003a46:	e7c9      	b.n	80039dc <_free_r+0x24>
 8003a48:	bd38      	pop	{r3, r4, r5, pc}
 8003a4a:	bf00      	nop
 8003a4c:	20000110 	.word	0x20000110

08003a50 <_malloc_r>:
 8003a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a52:	1ccd      	adds	r5, r1, #3
 8003a54:	f025 0503 	bic.w	r5, r5, #3
 8003a58:	3508      	adds	r5, #8
 8003a5a:	2d0c      	cmp	r5, #12
 8003a5c:	bf38      	it	cc
 8003a5e:	250c      	movcc	r5, #12
 8003a60:	2d00      	cmp	r5, #0
 8003a62:	4606      	mov	r6, r0
 8003a64:	db01      	blt.n	8003a6a <_malloc_r+0x1a>
 8003a66:	42a9      	cmp	r1, r5
 8003a68:	d903      	bls.n	8003a72 <_malloc_r+0x22>
 8003a6a:	230c      	movs	r3, #12
 8003a6c:	6033      	str	r3, [r6, #0]
 8003a6e:	2000      	movs	r0, #0
 8003a70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a72:	f000 f87d 	bl	8003b70 <__malloc_lock>
 8003a76:	4921      	ldr	r1, [pc, #132]	; (8003afc <_malloc_r+0xac>)
 8003a78:	680a      	ldr	r2, [r1, #0]
 8003a7a:	4614      	mov	r4, r2
 8003a7c:	b99c      	cbnz	r4, 8003aa6 <_malloc_r+0x56>
 8003a7e:	4f20      	ldr	r7, [pc, #128]	; (8003b00 <_malloc_r+0xb0>)
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	b923      	cbnz	r3, 8003a8e <_malloc_r+0x3e>
 8003a84:	4621      	mov	r1, r4
 8003a86:	4630      	mov	r0, r6
 8003a88:	f000 f862 	bl	8003b50 <_sbrk_r>
 8003a8c:	6038      	str	r0, [r7, #0]
 8003a8e:	4629      	mov	r1, r5
 8003a90:	4630      	mov	r0, r6
 8003a92:	f000 f85d 	bl	8003b50 <_sbrk_r>
 8003a96:	1c43      	adds	r3, r0, #1
 8003a98:	d123      	bne.n	8003ae2 <_malloc_r+0x92>
 8003a9a:	230c      	movs	r3, #12
 8003a9c:	4630      	mov	r0, r6
 8003a9e:	6033      	str	r3, [r6, #0]
 8003aa0:	f000 f86c 	bl	8003b7c <__malloc_unlock>
 8003aa4:	e7e3      	b.n	8003a6e <_malloc_r+0x1e>
 8003aa6:	6823      	ldr	r3, [r4, #0]
 8003aa8:	1b5b      	subs	r3, r3, r5
 8003aaa:	d417      	bmi.n	8003adc <_malloc_r+0x8c>
 8003aac:	2b0b      	cmp	r3, #11
 8003aae:	d903      	bls.n	8003ab8 <_malloc_r+0x68>
 8003ab0:	6023      	str	r3, [r4, #0]
 8003ab2:	441c      	add	r4, r3
 8003ab4:	6025      	str	r5, [r4, #0]
 8003ab6:	e004      	b.n	8003ac2 <_malloc_r+0x72>
 8003ab8:	6863      	ldr	r3, [r4, #4]
 8003aba:	42a2      	cmp	r2, r4
 8003abc:	bf0c      	ite	eq
 8003abe:	600b      	streq	r3, [r1, #0]
 8003ac0:	6053      	strne	r3, [r2, #4]
 8003ac2:	4630      	mov	r0, r6
 8003ac4:	f000 f85a 	bl	8003b7c <__malloc_unlock>
 8003ac8:	f104 000b 	add.w	r0, r4, #11
 8003acc:	1d23      	adds	r3, r4, #4
 8003ace:	f020 0007 	bic.w	r0, r0, #7
 8003ad2:	1ac2      	subs	r2, r0, r3
 8003ad4:	d0cc      	beq.n	8003a70 <_malloc_r+0x20>
 8003ad6:	1a1b      	subs	r3, r3, r0
 8003ad8:	50a3      	str	r3, [r4, r2]
 8003ada:	e7c9      	b.n	8003a70 <_malloc_r+0x20>
 8003adc:	4622      	mov	r2, r4
 8003ade:	6864      	ldr	r4, [r4, #4]
 8003ae0:	e7cc      	b.n	8003a7c <_malloc_r+0x2c>
 8003ae2:	1cc4      	adds	r4, r0, #3
 8003ae4:	f024 0403 	bic.w	r4, r4, #3
 8003ae8:	42a0      	cmp	r0, r4
 8003aea:	d0e3      	beq.n	8003ab4 <_malloc_r+0x64>
 8003aec:	1a21      	subs	r1, r4, r0
 8003aee:	4630      	mov	r0, r6
 8003af0:	f000 f82e 	bl	8003b50 <_sbrk_r>
 8003af4:	3001      	adds	r0, #1
 8003af6:	d1dd      	bne.n	8003ab4 <_malloc_r+0x64>
 8003af8:	e7cf      	b.n	8003a9a <_malloc_r+0x4a>
 8003afa:	bf00      	nop
 8003afc:	20000110 	.word	0x20000110
 8003b00:	20000114 	.word	0x20000114

08003b04 <_realloc_r>:
 8003b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b06:	4607      	mov	r7, r0
 8003b08:	4614      	mov	r4, r2
 8003b0a:	460e      	mov	r6, r1
 8003b0c:	b921      	cbnz	r1, 8003b18 <_realloc_r+0x14>
 8003b0e:	4611      	mov	r1, r2
 8003b10:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003b14:	f7ff bf9c 	b.w	8003a50 <_malloc_r>
 8003b18:	b922      	cbnz	r2, 8003b24 <_realloc_r+0x20>
 8003b1a:	f7ff ff4d 	bl	80039b8 <_free_r>
 8003b1e:	4625      	mov	r5, r4
 8003b20:	4628      	mov	r0, r5
 8003b22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b24:	f000 f830 	bl	8003b88 <_malloc_usable_size_r>
 8003b28:	42a0      	cmp	r0, r4
 8003b2a:	d20f      	bcs.n	8003b4c <_realloc_r+0x48>
 8003b2c:	4621      	mov	r1, r4
 8003b2e:	4638      	mov	r0, r7
 8003b30:	f7ff ff8e 	bl	8003a50 <_malloc_r>
 8003b34:	4605      	mov	r5, r0
 8003b36:	2800      	cmp	r0, #0
 8003b38:	d0f2      	beq.n	8003b20 <_realloc_r+0x1c>
 8003b3a:	4631      	mov	r1, r6
 8003b3c:	4622      	mov	r2, r4
 8003b3e:	f7ff ff13 	bl	8003968 <memcpy>
 8003b42:	4631      	mov	r1, r6
 8003b44:	4638      	mov	r0, r7
 8003b46:	f7ff ff37 	bl	80039b8 <_free_r>
 8003b4a:	e7e9      	b.n	8003b20 <_realloc_r+0x1c>
 8003b4c:	4635      	mov	r5, r6
 8003b4e:	e7e7      	b.n	8003b20 <_realloc_r+0x1c>

08003b50 <_sbrk_r>:
 8003b50:	b538      	push	{r3, r4, r5, lr}
 8003b52:	2300      	movs	r3, #0
 8003b54:	4d05      	ldr	r5, [pc, #20]	; (8003b6c <_sbrk_r+0x1c>)
 8003b56:	4604      	mov	r4, r0
 8003b58:	4608      	mov	r0, r1
 8003b5a:	602b      	str	r3, [r5, #0]
 8003b5c:	f7fd f9c6 	bl	8000eec <_sbrk>
 8003b60:	1c43      	adds	r3, r0, #1
 8003b62:	d102      	bne.n	8003b6a <_sbrk_r+0x1a>
 8003b64:	682b      	ldr	r3, [r5, #0]
 8003b66:	b103      	cbz	r3, 8003b6a <_sbrk_r+0x1a>
 8003b68:	6023      	str	r3, [r4, #0]
 8003b6a:	bd38      	pop	{r3, r4, r5, pc}
 8003b6c:	200001b8 	.word	0x200001b8

08003b70 <__malloc_lock>:
 8003b70:	4801      	ldr	r0, [pc, #4]	; (8003b78 <__malloc_lock+0x8>)
 8003b72:	f000 b811 	b.w	8003b98 <__retarget_lock_acquire_recursive>
 8003b76:	bf00      	nop
 8003b78:	200001c0 	.word	0x200001c0

08003b7c <__malloc_unlock>:
 8003b7c:	4801      	ldr	r0, [pc, #4]	; (8003b84 <__malloc_unlock+0x8>)
 8003b7e:	f000 b80c 	b.w	8003b9a <__retarget_lock_release_recursive>
 8003b82:	bf00      	nop
 8003b84:	200001c0 	.word	0x200001c0

08003b88 <_malloc_usable_size_r>:
 8003b88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b8c:	1f18      	subs	r0, r3, #4
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	bfbc      	itt	lt
 8003b92:	580b      	ldrlt	r3, [r1, r0]
 8003b94:	18c0      	addlt	r0, r0, r3
 8003b96:	4770      	bx	lr

08003b98 <__retarget_lock_acquire_recursive>:
 8003b98:	4770      	bx	lr

08003b9a <__retarget_lock_release_recursive>:
 8003b9a:	4770      	bx	lr

08003b9c <_init>:
 8003b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b9e:	bf00      	nop
 8003ba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ba2:	bc08      	pop	{r3}
 8003ba4:	469e      	mov	lr, r3
 8003ba6:	4770      	bx	lr

08003ba8 <_fini>:
 8003ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003baa:	bf00      	nop
 8003bac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bae:	bc08      	pop	{r3}
 8003bb0:	469e      	mov	lr, r3
 8003bb2:	4770      	bx	lr
